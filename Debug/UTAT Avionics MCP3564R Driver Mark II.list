
UTAT Avionics MCP3564R Driver Mark II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005efc  08005efc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  08005f04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  2004005c  08005f60  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004083c  08005f60  0000783c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001319c  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288c  00000000  00000000  0001a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001cab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be5  00000000  00000000  0001da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6cb  00000000  00000000  0001e60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013604  00000000  00000000  00048cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010198b  00000000  00000000  0005c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dc67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  0015dcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0016223c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005e04 	.word	0x08005e04

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	08005e04 	.word	0x08005e04

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MCP3564_Init>:
//GPIO_TypeDef* GPIOpinLetter;
//uint16_t GPIO_PIN_Number;

//todo: make all pin assignments generic (after testing, for simplicity's sake)
//Initializes MCP3564 on a particular SPI bus, returns 0 if successful, 1 if failed
int MCP3564_Init(SPI_HandleTypeDef* hspi/*, GPIO_TypeDef* GPIOpinLetter, uint16_t GPIO_PIN_Number*/){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	MCP3564_hspi = hspi;
 80005a8:	4a29      	ldr	r2, [pc, #164]	@ (8000650 <MCP3564_Init+0xb0>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
	uint8_t RxData1 = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73bb      	strb	r3, [r7, #14]
	uint8_t RxData2 = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	737b      	strb	r3, [r7, #13]

	//01 = device address, 0001 = CONFIG0, 10 = incremental write
	uint8_t writeCommand = 0b01000110;
 80005b6:	2346      	movs	r3, #70	@ 0x46
 80005b8:	733b      	strb	r3, [r7, #12]
	//1 = default Vref, 1 = not partial shutdown, 00 = extern. digital clk, 00 = no current applied, 11 = conversion mode
	uint8_t configWrite = 0b11000011;
 80005ba:	23c3      	movs	r3, #195	@ 0xc3
 80005bc:	72fb      	strb	r3, [r7, #11]

	//connects hspi to ADC/check that its connected
	status = MCP3564_CheckConnection();
 80005be:	f000 f84b 	bl	8000658 <MCP3564_CheckConnection>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){ return 1; }
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MCP3564_Init+0x30>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e03a      	b.n	8000646 <MCP3564_Init+0xa6>

	//set CS low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	481f      	ldr	r0, [pc, #124]	@ (8000654 <MCP3564_Init+0xb4>)
 80005d6:	f001 f881 	bl	80016dc <HAL_GPIO_WritePin>

	//send write command
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCommand, &RxData1, 1, 1000);
 80005da:	4b1d      	ldr	r3, [pc, #116]	@ (8000650 <MCP3564_Init+0xb0>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f107 020e 	add.w	r2, r7, #14
 80005e2:	f107 010c 	add.w	r1, r7, #12
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	f003 f9e6 	bl	80039be <HAL_SPI_TransmitReceive>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d106      	bne.n	800060a <MCP3564_Init+0x6a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4814      	ldr	r0, [pc, #80]	@ (8000654 <MCP3564_Init+0xb4>)
 8000602:	f001 f86b 	bl	80016dc <HAL_GPIO_WritePin>
		return 1;
 8000606:	2301      	movs	r3, #1
 8000608:	e01d      	b.n	8000646 <MCP3564_Init+0xa6>
	}

	//write to config register to enable conversion mode
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &configWrite, &RxData2, 1, 1000);
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MCP3564_Init+0xb0>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f107 020d 	add.w	r2, r7, #13
 8000612:	f107 010b 	add.w	r1, r7, #11
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	f003 f9ce 	bl	80039be <HAL_SPI_TransmitReceive>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <MCP3564_Init+0x9a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4808      	ldr	r0, [pc, #32]	@ (8000654 <MCP3564_Init+0xb4>)
 8000632:	f001 f853 	bl	80016dc <HAL_GPIO_WritePin>
		return 1;
 8000636:	2301      	movs	r3, #1
 8000638:	e005      	b.n	8000646 <MCP3564_Init+0xa6>
	}

	//set CS high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2110      	movs	r1, #16
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MCP3564_Init+0xb4>)
 8000640:	f001 f84c 	bl	80016dc <HAL_GPIO_WritePin>

	//return 0 if successfully reached this point
	return 0;
 8000644:	2300      	movs	r3, #0

}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20040078 	.word	0x20040078
 8000654:	48000800 	.word	0x48000800

08000658 <MCP3564_CheckConnection>:

// Checks if the MCP3564 is connected to the SPI bus, returns 0 if successful, 1 if failed
int MCP3564_CheckConnection(){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
	//		           → CMD[5:2] = 0x1
	//		           → CMD[1:0] = 01 (static, for now)
	HAL_StatusTypeDef status;

	//01 = device address, 0001 = CONFIG0, 01 = static read
	uint8_t TxData = 0b01000101;
 800065e:	2345      	movs	r3, #69	@ 0x45
 8000660:	713b      	strb	r3, [r7, #4]
	uint8_t RxData = 0; // create space for status byte
 8000662:	2300      	movs	r3, #0
 8000664:	70fb      	strb	r3, [r7, #3]

	//Pin C4 is our manual chip select line for the MCP3564R
	//Set ~CS low to begin reading and writing to chip
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2110      	movs	r1, #16
 800066a:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <MCP3564_CheckConnection+0x88>)
 800066c:	f001 f836 	bl	80016dc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &TxData, &RxData, 1, HAL_MAX_DELAY);
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MCP3564_CheckConnection+0x8c>)
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	1cfa      	adds	r2, r7, #3
 8000676:	1d39      	adds	r1, r7, #4
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	f003 f99d 	bl	80039be <HAL_SPI_TransmitReceive>
 8000684:	4603      	mov	r3, r0
 8000686:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_ERROR) {
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d106      	bne.n	800069c <MCP3564_CheckConnection+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	4813      	ldr	r0, [pc, #76]	@ (80006e0 <MCP3564_CheckConnection+0x88>)
 8000694:	f001 f822 	bl	80016dc <HAL_GPIO_WritePin>
		return status;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	e01d      	b.n	80006d8 <MCP3564_CheckConnection+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <MCP3564_CheckConnection+0x88>)
 80006a2:	f001 f81b 	bl	80016dc <HAL_GPIO_WritePin>

	//isolate device bits to check if STAT[4] is complement of STAT[3]
	uint8_t STAT4 = (RxData >> 4) & 0x01;
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	71bb      	strb	r3, [r7, #6]
	uint8_t STAT3 = (RxData >> 3) & 0x01;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	717b      	strb	r3, [r7, #5]
	if (STAT4 == STAT3) {
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d101      	bne.n	80006ca <MCP3564_CheckConnection+0x72>
		return 1; // device not connected
 80006c6:	2301      	movs	r3, #1
 80006c8:	e006      	b.n	80006d8 <MCP3564_CheckConnection+0x80>
	} else if (STAT4 != STAT3){
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d001      	beq.n	80006d6 <MCP3564_CheckConnection+0x7e>
		return 0; //device connected
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <MCP3564_CheckConnection+0x80>
	}
	return status;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	48000800 	.word	0x48000800
 80006e4:	20040078 	.word	0x20040078

080006e8 <MCP3564_ReadChannel>:

// Reads voltage calculated from MCP3564, returns 0 if successful, 1 if failed
int MCP3564_ReadChannel(int32_t *channelReading){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint8_t command = 0b01000001;
 80006f0:	2341      	movs	r3, #65	@ 0x41
 80006f2:	72fb      	strb	r3, [r7, #11]

	//CS low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	481a      	ldr	r0, [pc, #104]	@ (8000764 <MCP3564_ReadChannel+0x7c>)
 80006fa:	f000 ffef 	bl	80016dc <HAL_GPIO_WritePin>
	//returns 0 if no problem
	//01 = device address, 0000 = ADCDATA, 01 = static read
	status = HAL_SPI_Transmit (MCP3564_hspi, &command, 1, 1000);
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MCP3564_ReadChannel+0x80>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 010b 	add.w	r1, r7, #11
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	2201      	movs	r2, #1
 800070c:	f002 fea9 	bl	8003462 <HAL_SPI_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d101      	bne.n	800071e <MCP3564_ReadChannel+0x36>
		return status;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	e01e      	b.n	800075c <MCP3564_ReadChannel+0x74>
	}
	status = HAL_SPI_Receive (MCP3564_hspi, data, 3, 1000);
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MCP3564_ReadChannel+0x80>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072a:	2203      	movs	r2, #3
 800072c:	f003 f80f 	bl	800374e <HAL_SPI_Receive>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d101      	bne.n	800073e <MCP3564_ReadChannel+0x56>
			return status;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	e00e      	b.n	800075c <MCP3564_ReadChannel+0x74>
	}
	//CS high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2110      	movs	r1, #16
 8000742:	4808      	ldr	r0, [pc, #32]	@ (8000764 <MCP3564_ReadChannel+0x7c>)
 8000744:	f000 ffca 	bl	80016dc <HAL_GPIO_WritePin>

	//stitches the 3 bytes of data together
	//todo: verify that these bits are being stitched together correctly
	*channelReading = ((int32_t)data[0] << 16 | (int32_t)data[1] << 8 | (int32_t)data[2]);
 8000748:	7b3b      	ldrb	r3, [r7, #12]
 800074a:	041a      	lsls	r2, r3, #16
 800074c:	7b7b      	ldrb	r3, [r7, #13]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	4313      	orrs	r3, r2
 8000752:	7bba      	ldrb	r2, [r7, #14]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]

	return status;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	48000800 	.word	0x48000800
 8000768:	20040078 	.word	0x20040078

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fca2 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f853 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f9a9 	bl	8000ad0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800077e:	f000 f8a3 	bl	80008c8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000782:	f000 f8ed 	bl	8000960 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000786:	f000 f975 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800078a:	f000 f935 	bl	80009f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2110      	movs	r1, #16
 8000792:	481e      	ldr	r0, [pc, #120]	@ (800080c <main+0xa0>)
 8000794:	f000 ffa2 	bl	80016dc <HAL_GPIO_WritePin>
    status = MCP3564_Init(&hspi1);
 8000798:	481d      	ldr	r0, [pc, #116]	@ (8000810 <main+0xa4>)
 800079a:	f7ff ff01 	bl	80005a0 <MCP3564_Init>
 800079e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if(status == HAL_ERROR) {
 80007a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d105      	bne.n	80007b2 <main+0x46>
    	sprintf((char*)tx_buff, "ERROR: MCP3564R failed to initiate\n\r");
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	491a      	ldr	r1, [pc, #104]	@ (8000814 <main+0xa8>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fe89 	bl	80054c4 <siprintf>
    }
    HAL_UART_Transmit(&hlpuart1, tx_buff, strlen((char*)tx_buff), 1000);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd22 	bl	8000200 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f107 0108 	add.w	r1, r7, #8
 80007c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <main+0xac>)
 80007ca:	f003 fd23 	bl	8004214 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int32_t channelReading = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
	status = MCP3564_ReadChannel(&channelReading);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff87 	bl	80006e8 <MCP3564_ReadChannel>
 80007da:	66f8      	str	r0, [r7, #108]	@ 0x6c

	sprintf((char*)tx_buff, "CH0: %d \n\r", channelReading);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	490e      	ldr	r1, [pc, #56]	@ (800081c <main+0xb0>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 fe6d 	bl	80054c4 <siprintf>

	HAL_UART_Transmit(&hlpuart1, tx_buff, strlen((char*)tx_buff), 1000);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd06 	bl	8000200 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f107 0108 	add.w	r1, r7, #8
 80007fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <main+0xac>)
 8000802:	f003 fd07 	bl	8004214 <HAL_UART_Transmit>
  {
 8000806:	bf00      	nop
 8000808:	e7e1      	b.n	80007ce <main+0x62>
 800080a:	bf00      	nop
 800080c:	48000800 	.word	0x48000800
 8000810:	200401a4 	.word	0x200401a4
 8000814:	08005e1c 	.word	0x08005e1c
 8000818:	2004007c 	.word	0x2004007c
 800081c:	08005e44 	.word	0x08005e44

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b096      	sub	sp, #88	@ 0x58
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2244      	movs	r2, #68	@ 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fe68 	bl	8005504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000842:	2000      	movs	r0, #0
 8000844:	f001 f8b6 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800084e:	f000 f9f5 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000852:	2322      	movs	r3, #34	@ 0x22
 8000854:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000870:	231e      	movs	r3, #30
 8000872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f959 	bl	8001b3c <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000890:	f000 f9d4 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2303      	movs	r3, #3
 800089a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fd5e 	bl	8002370 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ba:	f000 f9bf 	bl	8000c3c <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3758      	adds	r7, #88	@ 0x58
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	4a23      	ldr	r2, [pc, #140]	@ (800095c <MX_LPUART1_UART_Init+0x94>)
 80008d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000910:	4811      	ldr	r0, [pc, #68]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000912:	f003 fc2f 	bl	8004174 <HAL_UART_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 f98e 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000924:	f004 fa58 	bl	8004dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800092e:	f000 f985 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000936:	f004 fa8d 	bl	8004e54 <HAL_UARTEx_SetRxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 f97c 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_LPUART1_UART_Init+0x90>)
 8000946:	f004 fa0e 	bl	8004d66 <HAL_UARTEx_DisableFifoMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 f974 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2004007c 	.word	0x2004007c
 800095c:	40008000 	.word	0x40008000

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <MX_USART3_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009aa:	f003 fbe3 	bl	8004174 <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f942 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009bc:	f004 fa0c 	bl	8004dd8 <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 f939 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f004 fa41 	bl	8004e54 <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f930 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009de:	f004 f9c2 	bl	8004d66 <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f928 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20040110 	.word	0x20040110
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_SPI1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_SPI1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a58:	f002 fc60 	bl	800331c <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f8eb 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200401a4 	.word	0x200401a4
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2206      	movs	r2, #6
 8000a84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	f000 fe28 	bl	800170c <HAL_PCD_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f8bb 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20040208 	.word	0x20040208

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b51      	ldr	r3, [pc, #324]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a50      	ldr	r2, [pc, #320]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b4b      	ldr	r3, [pc, #300]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	4a4a      	ldr	r2, [pc, #296]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0a:	4b48      	ldr	r3, [pc, #288]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b45      	ldr	r3, [pc, #276]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a44      	ldr	r2, [pc, #272]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a3e      	ldr	r2, [pc, #248]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b39      	ldr	r3, [pc, #228]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a38      	ldr	r2, [pc, #224]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <MX_GPIO_Init+0x15c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000b76:	f000 ffd1 	bl	8001b1c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	482c      	ldr	r0, [pc, #176]	@ (8000c30 <MX_GPIO_Init+0x160>)
 8000b80:	f000 fdac 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b8a:	482a      	ldr	r0, [pc, #168]	@ (8000c34 <MX_GPIO_Init+0x164>)
 8000b8c:	f000 fda6 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2140      	movs	r1, #64	@ 0x40
 8000b94:	4828      	ldr	r0, [pc, #160]	@ (8000c38 <MX_GPIO_Init+0x168>)
 8000b96:	f000 fda1 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481f      	ldr	r0, [pc, #124]	@ (8000c30 <MX_GPIO_Init+0x160>)
 8000bb2:	f000 fc01 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4818      	ldr	r0, [pc, #96]	@ (8000c30 <MX_GPIO_Init+0x160>)
 8000bce:	f000 fbf3 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bd2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <MX_GPIO_Init+0x164>)
 8000bec:	f000 fbe4 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_GPIO_Init+0x168>)
 8000c04:	f000 fbd8 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MX_GPIO_Init+0x168>)
 8000c20:	f000 fbca 	bl	80013b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3730      	adds	r7, #48	@ 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000800 	.word	0x48000800
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48001800 	.word	0x48001800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0b0      	sub	sp, #192	@ 0xc0
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	2294      	movs	r2, #148	@ 0x94
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fc27 	bl	8005504 <memset>
  if(huart->Instance==LPUART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a43      	ldr	r2, [pc, #268]	@ (8000dc8 <HAL_UART_MspInit+0x138>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d13e      	bne.n	8000d3e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fe0d 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd8:	f7ff ffb0 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ce8:	4b38      	ldr	r3, [pc, #224]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b35      	ldr	r3, [pc, #212]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	4a34      	ldr	r2, [pc, #208]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d00:	4b32      	ldr	r3, [pc, #200]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d0c:	f000 ff06 	bl	8001b1c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d10:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d34:	4619      	mov	r1, r3
 8000d36:	4826      	ldr	r0, [pc, #152]	@ (8000dd0 <HAL_UART_MspInit+0x140>)
 8000d38:	f000 fb3e 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	e040      	b.n	8000dc0 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <HAL_UART_MspInit+0x144>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fdc9 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d60:	f7ff ff6c 	bl	8000c3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d68:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <HAL_UART_MspInit+0x13c>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <HAL_UART_MspInit+0x148>)
 8000dbc:	f000 fafc 	bl	80013b8 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	37c0      	adds	r7, #192	@ 0xc0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40008000 	.word	0x40008000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48001800 	.word	0x48001800
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	48000c00 	.word	0x48000c00

08000ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_SPI_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d128      	bne.n	8000e50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	4a16      	ldr	r2, [pc, #88]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_SPI_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e2e:	23e0      	movs	r3, #224	@ 0xe0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f000 fab4 	bl	80013b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40013000 	.word	0x40013000
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0b0      	sub	sp, #192	@ 0xc0
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	2294      	movs	r2, #148	@ 0x94
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 fb3f 	bl	8005504 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e8e:	d16c      	bne.n	8000f6a <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 fd23 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000eac:	f7ff fec6 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef2:	f000 fa61 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f14:	f000 fa50 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1c:	4a15      	ldr	r2, [pc, #84]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d114      	bne.n	8000f66 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000f54:	f000 fdd2 	bl	8001afc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <HAL_PCD_MspInit+0x114>)
 8000f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f64:	e001      	b.n	8000f6a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000f66:	f000 fdc9 	bl	8001afc <HAL_PWREx_EnableVddUSB>
}
 8000f6a:	bf00      	nop
 8000f6c:	37c0      	adds	r7, #192	@ 0xc0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <NMI_Handler+0x4>

08000f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <MemManage_Handler+0x4>

08000f90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <UsageFault_Handler+0x4>

08000fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fce:	f000 f8c9 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f004 fa84 	bl	8005514 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200a0000 	.word	0x200a0000
 8001038:	00000400 	.word	0x00000400
 800103c:	200406ec 	.word	0x200406ec
 8001040:	20040840 	.word	0x20040840

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f004 fa43 	bl	8005520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fb67 	bl	800076c <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010a4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80010a8:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 80010ac:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 80010b0:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 80010b4:	2004083c 	.word	0x2004083c

080010b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f943 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f80e 	bl	80010ec <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fdb4 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_InitTick+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d023      	beq.n	8001148 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_InitTick+0x70>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_InitTick+0x6c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f941 	bl	800139e <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d809      	bhi.n	800113c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f919 	bl	8001366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_InitTick+0x74>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e007      	b.n	800114c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e004      	b.n	800114c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e001      	b.n	800114c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20040008 	.word	0x20040008
 800115c:	20040000 	.word	0x20040000
 8001160:	20040004 	.word	0x20040004

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20040008 	.word	0x20040008
 8001188:	200406f0 	.word	0x200406f0

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200406f0 	.word	0x200406f0

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20040008 	.word	0x20040008

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff47 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff5c 	bl	8001234 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffb0 	bl	800130c <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e166      	b.n	8001696 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8158 	beq.w	8001690 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d005      	beq.n	80013f8 <HAL_GPIO_Init+0x40>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d130      	bne.n	800145a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	f003 0201 	and.w	r2, r3, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b03      	cmp	r3, #3
 8001464:	d017      	beq.n	8001496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d123      	bne.n	80014ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	6939      	ldr	r1, [r7, #16]
 80014e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0203 	and.w	r2, r3, #3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80b2 	beq.w	8001690 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152c:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <HAL_GPIO_Init+0x2fc>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001530:	4a60      	ldr	r2, [pc, #384]	@ (80016b4 <HAL_GPIO_Init+0x2fc>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6613      	str	r3, [r2, #96]	@ 0x60
 8001538:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <HAL_GPIO_Init+0x2fc>)
 800153a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001544:	4a5c      	ldr	r2, [pc, #368]	@ (80016b8 <HAL_GPIO_Init+0x300>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800156e:	d02b      	beq.n	80015c8 <HAL_GPIO_Init+0x210>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a52      	ldr	r2, [pc, #328]	@ (80016bc <HAL_GPIO_Init+0x304>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d025      	beq.n	80015c4 <HAL_GPIO_Init+0x20c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a51      	ldr	r2, [pc, #324]	@ (80016c0 <HAL_GPIO_Init+0x308>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d01f      	beq.n	80015c0 <HAL_GPIO_Init+0x208>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d019      	beq.n	80015bc <HAL_GPIO_Init+0x204>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4f      	ldr	r2, [pc, #316]	@ (80016c8 <HAL_GPIO_Init+0x310>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d013      	beq.n	80015b8 <HAL_GPIO_Init+0x200>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4e      	ldr	r2, [pc, #312]	@ (80016cc <HAL_GPIO_Init+0x314>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00d      	beq.n	80015b4 <HAL_GPIO_Init+0x1fc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4d      	ldr	r2, [pc, #308]	@ (80016d0 <HAL_GPIO_Init+0x318>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1f8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4c      	ldr	r2, [pc, #304]	@ (80016d4 <HAL_GPIO_Init+0x31c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_GPIO_Init+0x1f4>
 80015a8:	2307      	movs	r3, #7
 80015aa:	e00e      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015ac:	2308      	movs	r3, #8
 80015ae:	e00c      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015b0:	2306      	movs	r3, #6
 80015b2:	e00a      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015b4:	2305      	movs	r3, #5
 80015b6:	e008      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015bc:	2303      	movs	r3, #3
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x212>
 80015c8:	2300      	movs	r3, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015da:	4937      	ldr	r1, [pc, #220]	@ (80016b8 <HAL_GPIO_Init+0x300>)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e8:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800160c:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001636:	4a28      	ldr	r2, [pc, #160]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800163c:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f ae91 	bne.w	80013c8 <HAL_GPIO_Init+0x10>
  }
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	48000400 	.word	0x48000400
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000c00 	.word	0x48000c00
 80016c8:	48001000 	.word	0x48001000
 80016cc:	48001400 	.word	0x48001400
 80016d0:	48001800 	.word	0x48001800
 80016d4:	48001c00 	.word	0x48001c00
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e101      	b.n	8001922 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fb94 	bl	8000e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fc3b 	bl	8004fc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7c1a      	ldrb	r2, [r3, #16]
 8001758:	f88d 2000 	strb.w	r2, [sp]
 800175c:	3304      	adds	r3, #4
 800175e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001760:	f003 fc04 	bl	8004f6c <USB_CoreInit>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2202      	movs	r2, #2
 800176e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0d5      	b.n	8001922 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f003 fc33 	bl	8004fe8 <USB_SetCurrentMode>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0c6      	b.n	8001922 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e04a      	b.n	8001830 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3315      	adds	r3, #21
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3314      	adds	r3, #20
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	b298      	uxth	r0, r3
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	332e      	adds	r3, #46	@ 0x2e
 80017d6:	4602      	mov	r2, r0
 80017d8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3318      	adds	r3, #24
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	331c      	adds	r3, #28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3320      	adds	r3, #32
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3324      	adds	r3, #36	@ 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	3301      	adds	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	429a      	cmp	r2, r3
 8001838:	d3af      	bcc.n	800179a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e044      	b.n	80018ca <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3301      	adds	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3b5      	bcc.n	8001840 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7c1a      	ldrb	r2, [r3, #16]
 80018dc:	f88d 2000 	strb.w	r2, [sp]
 80018e0:	3304      	adds	r3, #4
 80018e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e4:	f003 fbcc 	bl	8005080 <USB_DevInit>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e013      	b.n	8001922 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f80a 	bl	800192a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fd71 	bl	8005402 <USB_DevDisconnect>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195c:	f043 0303 	orr.w	r3, r3, #3
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d102      	bne.n	800198c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198a:	e00b      	b.n	80019a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800199a:	d102      	bne.n	80019a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800199c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a0:	e000      	b.n	80019a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80019a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007000 	.word	0x40007000

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d141      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c2:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ce:	d131      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d0:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019d6:	4a46      	ldr	r2, [pc, #280]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019e8:	4a41      	ldr	r2, [pc, #260]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019f0:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2232      	movs	r2, #50	@ 0x32
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a06:	e002      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d102      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f2      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2e:	d158      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e057      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a44:	e04d      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a4c:	d141      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d131      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2232      	movs	r2, #50	@ 0x32
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a92:	e002      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa6:	d102      	bne.n	8001aae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d112      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e011      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ad0:	e007      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ae0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40007000 	.word	0x40007000
 8001af4:	20040000 	.word	0x20040000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0a:	6053      	str	r3, [r2, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40007000 	.word	0x40007000

08001b1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2a:	6053      	str	r3, [r2, #4]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000

08001b3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f000 bc08 	b.w	8002360 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b50:	4b96      	ldr	r3, [pc, #600]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5a:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80e4 	beq.w	8001d3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_RCC_OscConfig+0x4c>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	f040 808b 	bne.w	8001c96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f040 8087 	bne.w	8001c96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b88:	4b88      	ldr	r3, [pc, #544]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x64>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e3df      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	4b81      	ldr	r3, [pc, #516]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_RCC_OscConfig+0x7e>
 8001bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb8:	e005      	b.n	8001bc6 <HAL_RCC_OscConfig+0x8a>
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d223      	bcs.n	8001c12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fdcc 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e3c0      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a72      	ldr	r2, [pc, #456]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b70      	ldr	r3, [pc, #448]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	496d      	ldr	r1, [pc, #436]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4968      	ldr	r1, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
 8001c10:	e025      	b.n	8001c5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c12:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	4b5e      	ldr	r3, [pc, #376]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	495b      	ldr	r1, [pc, #364]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fd8c 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e380      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5e:	f000 fcc1 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b51      	ldr	r3, [pc, #324]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	4950      	ldr	r1, [pc, #320]	@ (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001db4 <HAL_RCC_OscConfig+0x278>)
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa32 	bl	80010ec <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d052      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	e364      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d032      	beq.n	8001d04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c9e:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a42      	ldr	r2, [pc, #264]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fa6f 	bl	800118c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fa6b 	bl	800118c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e34d      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc4:	4b39      	ldr	r3, [pc, #228]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd0:	4b36      	ldr	r3, [pc, #216]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a35      	ldr	r2, [pc, #212]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4930      	ldr	r1, [pc, #192]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	492b      	ldr	r1, [pc, #172]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	e01a      	b.n	8001d3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d04:	4b29      	ldr	r3, [pc, #164]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fa3c 	bl	800118c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff fa38 	bl	800118c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e31a      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1dc>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d073      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x21c>
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d063      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d15f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e2f7      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x24c>
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e025      	b.n	8001dd4 <HAL_RCC_OscConfig+0x298>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d90:	d114      	bne.n	8001dbc <HAL_RCC_OscConfig+0x280>
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a02      	ldr	r2, [pc, #8]	@ (8001dac <HAL_RCC_OscConfig+0x270>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x298>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08005e50 	.word	0x08005e50
 8001db4:	20040000 	.word	0x20040000
 8001db8:	20040004 	.word	0x20040004
 8001dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a9f      	ldr	r2, [pc, #636]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a9c      	ldr	r2, [pc, #624]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f9d6 	bl	800118c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff f9d2 	bl	800118c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	@ 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e2b4      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b92      	ldr	r3, [pc, #584]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x2a8>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f9c2 	bl	800118c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f9be 	bl	800118c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e2a0      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	4b88      	ldr	r3, [pc, #544]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d0>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d060      	beq.n	8001efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x310>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d116      	bne.n	8001e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x328>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e27d      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b76      	ldr	r3, [pc, #472]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4973      	ldr	r1, [pc, #460]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	e040      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d023      	beq.n	8001eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e82:	4b6f      	ldr	r3, [pc, #444]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f97d 	bl	800118c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff f979 	bl	800118c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e25b      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	4b65      	ldr	r3, [pc, #404]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b62      	ldr	r3, [pc, #392]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	495f      	ldr	r1, [pc, #380]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e018      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b5d      	ldr	r3, [pc, #372]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5c      	ldr	r2, [pc, #368]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f959 	bl	800118c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff f955 	bl	800118c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e237      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f16:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff f934 	bl	800118c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff f930 	bl	800118c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e212      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ef      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3ec>
 8001f48:	e01b      	b.n	8001f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f50:	4a3b      	ldr	r2, [pc, #236]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f917 	bl	800118c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff f913 	bl	800118c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1f5      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ef      	bne.n	8001f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80a6 	beq.w	80020dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f94:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	4a26      	ldr	r2, [pc, #152]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbc:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f8da 	bl	800118c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7ff f8d6 	bl	800118c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1b8      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_RCC_OscConfig+0x508>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x4d8>
 8002002:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002012:	e029      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d115      	bne.n	8002048 <HAL_RCC_OscConfig+0x50c>
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	4a03      	ldr	r2, [pc, #12]	@ (8002040 <HAL_RCC_OscConfig+0x504>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x52c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
 8002048:	4b9d      	ldr	r3, [pc, #628]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	4a9c      	ldr	r2, [pc, #624]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002058:	4b99      	ldr	r3, [pc, #612]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205e:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f88c 	bl	800118c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff f888 	bl	800118c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e168      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208e:	4b8c      	ldr	r3, [pc, #560]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ed      	beq.n	8002078 <HAL_RCC_OscConfig+0x53c>
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff f875 	bl	800118c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff f871 	bl	800118c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e151      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020bc:	4b80      	ldr	r3, [pc, #512]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ed      	bne.n	80020a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b7b      	ldr	r3, [pc, #492]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	4a7a      	ldr	r2, [pc, #488]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d03c      	beq.n	8002162 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01c      	beq.n	800212a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020f0:	4b73      	ldr	r3, [pc, #460]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80020f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f6:	4a72      	ldr	r2, [pc, #456]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f844 	bl	800118c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002108:	f7ff f840 	bl	800118c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e122      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211a:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800211c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ef      	beq.n	8002108 <HAL_RCC_OscConfig+0x5cc>
 8002128:	e01b      	b.n	8002162 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800212a:	4b65      	ldr	r3, [pc, #404]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800212c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002130:	4a63      	ldr	r2, [pc, #396]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7ff f827 	bl	800118c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002142:	f7ff f823 	bl	800118c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e105      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002154:	4b5a      	ldr	r3, [pc, #360]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ef      	bne.n	8002142 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80f9 	beq.w	800235e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	2b02      	cmp	r3, #2
 8002172:	f040 80cf 	bne.w	8002314 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002176:	4b52      	ldr	r3, [pc, #328]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0203 	and.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	429a      	cmp	r2, r3
 8002188:	d12c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	3b01      	subs	r3, #1
 8002196:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d123      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d11b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d113      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d109      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d071      	beq.n	80022c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d068      	beq.n	80022bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ea:	4b35      	ldr	r3, [pc, #212]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0ac      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800220c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002212:	f7fe ffbb 	bl	800118c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe ffb7 	bl	800118c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e099      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	4b24      	ldr	r3, [pc, #144]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <HAL_RCC_OscConfig+0x788>)
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002248:	3a01      	subs	r2, #1
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002252:	0212      	lsls	r2, r2, #8
 8002254:	4311      	orrs	r1, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800225a:	0852      	lsrs	r2, r2, #1
 800225c:	3a01      	subs	r2, #1
 800225e:	0552      	lsls	r2, r2, #21
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002266:	0852      	lsrs	r2, r2, #1
 8002268:	3a01      	subs	r2, #1
 800226a:	0652      	lsls	r2, r2, #25
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002272:	06d2      	lsls	r2, r2, #27
 8002274:	430a      	orrs	r2, r1
 8002276:	4912      	ldr	r1, [pc, #72]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800227c:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a0c      	ldr	r2, [pc, #48]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002294:	f7fe ff7a 	bl	800118c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe ff76 	bl	800118c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e058      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <HAL_RCC_OscConfig+0x784>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ba:	e050      	b.n	800235e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04f      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d144      	bne.n	800235e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022d4:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a23      	ldr	r2, [pc, #140]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ec:	f7fe ff4e 	bl	800118c <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff4a 	bl	800118c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e02c      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x7b8>
 8002312:	e024      	b.n	800235e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d01f      	beq.n	800235a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a12      	ldr	r2, [pc, #72]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 8002320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe ff31 	bl	800118c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe ff2d 	bl	800118c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e00f      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4905      	ldr	r1, [pc, #20]	@ (8002368 <HAL_RCC_OscConfig+0x82c>)
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_OscConfig+0x830>)
 8002354:	4013      	ands	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
 8002358:	e001      	b.n	800235e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	feeefffc 	.word	0xfeeefffc

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e11d      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b90      	ldr	r3, [pc, #576]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b8d      	ldr	r3, [pc, #564]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 020f 	bic.w	r2, r3, #15
 800239e:	498b      	ldr	r1, [pc, #556]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b89      	ldr	r3, [pc, #548]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e105      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d908      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b7e      	ldr	r3, [pc, #504]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	497b      	ldr	r1, [pc, #492]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d079      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d11e      	bne.n	8002438 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	4b75      	ldr	r3, [pc, #468]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0dc      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800240a:	f000 fa09 	bl	8002820 <RCC_GetSysClockFreqFromPLLSource>
 800240e:	4603      	mov	r3, r0
 8002410:	4a70      	ldr	r2, [pc, #448]	@ (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d946      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002416:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d140      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002422:	4b6b      	ldr	r3, [pc, #428]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800242a:	4a69      	ldr	r2, [pc, #420]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002430:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e035      	b.n	80024a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002440:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d115      	bne.n	8002478 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0b9      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002458:	4b5d      	ldr	r3, [pc, #372]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0ad      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0a5      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002478:	f000 f8b4 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800247c:	4603      	mov	r3, r0
 800247e:	4a55      	ldr	r2, [pc, #340]	@ (80025d4 <HAL_RCC_ClockConfig+0x264>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d90f      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002484:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002490:	4b4f      	ldr	r3, [pc, #316]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002498:	4a4d      	ldr	r2, [pc, #308]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800249a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800249e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a4:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 0203 	bic.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4947      	ldr	r1, [pc, #284]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b6:	f7fe fe69 	bl	800118c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024be:	f7fe fe65 	bl	800118c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e077      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d4:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 020c 	and.w	r2, r3, #12
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d1eb      	bne.n	80024be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b80      	cmp	r3, #128	@ 0x80
 80024ea:	d105      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ec:	4b38      	ldr	r3, [pc, #224]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a37      	ldr	r2, [pc, #220]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 80024f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002510:	429a      	cmp	r2, r3
 8002512:	d208      	bcs.n	8002526 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	492b      	ldr	r1, [pc, #172]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002526:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d210      	bcs.n	8002556 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 020f 	bic.w	r2, r3, #15
 800253c:	4923      	ldr	r1, [pc, #140]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCC_ClockConfig+0x25c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e036      	b.n	80025c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002562:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4918      	ldr	r1, [pc, #96]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4910      	ldr	r1, [pc, #64]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002594:	f000 f826 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <HAL_RCC_ClockConfig+0x260>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	490c      	ldr	r1, [pc, #48]	@ (80025d8 <HAL_RCC_ClockConfig+0x268>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x26c>)
 80025b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fd97 	bl	80010ec <HAL_InitTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	04c4b400 	.word	0x04c4b400
 80025d8:	08005e50 	.word	0x08005e50
 80025dc:	20040000 	.word	0x20040000
 80025e0:	20040004 	.word	0x20040004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b3b      	ldr	r3, [pc, #236]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d121      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d11e      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002618:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e005      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002640:	4a2b      	ldr	r2, [pc, #172]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002654:	e00a      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d102      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e004      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d101      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800266a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d134      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0xa6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xac>
 8002688:	e005      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002692:	617b      	str	r3, [r7, #20]
      break;
 8002694:	e002      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3301      	adds	r3, #1
 80026a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	fb03 f202 	mul.w	r2, r3, r2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0e5b      	lsrs	r3, r3, #25
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	3301      	adds	r3, #1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026dc:	69bb      	ldr	r3, [r7, #24]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08005e68 	.word	0x08005e68
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20040000 	.word	0x20040000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08005e60 	.word	0x08005e60

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002744:	f7ff ffda 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08005e60 	.word	0x08005e60

0800276c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002784:	f7ff f8f6 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 8002788:	6178      	str	r0, [r7, #20]
 800278a:	e014      	b.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a21      	ldr	r2, [pc, #132]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
 8002798:	4b1f      	ldr	r3, [pc, #124]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027a4:	f7ff f8e6 	bl	8001974 <HAL_PWREx_GetVoltageRange>
 80027a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027bc:	d10b      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	@ 0x80
 80027c2:	d913      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80027c8:	d902      	bls.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ca:	2302      	movs	r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e00d      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e00a      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80027da:	d902      	bls.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80027dc:	2302      	movs	r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e004      	b.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b70      	cmp	r3, #112	@ 0x70
 80027e6:	d101      	bne.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e8:	2301      	movs	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 020f 	bic.w	r2, r3, #15
 80027f4:	4909      	ldr	r1, [pc, #36]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027fc:	4b07      	ldr	r3, [pc, #28]	@ (800281c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	40022000 	.word	0x40022000

08002820 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002826:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d00b      	beq.n	800284e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d008      	beq.n	8002854 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11f      	bne.n	8002888 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002848:	4b25      	ldr	r3, [pc, #148]	@ (80028e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800284a:	613b      	str	r3, [r7, #16]
    break;
 800284c:	e01f      	b.n	800288e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800284e:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002850:	613b      	str	r3, [r7, #16]
    break;
 8002852:	e01c      	b.n	800288e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e005      	b.n	800287c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800287c:	4a1a      	ldr	r2, [pc, #104]	@ (80028e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002884:	613b      	str	r3, [r7, #16]
    break;
 8002886:	e002      	b.n	800288e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
    break;
 800288c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	3301      	adds	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800289c:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	fb03 f202 	mul.w	r2, r3, r2
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0e5b      	lsrs	r3, r3, #25
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80028ce:	683b      	ldr	r3, [r7, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40021000 	.word	0x40021000
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200
 80028e8:	08005e68 	.word	0x08005e68

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028f4:	2300      	movs	r3, #0
 80028f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f8:	2300      	movs	r3, #0
 80028fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002904:	2b00      	cmp	r3, #0
 8002906:	d040      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290c:	2b80      	cmp	r3, #128	@ 0x80
 800290e:	d02a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002910:	2b80      	cmp	r3, #128	@ 0x80
 8002912:	d825      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002914:	2b60      	cmp	r3, #96	@ 0x60
 8002916:	d026      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002918:	2b60      	cmp	r3, #96	@ 0x60
 800291a:	d821      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800291c:	2b40      	cmp	r3, #64	@ 0x40
 800291e:	d006      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002920:	2b40      	cmp	r3, #64	@ 0x40
 8002922:	d81d      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d010      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800292c:	e018      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800292e:	4b89      	ldr	r3, [pc, #548]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a88      	ldr	r2, [pc, #544]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800293a:	e015      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb02 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800294c:	e00c      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3320      	adds	r3, #32
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fbed 	bl	8003134 <RCCEx_PLLSAI2_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800295e:	e003      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	74fb      	strb	r3, [r7, #19]
      break;
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800296e:	4b79      	ldr	r3, [pc, #484]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002970:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002974:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297c:	4975      	ldr	r1, [pc, #468]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002984:	e001      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d047      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800299e:	d030      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a4:	d82a      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80029a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029aa:	d02a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80029ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b0:	d824      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80029b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b6:	d008      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d81e      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c6:	d010      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029c8:	e018      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ca:	4b62      	ldr	r3, [pc, #392]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a61      	ldr	r2, [pc, #388]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d6:	e015      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fab4 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029e8:	e00c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3320      	adds	r3, #32
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fb9f 	bl	8003134 <RCCEx_PLLSAI2_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	74fb      	strb	r3, [r7, #19]
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a0a:	4b52      	ldr	r3, [pc, #328]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	494e      	ldr	r1, [pc, #312]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002a20:	e001      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 809f 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a38:	4b46      	ldr	r3, [pc, #280]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fb89 	bl	800118c <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a7c:	e009      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fb85 	bl	800118c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d902      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	74fb      	strb	r3, [r7, #19]
        break;
 8002a90:	e005      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a92:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ef      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d15b      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01f      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d019      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ace:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aee:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fb44 	bl	800118c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	e00b      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fb40 	bl	800118c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b1e:	e006      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ec      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b34:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	4903      	ldr	r1, [pc, #12]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	74bb      	strb	r3, [r7, #18]
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7c7b      	ldrb	r3, [r7, #17]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4ba0      	ldr	r3, [pc, #640]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	4a9f      	ldr	r2, [pc, #636]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7e:	4b9a      	ldr	r3, [pc, #616]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	f023 0203 	bic.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8c:	4996      	ldr	r1, [pc, #600]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba0:	4b91      	ldr	r3, [pc, #580]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	f023 020c 	bic.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	498e      	ldr	r1, [pc, #568]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc2:	4b89      	ldr	r3, [pc, #548]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	4985      	ldr	r1, [pc, #532]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be4:	4b80      	ldr	r3, [pc, #512]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf2:	497d      	ldr	r1, [pc, #500]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c06:	4b78      	ldr	r3, [pc, #480]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	4974      	ldr	r1, [pc, #464]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c28:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c36:	496c      	ldr	r1, [pc, #432]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c58:	4963      	ldr	r1, [pc, #396]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c7a:	495b      	ldr	r1, [pc, #364]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	4b56      	ldr	r3, [pc, #344]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9c:	4952      	ldr	r1, [pc, #328]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	494a      	ldr	r1, [pc, #296]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd2:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	4941      	ldr	r1, [pc, #260]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d02:	4939      	ldr	r1, [pc, #228]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d028      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d16:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	4930      	ldr	r1, [pc, #192]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d36:	4b2c      	ldr	r3, [pc, #176]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d40:	60d3      	str	r3, [r2, #12]
 8002d42:	e011      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f8f9 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d04d      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d8e:	e012      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002d90:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d96:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dae:	490e      	ldr	r1, [pc, #56]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dbe:	d106      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
 8002dcc:	e020      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dd6:	d109      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a02      	ldr	r2, [pc, #8]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e014      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f8a5 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d028      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e2a:	4947      	ldr	r1, [pc, #284]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3c:	4b42      	ldr	r3, [pc, #264]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a41      	ldr	r2, [pc, #260]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e46:	60d3      	str	r3, [r2, #12]
 8002e48:	e011      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f876 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01e      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7a:	4b33      	ldr	r3, [pc, #204]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e8a:	492f      	ldr	r1, [pc, #188]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f851 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eca:	f023 0204 	bic.w	r2, r3, #4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed4:	491c      	ldr	r1, [pc, #112]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ee8:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eee:	f023 0218 	bic.w	r2, r3, #24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	4913      	ldr	r1, [pc, #76]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f1c:	490a      	ldr	r1, [pc, #40]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5a:	4b72      	ldr	r3, [pc, #456]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f66:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d103      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d142      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e03f      	b.n	8003004 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d018      	beq.n	8002fbe <RCCEx_PLLSAI1_Config+0x72>
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d825      	bhi.n	8002fdc <RCCEx_PLLSAI1_Config+0x90>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d002      	beq.n	8002f9a <RCCEx_PLLSAI1_Config+0x4e>
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d009      	beq.n	8002fac <RCCEx_PLLSAI1_Config+0x60>
 8002f98:	e020      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f9a:	4b62      	ldr	r3, [pc, #392]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e01a      	b.n	8002fe2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fac:	4b5d      	ldr	r3, [pc, #372]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbc:	e013      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fbe:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fca:	4b56      	ldr	r3, [pc, #344]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fda:	e006      	b.n	8002fea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e004      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4949      	ldr	r1, [pc, #292]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8086 	bne.w	8003118 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800300c:	4b45      	ldr	r3, [pc, #276]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a44      	ldr	r2, [pc, #272]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003012:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe f8b8 	bl	800118c <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800301e:	e009      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003020:	f7fe f8b4 	bl	800118c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	73fb      	strb	r3, [r7, #15]
        break;
 8003032:	e005      	b.n	8003040 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003034:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ef      	bne.n	8003020 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d168      	bne.n	8003118 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d113      	bne.n	8003074 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304c:	4b35      	ldr	r3, [pc, #212]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003052:	4013      	ands	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6892      	ldr	r2, [r2, #8]
 8003058:	0211      	lsls	r1, r2, #8
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	06d2      	lsls	r2, r2, #27
 8003060:	4311      	orrs	r1, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6852      	ldr	r2, [r2, #4]
 8003066:	3a01      	subs	r2, #1
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	430a      	orrs	r2, r1
 800306c:	492d      	ldr	r1, [pc, #180]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	610b      	str	r3, [r1, #16]
 8003072:	e02d      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d115      	bne.n	80030a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307a:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	0211      	lsls	r1, r2, #8
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6912      	ldr	r2, [r2, #16]
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0552      	lsls	r2, r2, #21
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6852      	ldr	r2, [r2, #4]
 8003098:	3a01      	subs	r2, #1
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	4921      	ldr	r1, [pc, #132]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	610b      	str	r3, [r1, #16]
 80030a4:	e014      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	0211      	lsls	r1, r2, #8
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6952      	ldr	r2, [r2, #20]
 80030b8:	0852      	lsrs	r2, r2, #1
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0652      	lsls	r2, r2, #25
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6852      	ldr	r2, [r2, #4]
 80030c4:	3a01      	subs	r2, #1
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	430a      	orrs	r2, r1
 80030ca:	4916      	ldr	r1, [pc, #88]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a13      	ldr	r2, [pc, #76]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe f856 	bl	800118c <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e2:	e009      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e4:	f7fe f852 	bl	800118c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d902      	bls.n	80030f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	73fb      	strb	r3, [r7, #15]
          break;
 80030f6:	e005      	b.n	8003104 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ef      	beq.n	80030e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	4904      	ldr	r1, [pc, #16]	@ (8003124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	07ff800f 	.word	0x07ff800f
 800312c:	ff9f800f 	.word	0xff9f800f
 8003130:	f9ff800f 	.word	0xf9ff800f

08003134 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003142:	4b72      	ldr	r3, [pc, #456]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800314e:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d103      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
       ||
 8003162:	2b00      	cmp	r3, #0
 8003164:	d142      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e03f      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d018      	beq.n	80031a6 <RCCEx_PLLSAI2_Config+0x72>
 8003174:	2b03      	cmp	r3, #3
 8003176:	d825      	bhi.n	80031c4 <RCCEx_PLLSAI2_Config+0x90>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <RCCEx_PLLSAI2_Config+0x4e>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d009      	beq.n	8003194 <RCCEx_PLLSAI2_Config+0x60>
 8003180:	e020      	b.n	80031c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003182:	4b62      	ldr	r3, [pc, #392]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e01a      	b.n	80031ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003194:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e013      	b.n	80031ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031b2:	4b56      	ldr	r3, [pc, #344]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031c2:	e006      	b.n	80031d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e004      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80031d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4949      	ldr	r1, [pc, #292]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 8086 	bne.w	8003300 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031f4:	4b45      	ldr	r3, [pc, #276]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a44      	ldr	r2, [pc, #272]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fd ffc4 	bl	800118c <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003206:	e009      	b.n	800321c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003208:	f7fd ffc0 	bl	800118c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
        break;
 800321a:	e005      	b.n	8003228 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800321c:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ef      	bne.n	8003208 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d168      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d113      	bne.n	800325c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003234:	4b35      	ldr	r3, [pc, #212]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	4b35      	ldr	r3, [pc, #212]	@ (8003310 <RCCEx_PLLSAI2_Config+0x1dc>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	06d2      	lsls	r2, r2, #27
 8003248:	4311      	orrs	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6852      	ldr	r2, [r2, #4]
 800324e:	3a01      	subs	r2, #1
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	430a      	orrs	r2, r1
 8003254:	492d      	ldr	r1, [pc, #180]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	614b      	str	r3, [r1, #20]
 800325a:	e02d      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d115      	bne.n	800328e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003262:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6892      	ldr	r2, [r2, #8]
 800326e:	0211      	lsls	r1, r2, #8
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6912      	ldr	r2, [r2, #16]
 8003274:	0852      	lsrs	r2, r2, #1
 8003276:	3a01      	subs	r2, #1
 8003278:	0552      	lsls	r2, r2, #21
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6852      	ldr	r2, [r2, #4]
 8003280:	3a01      	subs	r2, #1
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	430a      	orrs	r2, r1
 8003286:	4921      	ldr	r1, [pc, #132]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003288:	4313      	orrs	r3, r2
 800328a:	614b      	str	r3, [r1, #20]
 800328c:	e014      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800328e:	4b1f      	ldr	r3, [pc, #124]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	0211      	lsls	r1, r2, #8
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6952      	ldr	r2, [r2, #20]
 80032a0:	0852      	lsrs	r2, r2, #1
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0652      	lsls	r2, r2, #25
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4916      	ldr	r1, [pc, #88]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b8:	4b14      	ldr	r3, [pc, #80]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a13      	ldr	r2, [pc, #76]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fd ff62 	bl	800118c <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ca:	e009      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032cc:	f7fd ff5e 	bl	800118c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	73fb      	strb	r3, [r7, #15]
          break;
 80032de:	e005      	b.n	80032ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ef      	beq.n	80032cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4904      	ldr	r1, [pc, #16]	@ (800330c <RCCEx_PLLSAI2_Config+0x1d8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	07ff800f 	.word	0x07ff800f
 8003314:	ff9f800f 	.word	0xff9f800f
 8003318:	f9ff800f 	.word	0xf9ff800f

0800331c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e095      	b.n	800345a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800333e:	d009      	beq.n	8003354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e005      	b.n	8003354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fd34 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003394:	d902      	bls.n	800339c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e002      	b.n	80033a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800339c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033aa:	d007      	beq.n	80033bc <HAL_SPI_Init+0xa0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	ea42 0103 	orr.w	r1, r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	f003 0204 	and.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003438:	ea42 0103 	orr.w	r1, r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003472:	f7fd fe8b 	bl	800118c <HAL_GetTick>
 8003476:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	e15c      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x36>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e154      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_SPI_Transmit+0x48>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e14d      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003544:	d952      	bls.n	80035ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xf2>
 800354e:	8b7b      	ldrh	r3, [r7, #26]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d145      	bne.n	80035e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e032      	b.n	80035e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035ac:	e018      	b.n	80035e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fd fded 	bl	800118c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x164>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x16a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0b2      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1c7      	bne.n	800357a <HAL_SPI_Transmit+0x118>
 80035ea:	e083      	b.n	80036f4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x198>
 80035f4:	8b7b      	ldrh	r3, [r7, #26]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d177      	bne.n	80036ea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d912      	bls.n	800362a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b02      	subs	r3, #2
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003628:	e05f      	b.n	80036ea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003650:	e04b      	b.n	80036ea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d12b      	bne.n	80036b8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d912      	bls.n	8003690 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b02      	subs	r3, #2
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368e:	e02c      	b.n	80036ea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b6:	e018      	b.n	80036ea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b8:	f7fd fd68 	bl	800118c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d803      	bhi.n	80036d0 <HAL_SPI_Transmit+0x26e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Transmit+0x274>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e02d      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ae      	bne.n	8003652 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fcf5 	bl	80040e8 <SPI_EndRxTxTransaction>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b088      	sub	sp, #32
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	e123      	b.n	80039b6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003776:	d112      	bne.n	800379e <HAL_SPI_Receive+0x50>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10e      	bne.n	800379e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2204      	movs	r2, #4
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f912 	bl	80039be <HAL_SPI_TransmitReceive>
 800379a:	4603      	mov	r3, r0
 800379c:	e10b      	b.n	80039b6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379e:	f7fd fcf5 	bl	800118c <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Receive+0x62>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e100      	b.n	80039b6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_Receive+0x74>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0f9      	b.n	80039b6 <HAL_SPI_Receive+0x268>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2204      	movs	r2, #4
 80037ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003814:	d908      	bls.n	8003828 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e007      	b.n	8003838 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003836:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003840:	d10f      	bne.n	8003862 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d007      	beq.n	8003880 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003888:	d875      	bhi.n	8003976 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800388a:	e037      	b.n	80038fc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d117      	bne.n	80038ca <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f103 020c 	add.w	r2, r3, #12
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	7812      	ldrb	r2, [r2, #0]
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038c8:	e018      	b.n	80038fc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ca:	f7fd fc5f 	bl	800118c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d803      	bhi.n	80038e2 <HAL_SPI_Receive+0x194>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d102      	bne.n	80038e8 <HAL_SPI_Receive+0x19a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e05c      	b.n	80039b6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1c1      	bne.n	800388c <HAL_SPI_Receive+0x13e>
 8003908:	e03b      	b.n	8003982 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d115      	bne.n	8003944 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	b292      	uxth	r2, r2
 8003924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	1c9a      	adds	r2, r3, #2
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003942:	e018      	b.n	8003976 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003944:	f7fd fc22 	bl	800118c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d803      	bhi.n	800395c <HAL_SPI_Receive+0x20e>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d102      	bne.n	8003962 <HAL_SPI_Receive+0x214>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e01f      	b.n	80039b6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1c3      	bne.n	800390a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fb56 	bl	8004038 <SPI_EndRxTransaction>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	@ 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039cc:	2301      	movs	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d0:	f7fd fbdc 	bl	800118c <HAL_GetTick>
 80039d4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039dc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d00c      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x4e>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f8:	d106      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x4a>
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d001      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e1f3      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x60>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x60>
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e1e8      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x72>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e1e1      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d003      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2205      	movs	r2, #5
 8003a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	887a      	ldrh	r2, [r7, #2]
 8003a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a8e:	d802      	bhi.n	8003a96 <HAL_SPI_TransmitReceive+0xd8>
 8003a90:	8abb      	ldrh	r3, [r7, #20]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d908      	bls.n	8003aa8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	e007      	b.n	8003ab8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d007      	beq.n	8003ad6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ade:	f240 8083 	bls.w	8003be8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_TransmitReceive+0x132>
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d16f      	bne.n	8003bd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b14:	e05c      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d11b      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x19e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_SPI_TransmitReceive+0x19e>
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d113      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d11c      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x1e6>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	b292      	uxth	r2, r2
 8003b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	1c9a      	adds	r2, r3, #2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ba4:	f7fd faf2 	bl	800118c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d80d      	bhi.n	8003bd0 <HAL_SPI_TransmitReceive+0x212>
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e111      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d19d      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x158>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d197      	bne.n	8003b16 <HAL_SPI_TransmitReceive+0x158>
 8003be6:	e0e5      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x23a>
 8003bf0:	8afb      	ldrh	r3, [r7, #22]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 80d1 	bne.w	8003d9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d912      	bls.n	8003c28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	881a      	ldrh	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	1c9a      	adds	r2, r3, #2
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b02      	subs	r3, #2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c26:	e0b8      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4e:	e0a4      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d134      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x30a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02f      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x30a>
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d12c      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d912      	bls.n	8003c9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b02      	subs	r3, #2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c9c:	e012      	b.n	8003cc4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d148      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x3aa>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d042      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d923      	bls.n	8003d36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b02      	subs	r3, #2
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d81f      	bhi.n	8003d64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	e016      	b.n	8003d64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f103 020c 	add.w	r2, r3, #12
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d64:	2301      	movs	r3, #1
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d68:	f7fd fa10 	bl	800118c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d803      	bhi.n	8003d80 <HAL_SPI_TransmitReceive+0x3c2>
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d102      	bne.n	8003d86 <HAL_SPI_TransmitReceive+0x3c8>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e02c      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f47f af55 	bne.w	8003c50 <HAL_SPI_TransmitReceive+0x292>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f47f af4e 	bne.w	8003c50 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f995 	bl	80040e8 <SPI_EndRxTxTransaction>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00e      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e0c:	f7fd f9be 	bl	800118c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e1c:	f7fd f9b6 	bl	800118c <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	015b      	lsls	r3, r3, #5
 8003e28:	0d1b      	lsrs	r3, r3, #20
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	e054      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d050      	beq.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e3c:	f7fd f9a6 	bl	800118c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d902      	bls.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d13d      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e6a:	d111      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e74:	d004      	beq.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7e:	d107      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e98:	d10f      	bne.n	8003eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e017      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d19b      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20040000 	.word	0x20040000

08003f0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f1e:	f7fd f935 	bl	800118c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f2e:	f7fd f92d 	bl	800118c <HAL_GetTick>
 8003f32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00da      	lsls	r2, r3, #3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	0d1b      	lsrs	r3, r3, #20
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f54:	e060      	b.n	8004018 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f5c:	d107      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d050      	beq.n	8004018 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f76:	f7fd f909 	bl	800118c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d902      	bls.n	8003f8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d13d      	bne.n	8004008 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa4:	d111      	bne.n	8003fca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fae:	d004      	beq.n	8003fba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb8:	d107      	bne.n	8003fca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd2:	d10f      	bne.n	8003ff4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e010      	b.n	800402a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3b01      	subs	r3, #1
 8004016:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d196      	bne.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	@ 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20040000 	.word	0x20040000

08004038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800404c:	d111      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004056:	d004      	beq.n	8004062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004060:	d107      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff febd 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e023      	b.n	80040e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040a0:	d11d      	bne.n	80040de <SPI_EndRxTransaction+0xa6>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040aa:	d004      	beq.n	80040b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b4:	d113      	bne.n	80040de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff ff22 	bl	8003f0c <SPI_WaitFifoStateUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e000      	b.n	80040e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff ff03 	bl	8003f0c <SPI_WaitFifoStateUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e027      	b.n	800416c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	2180      	movs	r1, #128	@ 0x80
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fe68 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e014      	b.n	800416c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2200      	movs	r2, #0
 800414a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fedc 	bl	8003f0c <SPI_WaitFifoStateUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e000      	b.n	800416c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e042      	b.n	800420c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fc fd79 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2224      	movs	r2, #36	@ 0x24
 80041a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0201 	bic.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fbb2 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8b3 	bl	8004330 <UART_SetConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e01b      	b.n	800420c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fc31 	bl	8004a6c <UART_CheckIdleState>
 800420a:	4603      	mov	r3, r0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	@ 0x28
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	2b20      	cmp	r3, #32
 800422c:	d17b      	bne.n	8004326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_UART_Transmit+0x26>
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e074      	b.n	8004328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2221      	movs	r2, #33	@ 0x21
 800424a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fc ff9d 	bl	800118c <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426c:	d108      	bne.n	8004280 <HAL_UART_Transmit+0x6c>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e003      	b.n	8004288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004288:	e030      	b.n	80042ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	2180      	movs	r1, #128	@ 0x80
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fc93 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e03d      	b.n	8004328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	881a      	ldrh	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042be:	b292      	uxth	r2, r2
 80042c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	3302      	adds	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e007      	b.n	80042da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1c8      	bne.n	800428a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	2140      	movs	r1, #64	@ 0x40
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fc5c 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e006      	b.n	8004328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b08c      	sub	sp, #48	@ 0x30
 8004336:	af00      	add	r7, sp, #0
 8004338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4baa      	ldr	r3, [pc, #680]	@ (8004608 <UART_SetConfig+0x2d8>)
 8004360:	4013      	ands	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004368:	430b      	orrs	r3, r1
 800436a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a9f      	ldr	r2, [pc, #636]	@ (800460c <UART_SetConfig+0x2dc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004398:	4313      	orrs	r3, r2
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f023 010f 	bic.w	r1, r3, #15
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a90      	ldr	r2, [pc, #576]	@ (8004610 <UART_SetConfig+0x2e0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d125      	bne.n	8004420 <UART_SetConfig+0xf0>
 80043d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004614 <UART_SetConfig+0x2e4>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d81a      	bhi.n	8004418 <UART_SetConfig+0xe8>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <UART_SetConfig+0xb8>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004411 	.word	0x08004411
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	e116      	b.n	800462e <UART_SetConfig+0x2fe>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004406:	e112      	b.n	800462e <UART_SetConfig+0x2fe>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440e:	e10e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004416:	e10a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e106      	b.n	800462e <UART_SetConfig+0x2fe>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7c      	ldr	r2, [pc, #496]	@ (8004618 <UART_SetConfig+0x2e8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d138      	bne.n	800449c <UART_SetConfig+0x16c>
 800442a:	4b7a      	ldr	r3, [pc, #488]	@ (8004614 <UART_SetConfig+0x2e4>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d82d      	bhi.n	8004494 <UART_SetConfig+0x164>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <UART_SetConfig+0x110>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004475 	.word	0x08004475
 8004444:	08004495 	.word	0x08004495
 8004448:	08004495 	.word	0x08004495
 800444c:	08004495 	.word	0x08004495
 8004450:	08004485 	.word	0x08004485
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004495 	.word	0x08004495
 8004460:	0800447d 	.word	0x0800447d
 8004464:	08004495 	.word	0x08004495
 8004468:	08004495 	.word	0x08004495
 800446c:	08004495 	.word	0x08004495
 8004470:	0800448d 	.word	0x0800448d
 8004474:	2300      	movs	r3, #0
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e0d8      	b.n	800462e <UART_SetConfig+0x2fe>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e0d4      	b.n	800462e <UART_SetConfig+0x2fe>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e0d0      	b.n	800462e <UART_SetConfig+0x2fe>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e0cc      	b.n	800462e <UART_SetConfig+0x2fe>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e0c8      	b.n	800462e <UART_SetConfig+0x2fe>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5e      	ldr	r2, [pc, #376]	@ (800461c <UART_SetConfig+0x2ec>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d125      	bne.n	80044f2 <UART_SetConfig+0x1c2>
 80044a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004614 <UART_SetConfig+0x2e4>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044b0:	2b30      	cmp	r3, #48	@ 0x30
 80044b2:	d016      	beq.n	80044e2 <UART_SetConfig+0x1b2>
 80044b4:	2b30      	cmp	r3, #48	@ 0x30
 80044b6:	d818      	bhi.n	80044ea <UART_SetConfig+0x1ba>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d00a      	beq.n	80044d2 <UART_SetConfig+0x1a2>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d814      	bhi.n	80044ea <UART_SetConfig+0x1ba>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <UART_SetConfig+0x19a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d008      	beq.n	80044da <UART_SetConfig+0x1aa>
 80044c8:	e00f      	b.n	80044ea <UART_SetConfig+0x1ba>
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d0:	e0ad      	b.n	800462e <UART_SetConfig+0x2fe>
 80044d2:	2302      	movs	r3, #2
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d8:	e0a9      	b.n	800462e <UART_SetConfig+0x2fe>
 80044da:	2304      	movs	r3, #4
 80044dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e0:	e0a5      	b.n	800462e <UART_SetConfig+0x2fe>
 80044e2:	2308      	movs	r3, #8
 80044e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e8:	e0a1      	b.n	800462e <UART_SetConfig+0x2fe>
 80044ea:	2310      	movs	r3, #16
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f0:	e09d      	b.n	800462e <UART_SetConfig+0x2fe>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004620 <UART_SetConfig+0x2f0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d125      	bne.n	8004548 <UART_SetConfig+0x218>
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <UART_SetConfig+0x2e4>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004506:	2bc0      	cmp	r3, #192	@ 0xc0
 8004508:	d016      	beq.n	8004538 <UART_SetConfig+0x208>
 800450a:	2bc0      	cmp	r3, #192	@ 0xc0
 800450c:	d818      	bhi.n	8004540 <UART_SetConfig+0x210>
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d00a      	beq.n	8004528 <UART_SetConfig+0x1f8>
 8004512:	2b80      	cmp	r3, #128	@ 0x80
 8004514:	d814      	bhi.n	8004540 <UART_SetConfig+0x210>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <UART_SetConfig+0x1f0>
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	d008      	beq.n	8004530 <UART_SetConfig+0x200>
 800451e:	e00f      	b.n	8004540 <UART_SetConfig+0x210>
 8004520:	2300      	movs	r3, #0
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e082      	b.n	800462e <UART_SetConfig+0x2fe>
 8004528:	2302      	movs	r3, #2
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e07e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e07a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e076      	b.n	800462e <UART_SetConfig+0x2fe>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e072      	b.n	800462e <UART_SetConfig+0x2fe>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <UART_SetConfig+0x2f4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12a      	bne.n	80045a8 <UART_SetConfig+0x278>
 8004552:	4b30      	ldr	r3, [pc, #192]	@ (8004614 <UART_SetConfig+0x2e4>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004560:	d01a      	beq.n	8004598 <UART_SetConfig+0x268>
 8004562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004566:	d81b      	bhi.n	80045a0 <UART_SetConfig+0x270>
 8004568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456c:	d00c      	beq.n	8004588 <UART_SetConfig+0x258>
 800456e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004572:	d815      	bhi.n	80045a0 <UART_SetConfig+0x270>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <UART_SetConfig+0x250>
 8004578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800457c:	d008      	beq.n	8004590 <UART_SetConfig+0x260>
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x270>
 8004580:	2300      	movs	r3, #0
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e052      	b.n	800462e <UART_SetConfig+0x2fe>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e04e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e04a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459e:	e046      	b.n	800462e <UART_SetConfig+0x2fe>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e042      	b.n	800462e <UART_SetConfig+0x2fe>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	@ (800460c <UART_SetConfig+0x2dc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d13a      	bne.n	8004628 <UART_SetConfig+0x2f8>
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <UART_SetConfig+0x2e4>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c0:	d01a      	beq.n	80045f8 <UART_SetConfig+0x2c8>
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c6:	d81b      	bhi.n	8004600 <UART_SetConfig+0x2d0>
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045cc:	d00c      	beq.n	80045e8 <UART_SetConfig+0x2b8>
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d2:	d815      	bhi.n	8004600 <UART_SetConfig+0x2d0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <UART_SetConfig+0x2b0>
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045dc:	d008      	beq.n	80045f0 <UART_SetConfig+0x2c0>
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x2d0>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	e022      	b.n	800462e <UART_SetConfig+0x2fe>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e01e      	b.n	800462e <UART_SetConfig+0x2fe>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f6:	e01a      	b.n	800462e <UART_SetConfig+0x2fe>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	e016      	b.n	800462e <UART_SetConfig+0x2fe>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004606:	e012      	b.n	800462e <UART_SetConfig+0x2fe>
 8004608:	cfff69f3 	.word	0xcfff69f3
 800460c:	40008000 	.word	0x40008000
 8004610:	40013800 	.word	0x40013800
 8004614:	40021000 	.word	0x40021000
 8004618:	40004400 	.word	0x40004400
 800461c:	40004800 	.word	0x40004800
 8004620:	40004c00 	.word	0x40004c00
 8004624:	40005000 	.word	0x40005000
 8004628:	2310      	movs	r3, #16
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4aae      	ldr	r2, [pc, #696]	@ (80048ec <UART_SetConfig+0x5bc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f040 8097 	bne.w	8004768 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800463a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800463e:	2b08      	cmp	r3, #8
 8004640:	d823      	bhi.n	800468a <UART_SetConfig+0x35a>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x318>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800466d 	.word	0x0800466d
 800464c:	0800468b 	.word	0x0800468b
 8004650:	08004675 	.word	0x08004675
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800467b 	.word	0x0800467b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	0800468b 	.word	0x0800468b
 8004664:	0800468b 	.word	0x0800468b
 8004668:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe f852 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b9e      	ldr	r3, [pc, #632]	@ (80048f0 <UART_SetConfig+0x5c0>)
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fd ffb3 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800467e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8130 	beq.w	80048fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	4a94      	ldr	r2, [pc, #592]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80046a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d305      	bcc.n	80046ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d4:	e113      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2200      	movs	r2, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	60fa      	str	r2, [r7, #12]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	4a84      	ldr	r2, [pc, #528]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80046e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2200      	movs	r2, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f8:	f7fb fdda 	bl	80002b0 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	020b      	lsls	r3, r1, #8
 800470e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004712:	0202      	lsls	r2, r0, #8
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	6849      	ldr	r1, [r1, #4]
 8004718:	0849      	lsrs	r1, r1, #1
 800471a:	2000      	movs	r0, #0
 800471c:	460c      	mov	r4, r1
 800471e:	4605      	mov	r5, r0
 8004720:	eb12 0804 	adds.w	r8, r2, r4
 8004724:	eb43 0905 	adc.w	r9, r3, r5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	469a      	mov	sl, r3
 8004730:	4693      	mov	fp, r2
 8004732:	4652      	mov	r2, sl
 8004734:	465b      	mov	r3, fp
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	f7fb fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4613      	mov	r3, r2
 8004744:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474c:	d308      	bcc.n	8004760 <UART_SetConfig+0x430>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004754:	d204      	bcs.n	8004760 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e0ce      	b.n	80048fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004766:	e0ca      	b.n	80048fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004770:	d166      	bne.n	8004840 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004776:	2b08      	cmp	r3, #8
 8004778:	d827      	bhi.n	80047ca <UART_SetConfig+0x49a>
 800477a:	a201      	add	r2, pc, #4	@ (adr r2, 8004780 <UART_SetConfig+0x450>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047bb 	.word	0x080047bb
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047cb 	.word	0x080047cb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a4:	f7fd ffb6 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047aa:	e014      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fd ffc8 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b2:	e010      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b4e      	ldr	r3, [pc, #312]	@ (80048f0 <UART_SetConfig+0x5c0>)
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b8:	e00d      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fd ff13 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80047be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c0:	e009      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047c8:	e005      	b.n	80047d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8090 	beq.w	80048fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	4a44      	ldr	r2, [pc, #272]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80047e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d916      	bls.n	8004838 <UART_SetConfig+0x508>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d212      	bcs.n	8004838 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f023 030f 	bic.w	r3, r3, #15
 800481a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	b29a      	uxth	r2, r3
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	4313      	orrs	r3, r2
 800482c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	8bfa      	ldrh	r2, [r7, #30]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e062      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800483e:	e05e      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004844:	2b08      	cmp	r3, #8
 8004846:	d828      	bhi.n	800489a <UART_SetConfig+0x56a>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <UART_SetConfig+0x520>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004875 	.word	0x08004875
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004885 	.word	0x08004885
 800485c:	0800489b 	.word	0x0800489b
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489b 	.word	0x0800489b
 8004868:	0800489b 	.word	0x0800489b
 800486c:	0800489b 	.word	0x0800489b
 8004870:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fd ff4e 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487a:	e014      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7fd ff60 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004882:	e010      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <UART_SetConfig+0x5c0>)
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004888:	e00d      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7fd feab 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800488e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004890:	e009      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004898:	e005      	b.n	80048a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a4:	bf00      	nop
    }

    if (pclk != 0U)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80048b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d910      	bls.n	80048f8 <UART_SetConfig+0x5c8>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d20c      	bcs.n	80048f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x5ce>
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	08005e98 	.word	0x08005e98
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2201      	movs	r2, #1
 8004902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2201      	movs	r2, #1
 800490a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800491a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800491e:	4618      	mov	r0, r3
 8004920:	3730      	adds	r7, #48	@ 0x30
 8004922:	46bd      	mov	sp, r7
 8004924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b098      	sub	sp, #96	@ 0x60
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a7c:	f7fc fb86 	bl	800118c <HAL_GetTick>
 8004a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d12f      	bne.n	8004af0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f88e 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d022      	beq.n	8004af0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e063      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d149      	bne.n	8004b92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f857 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03c      	beq.n	8004b92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	623b      	str	r3, [r7, #32]
   return(result);
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	617b      	str	r3, [r7, #20]
   return(result);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e012      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3758      	adds	r7, #88	@ 0x58
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd0:	e04f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d04b      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fc fad7 	bl	800118c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e04e      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d037      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d034      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d031      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d110      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f838 	bl	8004c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e029      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d111      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f81e 	bl	8004c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d0a0      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b095      	sub	sp, #84	@ 0x54
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d118      	bne.n	8004d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d5a:	bf00      	nop
 8004d5c:	3754      	adds	r7, #84	@ 0x54
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e027      	b.n	8004dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e02d      	b.n	8004e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	@ 0x24
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f84f 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e02d      	b.n	8004ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f811 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ef0:	e031      	b.n	8004f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0e5b      	lsrs	r3, r3, #25
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	0f5b      	lsrs	r3, r3, #29
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	7b3a      	ldrb	r2, [r7, #12]
 8004f1e:	4911      	ldr	r1, [pc, #68]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f20:	5c8a      	ldrb	r2, [r1, r2]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f26:	7b3a      	ldrb	r2, [r7, #12]
 8004f28:	490f      	ldr	r1, [pc, #60]	@ (8004f68 <UARTEx_SetNbDataToProcess+0x98>)
 8004f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	7b7a      	ldrb	r2, [r7, #13]
 8004f3c:	4909      	ldr	r1, [pc, #36]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f3e:	5c8a      	ldrb	r2, [r1, r2]
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f44:	7b7a      	ldrb	r2, [r7, #13]
 8004f46:	4908      	ldr	r1, [pc, #32]	@ (8004f68 <UARTEx_SetNbDataToProcess+0x98>)
 8004f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	08005eb0 	.word	0x08005eb0
 8004f68:	08005eb8 	.word	0x08005eb8

08004f6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	f107 001c 	add.w	r0, r7, #28
 8004f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa68 	bl	8005460 <USB_CoreReset>
 8004f90:	4603      	mov	r3, r0
 8004f92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fa8:	e005      	b.n	8004fb6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc2:	b004      	add	sp, #16
 8004fc4:	4770      	bx	lr

08004fc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d115      	bne.n	8005036 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005016:	200a      	movs	r0, #10
 8005018:	f7fc f8c4 	bl	80011a4 <HAL_Delay>
      ms += 10U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	330a      	adds	r3, #10
 8005020:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa0e 	bl	8005444 <USB_GetMode>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d01e      	beq.n	800506c <USB_SetCurrentMode+0x84>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2bc7      	cmp	r3, #199	@ 0xc7
 8005032:	d9f0      	bls.n	8005016 <USB_SetCurrentMode+0x2e>
 8005034:	e01a      	b.n	800506c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d115      	bne.n	8005068 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005048:	200a      	movs	r0, #10
 800504a:	f7fc f8ab 	bl	80011a4 <HAL_Delay>
      ms += 10U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	330a      	adds	r3, #10
 8005052:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f9f5 	bl	8005444 <USB_GetMode>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <USB_SetCurrentMode+0x84>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2bc7      	cmp	r3, #199	@ 0xc7
 8005064:	d9f0      	bls.n	8005048 <USB_SetCurrentMode+0x60>
 8005066:	e001      	b.n	800506c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e005      	b.n	8005078 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005070:	d101      	bne.n	8005076 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005080:	b084      	sub	sp, #16
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800508e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e009      	b.n	80050b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3340      	adds	r3, #64	@ 0x40
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	3301      	adds	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b0e      	cmp	r3, #14
 80050b8:	d9f2      	bls.n	80050a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d11c      	bne.n	80050fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e005      	b.n	8005108 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800510e:	461a      	mov	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005114:	2103      	movs	r1, #3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f95a 	bl	80053d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800511c:	2110      	movs	r1, #16
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8f6 	bl	8005310 <USB_FlushTxFifo>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f920 	bl	8005374 <USB_FlushRxFifo>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e043      	b.n	80051f0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800517e:	d118      	bne.n	80051b2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e013      	b.n	80051c4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e008      	b.n	80051c4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3301      	adds	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051f4:	461a      	mov	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d3b5      	bcc.n	8005168 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e043      	b.n	800528a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005218:	d118      	bne.n	800524c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	e013      	b.n	800525e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	461a      	mov	r2, r3
 8005244:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e008      	b.n	800525e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	2300      	movs	r3, #0
 800525c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526a:	461a      	mov	r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3301      	adds	r3, #1
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4293      	cmp	r3, r2
 8005294:	d3b5      	bcc.n	8005202 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f043 0210 	orr.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	4b10      	ldr	r3, [pc, #64]	@ (800530c <USB_DevInit+0x28c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f043 0208 	orr.w	r2, r3, #8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005308:	b004      	add	sp, #16
 800530a:	4770      	bx	lr
 800530c:	803c3800 	.word	0x803c3800

08005310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800532a:	d901      	bls.n	8005330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e01b      	b.n	8005368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	daf2      	bge.n	800531e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	019b      	lsls	r3, r3, #6
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005354:	d901      	bls.n	800535a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e006      	b.n	8005368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d0f0      	beq.n	8005348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800538c:	d901      	bls.n	8005392 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e018      	b.n	80053c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	daf2      	bge.n	8005380 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2210      	movs	r2, #16
 80053a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b0:	d901      	bls.n	80053b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e006      	b.n	80053c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d0f0      	beq.n	80053a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800541c:	f023 0303 	bic.w	r3, r3, #3
 8005420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005430:	f043 0302 	orr.w	r3, r3, #2
 8005434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0301 	and.w	r3, r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005478:	d901      	bls.n	800547e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e01b      	b.n	80054b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	daf2      	bge.n	800546c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3301      	adds	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054a2:	d901      	bls.n	80054a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e006      	b.n	80054b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d0f0      	beq.n	8005496 <USB_CoreReset+0x36>

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <siprintf>:
 80054c4:	b40e      	push	{r1, r2, r3}
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	@ 0x70
 80054ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	9006      	str	r0, [sp, #24]
 80054d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054d4:	4809      	ldr	r0, [pc, #36]	@ (80054fc <siprintf+0x38>)
 80054d6:	9107      	str	r1, [sp, #28]
 80054d8:	9104      	str	r1, [sp, #16]
 80054da:	4909      	ldr	r1, [pc, #36]	@ (8005500 <siprintf+0x3c>)
 80054dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e0:	9105      	str	r1, [sp, #20]
 80054e2:	6800      	ldr	r0, [r0, #0]
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	a902      	add	r1, sp, #8
 80054e8:	f000 f994 	bl	8005814 <_svfiprintf_r>
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	b01c      	add	sp, #112	@ 0x70
 80054f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f8:	b003      	add	sp, #12
 80054fa:	4770      	bx	lr
 80054fc:	2004000c 	.word	0x2004000c
 8005500:	ffff0208 	.word	0xffff0208

08005504 <memset>:
 8005504:	4402      	add	r2, r0
 8005506:	4603      	mov	r3, r0
 8005508:	4293      	cmp	r3, r2
 800550a:	d100      	bne.n	800550e <memset+0xa>
 800550c:	4770      	bx	lr
 800550e:	f803 1b01 	strb.w	r1, [r3], #1
 8005512:	e7f9      	b.n	8005508 <memset+0x4>

08005514 <__errno>:
 8005514:	4b01      	ldr	r3, [pc, #4]	@ (800551c <__errno+0x8>)
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	2004000c 	.word	0x2004000c

08005520 <__libc_init_array>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4d0d      	ldr	r5, [pc, #52]	@ (8005558 <__libc_init_array+0x38>)
 8005524:	4c0d      	ldr	r4, [pc, #52]	@ (800555c <__libc_init_array+0x3c>)
 8005526:	1b64      	subs	r4, r4, r5
 8005528:	10a4      	asrs	r4, r4, #2
 800552a:	2600      	movs	r6, #0
 800552c:	42a6      	cmp	r6, r4
 800552e:	d109      	bne.n	8005544 <__libc_init_array+0x24>
 8005530:	4d0b      	ldr	r5, [pc, #44]	@ (8005560 <__libc_init_array+0x40>)
 8005532:	4c0c      	ldr	r4, [pc, #48]	@ (8005564 <__libc_init_array+0x44>)
 8005534:	f000 fc66 	bl	8005e04 <_init>
 8005538:	1b64      	subs	r4, r4, r5
 800553a:	10a4      	asrs	r4, r4, #2
 800553c:	2600      	movs	r6, #0
 800553e:	42a6      	cmp	r6, r4
 8005540:	d105      	bne.n	800554e <__libc_init_array+0x2e>
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	f855 3b04 	ldr.w	r3, [r5], #4
 8005548:	4798      	blx	r3
 800554a:	3601      	adds	r6, #1
 800554c:	e7ee      	b.n	800552c <__libc_init_array+0xc>
 800554e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005552:	4798      	blx	r3
 8005554:	3601      	adds	r6, #1
 8005556:	e7f2      	b.n	800553e <__libc_init_array+0x1e>
 8005558:	08005efc 	.word	0x08005efc
 800555c:	08005efc 	.word	0x08005efc
 8005560:	08005efc 	.word	0x08005efc
 8005564:	08005f00 	.word	0x08005f00

08005568 <__retarget_lock_acquire_recursive>:
 8005568:	4770      	bx	lr

0800556a <__retarget_lock_release_recursive>:
 800556a:	4770      	bx	lr

0800556c <_free_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4605      	mov	r5, r0
 8005570:	2900      	cmp	r1, #0
 8005572:	d041      	beq.n	80055f8 <_free_r+0x8c>
 8005574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005578:	1f0c      	subs	r4, r1, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfb8      	it	lt
 800557e:	18e4      	addlt	r4, r4, r3
 8005580:	f000 f8e0 	bl	8005744 <__malloc_lock>
 8005584:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <_free_r+0x90>)
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	b933      	cbnz	r3, 8005598 <_free_r+0x2c>
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	6014      	str	r4, [r2, #0]
 800558e:	4628      	mov	r0, r5
 8005590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005594:	f000 b8dc 	b.w	8005750 <__malloc_unlock>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d908      	bls.n	80055ae <_free_r+0x42>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	1821      	adds	r1, r4, r0
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf01      	itttt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	1809      	addeq	r1, r1, r0
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	e7ed      	b.n	800558a <_free_r+0x1e>
 80055ae:	461a      	mov	r2, r3
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b10b      	cbz	r3, 80055b8 <_free_r+0x4c>
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	d9fa      	bls.n	80055ae <_free_r+0x42>
 80055b8:	6811      	ldr	r1, [r2, #0]
 80055ba:	1850      	adds	r0, r2, r1
 80055bc:	42a0      	cmp	r0, r4
 80055be:	d10b      	bne.n	80055d8 <_free_r+0x6c>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	4401      	add	r1, r0
 80055c4:	1850      	adds	r0, r2, r1
 80055c6:	4283      	cmp	r3, r0
 80055c8:	6011      	str	r1, [r2, #0]
 80055ca:	d1e0      	bne.n	800558e <_free_r+0x22>
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	6053      	str	r3, [r2, #4]
 80055d2:	4408      	add	r0, r1
 80055d4:	6010      	str	r0, [r2, #0]
 80055d6:	e7da      	b.n	800558e <_free_r+0x22>
 80055d8:	d902      	bls.n	80055e0 <_free_r+0x74>
 80055da:	230c      	movs	r3, #12
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	e7d6      	b.n	800558e <_free_r+0x22>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	1821      	adds	r1, r4, r0
 80055e4:	428b      	cmp	r3, r1
 80055e6:	bf04      	itt	eq
 80055e8:	6819      	ldreq	r1, [r3, #0]
 80055ea:	685b      	ldreq	r3, [r3, #4]
 80055ec:	6063      	str	r3, [r4, #4]
 80055ee:	bf04      	itt	eq
 80055f0:	1809      	addeq	r1, r1, r0
 80055f2:	6021      	streq	r1, [r4, #0]
 80055f4:	6054      	str	r4, [r2, #4]
 80055f6:	e7ca      	b.n	800558e <_free_r+0x22>
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	20040838 	.word	0x20040838

08005600 <sbrk_aligned>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4e0f      	ldr	r6, [pc, #60]	@ (8005640 <sbrk_aligned+0x40>)
 8005604:	460c      	mov	r4, r1
 8005606:	6831      	ldr	r1, [r6, #0]
 8005608:	4605      	mov	r5, r0
 800560a:	b911      	cbnz	r1, 8005612 <sbrk_aligned+0x12>
 800560c:	f000 fba6 	bl	8005d5c <_sbrk_r>
 8005610:	6030      	str	r0, [r6, #0]
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fba1 	bl	8005d5c <_sbrk_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d103      	bne.n	8005626 <sbrk_aligned+0x26>
 800561e:	f04f 34ff 	mov.w	r4, #4294967295
 8005622:	4620      	mov	r0, r4
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	1cc4      	adds	r4, r0, #3
 8005628:	f024 0403 	bic.w	r4, r4, #3
 800562c:	42a0      	cmp	r0, r4
 800562e:	d0f8      	beq.n	8005622 <sbrk_aligned+0x22>
 8005630:	1a21      	subs	r1, r4, r0
 8005632:	4628      	mov	r0, r5
 8005634:	f000 fb92 	bl	8005d5c <_sbrk_r>
 8005638:	3001      	adds	r0, #1
 800563a:	d1f2      	bne.n	8005622 <sbrk_aligned+0x22>
 800563c:	e7ef      	b.n	800561e <sbrk_aligned+0x1e>
 800563e:	bf00      	nop
 8005640:	20040834 	.word	0x20040834

08005644 <_malloc_r>:
 8005644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005648:	1ccd      	adds	r5, r1, #3
 800564a:	f025 0503 	bic.w	r5, r5, #3
 800564e:	3508      	adds	r5, #8
 8005650:	2d0c      	cmp	r5, #12
 8005652:	bf38      	it	cc
 8005654:	250c      	movcc	r5, #12
 8005656:	2d00      	cmp	r5, #0
 8005658:	4606      	mov	r6, r0
 800565a:	db01      	blt.n	8005660 <_malloc_r+0x1c>
 800565c:	42a9      	cmp	r1, r5
 800565e:	d904      	bls.n	800566a <_malloc_r+0x26>
 8005660:	230c      	movs	r3, #12
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	2000      	movs	r0, #0
 8005666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005740 <_malloc_r+0xfc>
 800566e:	f000 f869 	bl	8005744 <__malloc_lock>
 8005672:	f8d8 3000 	ldr.w	r3, [r8]
 8005676:	461c      	mov	r4, r3
 8005678:	bb44      	cbnz	r4, 80056cc <_malloc_r+0x88>
 800567a:	4629      	mov	r1, r5
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff ffbf 	bl	8005600 <sbrk_aligned>
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	4604      	mov	r4, r0
 8005686:	d158      	bne.n	800573a <_malloc_r+0xf6>
 8005688:	f8d8 4000 	ldr.w	r4, [r8]
 800568c:	4627      	mov	r7, r4
 800568e:	2f00      	cmp	r7, #0
 8005690:	d143      	bne.n	800571a <_malloc_r+0xd6>
 8005692:	2c00      	cmp	r4, #0
 8005694:	d04b      	beq.n	800572e <_malloc_r+0xea>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	4639      	mov	r1, r7
 800569a:	4630      	mov	r0, r6
 800569c:	eb04 0903 	add.w	r9, r4, r3
 80056a0:	f000 fb5c 	bl	8005d5c <_sbrk_r>
 80056a4:	4581      	cmp	r9, r0
 80056a6:	d142      	bne.n	800572e <_malloc_r+0xea>
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	1a6d      	subs	r5, r5, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	4630      	mov	r0, r6
 80056b0:	f7ff ffa6 	bl	8005600 <sbrk_aligned>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d03a      	beq.n	800572e <_malloc_r+0xea>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	442b      	add	r3, r5
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	f8d8 3000 	ldr.w	r3, [r8]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	bb62      	cbnz	r2, 8005720 <_malloc_r+0xdc>
 80056c6:	f8c8 7000 	str.w	r7, [r8]
 80056ca:	e00f      	b.n	80056ec <_malloc_r+0xa8>
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	1b52      	subs	r2, r2, r5
 80056d0:	d420      	bmi.n	8005714 <_malloc_r+0xd0>
 80056d2:	2a0b      	cmp	r2, #11
 80056d4:	d917      	bls.n	8005706 <_malloc_r+0xc2>
 80056d6:	1961      	adds	r1, r4, r5
 80056d8:	42a3      	cmp	r3, r4
 80056da:	6025      	str	r5, [r4, #0]
 80056dc:	bf18      	it	ne
 80056de:	6059      	strne	r1, [r3, #4]
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	bf08      	it	eq
 80056e4:	f8c8 1000 	streq.w	r1, [r8]
 80056e8:	5162      	str	r2, [r4, r5]
 80056ea:	604b      	str	r3, [r1, #4]
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f82f 	bl	8005750 <__malloc_unlock>
 80056f2:	f104 000b 	add.w	r0, r4, #11
 80056f6:	1d23      	adds	r3, r4, #4
 80056f8:	f020 0007 	bic.w	r0, r0, #7
 80056fc:	1ac2      	subs	r2, r0, r3
 80056fe:	bf1c      	itt	ne
 8005700:	1a1b      	subne	r3, r3, r0
 8005702:	50a3      	strne	r3, [r4, r2]
 8005704:	e7af      	b.n	8005666 <_malloc_r+0x22>
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	42a3      	cmp	r3, r4
 800570a:	bf0c      	ite	eq
 800570c:	f8c8 2000 	streq.w	r2, [r8]
 8005710:	605a      	strne	r2, [r3, #4]
 8005712:	e7eb      	b.n	80056ec <_malloc_r+0xa8>
 8005714:	4623      	mov	r3, r4
 8005716:	6864      	ldr	r4, [r4, #4]
 8005718:	e7ae      	b.n	8005678 <_malloc_r+0x34>
 800571a:	463c      	mov	r4, r7
 800571c:	687f      	ldr	r7, [r7, #4]
 800571e:	e7b6      	b.n	800568e <_malloc_r+0x4a>
 8005720:	461a      	mov	r2, r3
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	42a3      	cmp	r3, r4
 8005726:	d1fb      	bne.n	8005720 <_malloc_r+0xdc>
 8005728:	2300      	movs	r3, #0
 800572a:	6053      	str	r3, [r2, #4]
 800572c:	e7de      	b.n	80056ec <_malloc_r+0xa8>
 800572e:	230c      	movs	r3, #12
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	4630      	mov	r0, r6
 8005734:	f000 f80c 	bl	8005750 <__malloc_unlock>
 8005738:	e794      	b.n	8005664 <_malloc_r+0x20>
 800573a:	6005      	str	r5, [r0, #0]
 800573c:	e7d6      	b.n	80056ec <_malloc_r+0xa8>
 800573e:	bf00      	nop
 8005740:	20040838 	.word	0x20040838

08005744 <__malloc_lock>:
 8005744:	4801      	ldr	r0, [pc, #4]	@ (800574c <__malloc_lock+0x8>)
 8005746:	f7ff bf0f 	b.w	8005568 <__retarget_lock_acquire_recursive>
 800574a:	bf00      	nop
 800574c:	20040830 	.word	0x20040830

08005750 <__malloc_unlock>:
 8005750:	4801      	ldr	r0, [pc, #4]	@ (8005758 <__malloc_unlock+0x8>)
 8005752:	f7ff bf0a 	b.w	800556a <__retarget_lock_release_recursive>
 8005756:	bf00      	nop
 8005758:	20040830 	.word	0x20040830

0800575c <__ssputs_r>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	688e      	ldr	r6, [r1, #8]
 8005762:	461f      	mov	r7, r3
 8005764:	42be      	cmp	r6, r7
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	4682      	mov	sl, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4690      	mov	r8, r2
 800576e:	d82d      	bhi.n	80057cc <__ssputs_r+0x70>
 8005770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005778:	d026      	beq.n	80057c8 <__ssputs_r+0x6c>
 800577a:	6965      	ldr	r5, [r4, #20]
 800577c:	6909      	ldr	r1, [r1, #16]
 800577e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005782:	eba3 0901 	sub.w	r9, r3, r1
 8005786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800578a:	1c7b      	adds	r3, r7, #1
 800578c:	444b      	add	r3, r9
 800578e:	106d      	asrs	r5, r5, #1
 8005790:	429d      	cmp	r5, r3
 8005792:	bf38      	it	cc
 8005794:	461d      	movcc	r5, r3
 8005796:	0553      	lsls	r3, r2, #21
 8005798:	d527      	bpl.n	80057ea <__ssputs_r+0x8e>
 800579a:	4629      	mov	r1, r5
 800579c:	f7ff ff52 	bl	8005644 <_malloc_r>
 80057a0:	4606      	mov	r6, r0
 80057a2:	b360      	cbz	r0, 80057fe <__ssputs_r+0xa2>
 80057a4:	6921      	ldr	r1, [r4, #16]
 80057a6:	464a      	mov	r2, r9
 80057a8:	f000 fae8 	bl	8005d7c <memcpy>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	6126      	str	r6, [r4, #16]
 80057ba:	6165      	str	r5, [r4, #20]
 80057bc:	444e      	add	r6, r9
 80057be:	eba5 0509 	sub.w	r5, r5, r9
 80057c2:	6026      	str	r6, [r4, #0]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	463e      	mov	r6, r7
 80057c8:	42be      	cmp	r6, r7
 80057ca:	d900      	bls.n	80057ce <__ssputs_r+0x72>
 80057cc:	463e      	mov	r6, r7
 80057ce:	6820      	ldr	r0, [r4, #0]
 80057d0:	4632      	mov	r2, r6
 80057d2:	4641      	mov	r1, r8
 80057d4:	f000 faa8 	bl	8005d28 <memmove>
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	1b9b      	subs	r3, r3, r6
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	4433      	add	r3, r6
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	2000      	movs	r0, #0
 80057e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ea:	462a      	mov	r2, r5
 80057ec:	f000 fad4 	bl	8005d98 <_realloc_r>
 80057f0:	4606      	mov	r6, r0
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d1e0      	bne.n	80057b8 <__ssputs_r+0x5c>
 80057f6:	6921      	ldr	r1, [r4, #16]
 80057f8:	4650      	mov	r0, sl
 80057fa:	f7ff feb7 	bl	800556c <_free_r>
 80057fe:	230c      	movs	r3, #12
 8005800:	f8ca 3000 	str.w	r3, [sl]
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e7e9      	b.n	80057e6 <__ssputs_r+0x8a>
	...

08005814 <_svfiprintf_r>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	4698      	mov	r8, r3
 800581a:	898b      	ldrh	r3, [r1, #12]
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	b09d      	sub	sp, #116	@ 0x74
 8005820:	4607      	mov	r7, r0
 8005822:	460d      	mov	r5, r1
 8005824:	4614      	mov	r4, r2
 8005826:	d510      	bpl.n	800584a <_svfiprintf_r+0x36>
 8005828:	690b      	ldr	r3, [r1, #16]
 800582a:	b973      	cbnz	r3, 800584a <_svfiprintf_r+0x36>
 800582c:	2140      	movs	r1, #64	@ 0x40
 800582e:	f7ff ff09 	bl	8005644 <_malloc_r>
 8005832:	6028      	str	r0, [r5, #0]
 8005834:	6128      	str	r0, [r5, #16]
 8005836:	b930      	cbnz	r0, 8005846 <_svfiprintf_r+0x32>
 8005838:	230c      	movs	r3, #12
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	b01d      	add	sp, #116	@ 0x74
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	2340      	movs	r3, #64	@ 0x40
 8005848:	616b      	str	r3, [r5, #20]
 800584a:	2300      	movs	r3, #0
 800584c:	9309      	str	r3, [sp, #36]	@ 0x24
 800584e:	2320      	movs	r3, #32
 8005850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005854:	f8cd 800c 	str.w	r8, [sp, #12]
 8005858:	2330      	movs	r3, #48	@ 0x30
 800585a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059f8 <_svfiprintf_r+0x1e4>
 800585e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005862:	f04f 0901 	mov.w	r9, #1
 8005866:	4623      	mov	r3, r4
 8005868:	469a      	mov	sl, r3
 800586a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800586e:	b10a      	cbz	r2, 8005874 <_svfiprintf_r+0x60>
 8005870:	2a25      	cmp	r2, #37	@ 0x25
 8005872:	d1f9      	bne.n	8005868 <_svfiprintf_r+0x54>
 8005874:	ebba 0b04 	subs.w	fp, sl, r4
 8005878:	d00b      	beq.n	8005892 <_svfiprintf_r+0x7e>
 800587a:	465b      	mov	r3, fp
 800587c:	4622      	mov	r2, r4
 800587e:	4629      	mov	r1, r5
 8005880:	4638      	mov	r0, r7
 8005882:	f7ff ff6b 	bl	800575c <__ssputs_r>
 8005886:	3001      	adds	r0, #1
 8005888:	f000 80a7 	beq.w	80059da <_svfiprintf_r+0x1c6>
 800588c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800588e:	445a      	add	r2, fp
 8005890:	9209      	str	r2, [sp, #36]	@ 0x24
 8005892:	f89a 3000 	ldrb.w	r3, [sl]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 809f 	beq.w	80059da <_svfiprintf_r+0x1c6>
 800589c:	2300      	movs	r3, #0
 800589e:	f04f 32ff 	mov.w	r2, #4294967295
 80058a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058a6:	f10a 0a01 	add.w	sl, sl, #1
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80058b4:	4654      	mov	r4, sl
 80058b6:	2205      	movs	r2, #5
 80058b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058bc:	484e      	ldr	r0, [pc, #312]	@ (80059f8 <_svfiprintf_r+0x1e4>)
 80058be:	f7fa fca7 	bl	8000210 <memchr>
 80058c2:	9a04      	ldr	r2, [sp, #16]
 80058c4:	b9d8      	cbnz	r0, 80058fe <_svfiprintf_r+0xea>
 80058c6:	06d0      	lsls	r0, r2, #27
 80058c8:	bf44      	itt	mi
 80058ca:	2320      	movmi	r3, #32
 80058cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058d0:	0711      	lsls	r1, r2, #28
 80058d2:	bf44      	itt	mi
 80058d4:	232b      	movmi	r3, #43	@ 0x2b
 80058d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058da:	f89a 3000 	ldrb.w	r3, [sl]
 80058de:	2b2a      	cmp	r3, #42	@ 0x2a
 80058e0:	d015      	beq.n	800590e <_svfiprintf_r+0xfa>
 80058e2:	9a07      	ldr	r2, [sp, #28]
 80058e4:	4654      	mov	r4, sl
 80058e6:	2000      	movs	r0, #0
 80058e8:	f04f 0c0a 	mov.w	ip, #10
 80058ec:	4621      	mov	r1, r4
 80058ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058f2:	3b30      	subs	r3, #48	@ 0x30
 80058f4:	2b09      	cmp	r3, #9
 80058f6:	d94b      	bls.n	8005990 <_svfiprintf_r+0x17c>
 80058f8:	b1b0      	cbz	r0, 8005928 <_svfiprintf_r+0x114>
 80058fa:	9207      	str	r2, [sp, #28]
 80058fc:	e014      	b.n	8005928 <_svfiprintf_r+0x114>
 80058fe:	eba0 0308 	sub.w	r3, r0, r8
 8005902:	fa09 f303 	lsl.w	r3, r9, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	9304      	str	r3, [sp, #16]
 800590a:	46a2      	mov	sl, r4
 800590c:	e7d2      	b.n	80058b4 <_svfiprintf_r+0xa0>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	9103      	str	r1, [sp, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfbb      	ittet	lt
 800591a:	425b      	neglt	r3, r3
 800591c:	f042 0202 	orrlt.w	r2, r2, #2
 8005920:	9307      	strge	r3, [sp, #28]
 8005922:	9307      	strlt	r3, [sp, #28]
 8005924:	bfb8      	it	lt
 8005926:	9204      	strlt	r2, [sp, #16]
 8005928:	7823      	ldrb	r3, [r4, #0]
 800592a:	2b2e      	cmp	r3, #46	@ 0x2e
 800592c:	d10a      	bne.n	8005944 <_svfiprintf_r+0x130>
 800592e:	7863      	ldrb	r3, [r4, #1]
 8005930:	2b2a      	cmp	r3, #42	@ 0x2a
 8005932:	d132      	bne.n	800599a <_svfiprintf_r+0x186>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	9203      	str	r2, [sp, #12]
 800593c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005940:	3402      	adds	r4, #2
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a08 <_svfiprintf_r+0x1f4>
 8005948:	7821      	ldrb	r1, [r4, #0]
 800594a:	2203      	movs	r2, #3
 800594c:	4650      	mov	r0, sl
 800594e:	f7fa fc5f 	bl	8000210 <memchr>
 8005952:	b138      	cbz	r0, 8005964 <_svfiprintf_r+0x150>
 8005954:	9b04      	ldr	r3, [sp, #16]
 8005956:	eba0 000a 	sub.w	r0, r0, sl
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	4082      	lsls	r2, r0
 800595e:	4313      	orrs	r3, r2
 8005960:	3401      	adds	r4, #1
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005968:	4824      	ldr	r0, [pc, #144]	@ (80059fc <_svfiprintf_r+0x1e8>)
 800596a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800596e:	2206      	movs	r2, #6
 8005970:	f7fa fc4e 	bl	8000210 <memchr>
 8005974:	2800      	cmp	r0, #0
 8005976:	d036      	beq.n	80059e6 <_svfiprintf_r+0x1d2>
 8005978:	4b21      	ldr	r3, [pc, #132]	@ (8005a00 <_svfiprintf_r+0x1ec>)
 800597a:	bb1b      	cbnz	r3, 80059c4 <_svfiprintf_r+0x1b0>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	3307      	adds	r3, #7
 8005980:	f023 0307 	bic.w	r3, r3, #7
 8005984:	3308      	adds	r3, #8
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598a:	4433      	add	r3, r6
 800598c:	9309      	str	r3, [sp, #36]	@ 0x24
 800598e:	e76a      	b.n	8005866 <_svfiprintf_r+0x52>
 8005990:	fb0c 3202 	mla	r2, ip, r2, r3
 8005994:	460c      	mov	r4, r1
 8005996:	2001      	movs	r0, #1
 8005998:	e7a8      	b.n	80058ec <_svfiprintf_r+0xd8>
 800599a:	2300      	movs	r3, #0
 800599c:	3401      	adds	r4, #1
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	4619      	mov	r1, r3
 80059a2:	f04f 0c0a 	mov.w	ip, #10
 80059a6:	4620      	mov	r0, r4
 80059a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ac:	3a30      	subs	r2, #48	@ 0x30
 80059ae:	2a09      	cmp	r2, #9
 80059b0:	d903      	bls.n	80059ba <_svfiprintf_r+0x1a6>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0c6      	beq.n	8005944 <_svfiprintf_r+0x130>
 80059b6:	9105      	str	r1, [sp, #20]
 80059b8:	e7c4      	b.n	8005944 <_svfiprintf_r+0x130>
 80059ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80059be:	4604      	mov	r4, r0
 80059c0:	2301      	movs	r3, #1
 80059c2:	e7f0      	b.n	80059a6 <_svfiprintf_r+0x192>
 80059c4:	ab03      	add	r3, sp, #12
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	462a      	mov	r2, r5
 80059ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005a04 <_svfiprintf_r+0x1f0>)
 80059cc:	a904      	add	r1, sp, #16
 80059ce:	4638      	mov	r0, r7
 80059d0:	f3af 8000 	nop.w
 80059d4:	1c42      	adds	r2, r0, #1
 80059d6:	4606      	mov	r6, r0
 80059d8:	d1d6      	bne.n	8005988 <_svfiprintf_r+0x174>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	065b      	lsls	r3, r3, #25
 80059de:	f53f af2d 	bmi.w	800583c <_svfiprintf_r+0x28>
 80059e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059e4:	e72c      	b.n	8005840 <_svfiprintf_r+0x2c>
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	462a      	mov	r2, r5
 80059ec:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <_svfiprintf_r+0x1f0>)
 80059ee:	a904      	add	r1, sp, #16
 80059f0:	4638      	mov	r0, r7
 80059f2:	f000 f879 	bl	8005ae8 <_printf_i>
 80059f6:	e7ed      	b.n	80059d4 <_svfiprintf_r+0x1c0>
 80059f8:	08005ec0 	.word	0x08005ec0
 80059fc:	08005eca 	.word	0x08005eca
 8005a00:	00000000 	.word	0x00000000
 8005a04:	0800575d 	.word	0x0800575d
 8005a08:	08005ec6 	.word	0x08005ec6

08005a0c <_printf_common>:
 8005a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a10:	4616      	mov	r6, r2
 8005a12:	4698      	mov	r8, r3
 8005a14:	688a      	ldr	r2, [r1, #8]
 8005a16:	690b      	ldr	r3, [r1, #16]
 8005a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	bfb8      	it	lt
 8005a20:	4613      	movlt	r3, r2
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a28:	4607      	mov	r7, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	b10a      	cbz	r2, 8005a32 <_printf_common+0x26>
 8005a2e:	3301      	adds	r3, #1
 8005a30:	6033      	str	r3, [r6, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	0699      	lsls	r1, r3, #26
 8005a36:	bf42      	ittt	mi
 8005a38:	6833      	ldrmi	r3, [r6, #0]
 8005a3a:	3302      	addmi	r3, #2
 8005a3c:	6033      	strmi	r3, [r6, #0]
 8005a3e:	6825      	ldr	r5, [r4, #0]
 8005a40:	f015 0506 	ands.w	r5, r5, #6
 8005a44:	d106      	bne.n	8005a54 <_printf_common+0x48>
 8005a46:	f104 0a19 	add.w	sl, r4, #25
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	6832      	ldr	r2, [r6, #0]
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dc26      	bgt.n	8005aa2 <_printf_common+0x96>
 8005a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	3b00      	subs	r3, #0
 8005a5c:	bf18      	it	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	0692      	lsls	r2, r2, #26
 8005a62:	d42b      	bmi.n	8005abc <_printf_common+0xb0>
 8005a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c8      	blx	r9
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d01e      	beq.n	8005ab0 <_printf_common+0xa4>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	6922      	ldr	r2, [r4, #16]
 8005a76:	f003 0306 	and.w	r3, r3, #6
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	bf02      	ittt	eq
 8005a7e:	68e5      	ldreq	r5, [r4, #12]
 8005a80:	6833      	ldreq	r3, [r6, #0]
 8005a82:	1aed      	subeq	r5, r5, r3
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	bf0c      	ite	eq
 8005a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a8c:	2500      	movne	r5, #0
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	bfc4      	itt	gt
 8005a92:	1a9b      	subgt	r3, r3, r2
 8005a94:	18ed      	addgt	r5, r5, r3
 8005a96:	2600      	movs	r6, #0
 8005a98:	341a      	adds	r4, #26
 8005a9a:	42b5      	cmp	r5, r6
 8005a9c:	d11a      	bne.n	8005ad4 <_printf_common+0xc8>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e008      	b.n	8005ab4 <_printf_common+0xa8>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	47c8      	blx	r9
 8005aac:	3001      	adds	r0, #1
 8005aae:	d103      	bne.n	8005ab8 <_printf_common+0xac>
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	3501      	adds	r5, #1
 8005aba:	e7c6      	b.n	8005a4a <_printf_common+0x3e>
 8005abc:	18e1      	adds	r1, r4, r3
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	2030      	movs	r0, #48	@ 0x30
 8005ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ac6:	4422      	add	r2, r4
 8005ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	e7c7      	b.n	8005a64 <_printf_common+0x58>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4641      	mov	r1, r8
 8005ada:	4638      	mov	r0, r7
 8005adc:	47c8      	blx	r9
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d0e6      	beq.n	8005ab0 <_printf_common+0xa4>
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7d9      	b.n	8005a9a <_printf_common+0x8e>
	...

08005ae8 <_printf_i>:
 8005ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	7e0f      	ldrb	r7, [r1, #24]
 8005aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005af0:	2f78      	cmp	r7, #120	@ 0x78
 8005af2:	4691      	mov	r9, r2
 8005af4:	4680      	mov	r8, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	469a      	mov	sl, r3
 8005afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005afe:	d807      	bhi.n	8005b10 <_printf_i+0x28>
 8005b00:	2f62      	cmp	r7, #98	@ 0x62
 8005b02:	d80a      	bhi.n	8005b1a <_printf_i+0x32>
 8005b04:	2f00      	cmp	r7, #0
 8005b06:	f000 80d2 	beq.w	8005cae <_printf_i+0x1c6>
 8005b0a:	2f58      	cmp	r7, #88	@ 0x58
 8005b0c:	f000 80b9 	beq.w	8005c82 <_printf_i+0x19a>
 8005b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b18:	e03a      	b.n	8005b90 <_printf_i+0xa8>
 8005b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b1e:	2b15      	cmp	r3, #21
 8005b20:	d8f6      	bhi.n	8005b10 <_printf_i+0x28>
 8005b22:	a101      	add	r1, pc, #4	@ (adr r1, 8005b28 <_printf_i+0x40>)
 8005b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b95 	.word	0x08005b95
 8005b30:	08005b11 	.word	0x08005b11
 8005b34:	08005b11 	.word	0x08005b11
 8005b38:	08005b11 	.word	0x08005b11
 8005b3c:	08005b11 	.word	0x08005b11
 8005b40:	08005b95 	.word	0x08005b95
 8005b44:	08005b11 	.word	0x08005b11
 8005b48:	08005b11 	.word	0x08005b11
 8005b4c:	08005b11 	.word	0x08005b11
 8005b50:	08005b11 	.word	0x08005b11
 8005b54:	08005c95 	.word	0x08005c95
 8005b58:	08005bbf 	.word	0x08005bbf
 8005b5c:	08005c4f 	.word	0x08005c4f
 8005b60:	08005b11 	.word	0x08005b11
 8005b64:	08005b11 	.word	0x08005b11
 8005b68:	08005cb7 	.word	0x08005cb7
 8005b6c:	08005b11 	.word	0x08005b11
 8005b70:	08005bbf 	.word	0x08005bbf
 8005b74:	08005b11 	.word	0x08005b11
 8005b78:	08005b11 	.word	0x08005b11
 8005b7c:	08005c57 	.word	0x08005c57
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	1d1a      	adds	r2, r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6032      	str	r2, [r6, #0]
 8005b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b90:	2301      	movs	r3, #1
 8005b92:	e09d      	b.n	8005cd0 <_printf_i+0x1e8>
 8005b94:	6833      	ldr	r3, [r6, #0]
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	1d19      	adds	r1, r3, #4
 8005b9a:	6031      	str	r1, [r6, #0]
 8005b9c:	0606      	lsls	r6, r0, #24
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_i+0xbc>
 8005ba0:	681d      	ldr	r5, [r3, #0]
 8005ba2:	e003      	b.n	8005bac <_printf_i+0xc4>
 8005ba4:	0645      	lsls	r5, r0, #25
 8005ba6:	d5fb      	bpl.n	8005ba0 <_printf_i+0xb8>
 8005ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	da03      	bge.n	8005bb8 <_printf_i+0xd0>
 8005bb0:	232d      	movs	r3, #45	@ 0x2d
 8005bb2:	426d      	negs	r5, r5
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb8:	4859      	ldr	r0, [pc, #356]	@ (8005d20 <_printf_i+0x238>)
 8005bba:	230a      	movs	r3, #10
 8005bbc:	e011      	b.n	8005be2 <_printf_i+0xfa>
 8005bbe:	6821      	ldr	r1, [r4, #0]
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	0608      	lsls	r0, r1, #24
 8005bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bc8:	d402      	bmi.n	8005bd0 <_printf_i+0xe8>
 8005bca:	0649      	lsls	r1, r1, #25
 8005bcc:	bf48      	it	mi
 8005bce:	b2ad      	uxthmi	r5, r5
 8005bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bd2:	4853      	ldr	r0, [pc, #332]	@ (8005d20 <_printf_i+0x238>)
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	bf14      	ite	ne
 8005bd8:	230a      	movne	r3, #10
 8005bda:	2308      	moveq	r3, #8
 8005bdc:	2100      	movs	r1, #0
 8005bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005be2:	6866      	ldr	r6, [r4, #4]
 8005be4:	60a6      	str	r6, [r4, #8]
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	bfa2      	ittt	ge
 8005bea:	6821      	ldrge	r1, [r4, #0]
 8005bec:	f021 0104 	bicge.w	r1, r1, #4
 8005bf0:	6021      	strge	r1, [r4, #0]
 8005bf2:	b90d      	cbnz	r5, 8005bf8 <_printf_i+0x110>
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	d04b      	beq.n	8005c90 <_printf_i+0x1a8>
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8005c02:	5dc7      	ldrb	r7, [r0, r7]
 8005c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c08:	462f      	mov	r7, r5
 8005c0a:	42bb      	cmp	r3, r7
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	d9f4      	bls.n	8005bfa <_printf_i+0x112>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d10b      	bne.n	8005c2c <_printf_i+0x144>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07df      	lsls	r7, r3, #31
 8005c18:	d508      	bpl.n	8005c2c <_printf_i+0x144>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	6861      	ldr	r1, [r4, #4]
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	bfde      	ittt	le
 8005c22:	2330      	movle	r3, #48	@ 0x30
 8005c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c2c:	1b92      	subs	r2, r2, r6
 8005c2e:	6122      	str	r2, [r4, #16]
 8005c30:	f8cd a000 	str.w	sl, [sp]
 8005c34:	464b      	mov	r3, r9
 8005c36:	aa03      	add	r2, sp, #12
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff fee6 	bl	8005a0c <_printf_common>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d14a      	bne.n	8005cda <_printf_i+0x1f2>
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	b004      	add	sp, #16
 8005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	4833      	ldr	r0, [pc, #204]	@ (8005d24 <_printf_i+0x23c>)
 8005c58:	2778      	movs	r7, #120	@ 0x78
 8005c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6831      	ldr	r1, [r6, #0]
 8005c62:	061f      	lsls	r7, r3, #24
 8005c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c68:	d402      	bmi.n	8005c70 <_printf_i+0x188>
 8005c6a:	065f      	lsls	r7, r3, #25
 8005c6c:	bf48      	it	mi
 8005c6e:	b2ad      	uxthmi	r5, r5
 8005c70:	6031      	str	r1, [r6, #0]
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	bf44      	itt	mi
 8005c76:	f043 0320 	orrmi.w	r3, r3, #32
 8005c7a:	6023      	strmi	r3, [r4, #0]
 8005c7c:	b11d      	cbz	r5, 8005c86 <_printf_i+0x19e>
 8005c7e:	2310      	movs	r3, #16
 8005c80:	e7ac      	b.n	8005bdc <_printf_i+0xf4>
 8005c82:	4827      	ldr	r0, [pc, #156]	@ (8005d20 <_printf_i+0x238>)
 8005c84:	e7e9      	b.n	8005c5a <_printf_i+0x172>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	e7f6      	b.n	8005c7e <_printf_i+0x196>
 8005c90:	4616      	mov	r6, r2
 8005c92:	e7bd      	b.n	8005c10 <_printf_i+0x128>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	6961      	ldr	r1, [r4, #20]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6030      	str	r0, [r6, #0]
 8005c9e:	062e      	lsls	r6, r5, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1c0>
 8005ca4:	6019      	str	r1, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1c6>
 8005ca8:	0668      	lsls	r0, r5, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1bc>
 8005cac:	8019      	strh	r1, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	e7bc      	b.n	8005c30 <_printf_i+0x148>
 8005cb6:	6833      	ldr	r3, [r6, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	6032      	str	r2, [r6, #0]
 8005cbc:	681e      	ldr	r6, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7fa faa4 	bl	8000210 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1e6>
 8005cca:	1b80      	subs	r0, r0, r6
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd8:	e7aa      	b.n	8005c30 <_printf_i+0x148>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ad      	beq.n	8005c44 <_printf_i+0x15c>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x22e>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a6      	b.n	8005c48 <_printf_i+0x160>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09d      	beq.n	8005c44 <_printf_i+0x15c>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x212>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x206>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x222>
 8005d1e:	bf00      	nop
 8005d20:	08005ed1 	.word	0x08005ed1
 8005d24:	08005ee2 	.word	0x08005ee2

08005d28 <memmove>:
 8005d28:	4288      	cmp	r0, r1
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	eb01 0402 	add.w	r4, r1, r2
 8005d30:	d902      	bls.n	8005d38 <memmove+0x10>
 8005d32:	4284      	cmp	r4, r0
 8005d34:	4623      	mov	r3, r4
 8005d36:	d807      	bhi.n	8005d48 <memmove+0x20>
 8005d38:	1e43      	subs	r3, r0, #1
 8005d3a:	42a1      	cmp	r1, r4
 8005d3c:	d008      	beq.n	8005d50 <memmove+0x28>
 8005d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d46:	e7f8      	b.n	8005d3a <memmove+0x12>
 8005d48:	4402      	add	r2, r0
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	428a      	cmp	r2, r1
 8005d4e:	d100      	bne.n	8005d52 <memmove+0x2a>
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d5a:	e7f7      	b.n	8005d4c <memmove+0x24>

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	@ (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fb f936 	bl	8000fd8 <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	2004082c 	.word	0x2004082c

08005d7c <memcpy>:
 8005d7c:	440a      	add	r2, r1
 8005d7e:	4291      	cmp	r1, r2
 8005d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d84:	d100      	bne.n	8005d88 <memcpy+0xc>
 8005d86:	4770      	bx	lr
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d92:	4291      	cmp	r1, r2
 8005d94:	d1f9      	bne.n	8005d8a <memcpy+0xe>
 8005d96:	bd10      	pop	{r4, pc}

08005d98 <_realloc_r>:
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4615      	mov	r5, r2
 8005da0:	460c      	mov	r4, r1
 8005da2:	b921      	cbnz	r1, 8005dae <_realloc_r+0x16>
 8005da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da8:	4611      	mov	r1, r2
 8005daa:	f7ff bc4b 	b.w	8005644 <_malloc_r>
 8005dae:	b92a      	cbnz	r2, 8005dbc <_realloc_r+0x24>
 8005db0:	f7ff fbdc 	bl	800556c <_free_r>
 8005db4:	2400      	movs	r4, #0
 8005db6:	4620      	mov	r0, r4
 8005db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dbc:	f000 f81a 	bl	8005df4 <_malloc_usable_size_r>
 8005dc0:	4285      	cmp	r5, r0
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	d802      	bhi.n	8005dcc <_realloc_r+0x34>
 8005dc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005dca:	d8f4      	bhi.n	8005db6 <_realloc_r+0x1e>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f7ff fc38 	bl	8005644 <_malloc_r>
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d0ec      	beq.n	8005db4 <_realloc_r+0x1c>
 8005dda:	42b5      	cmp	r5, r6
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4621      	mov	r1, r4
 8005de0:	bf28      	it	cs
 8005de2:	4632      	movcs	r2, r6
 8005de4:	f7ff ffca 	bl	8005d7c <memcpy>
 8005de8:	4621      	mov	r1, r4
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7ff fbbe 	bl	800556c <_free_r>
 8005df0:	463c      	mov	r4, r7
 8005df2:	e7e0      	b.n	8005db6 <_realloc_r+0x1e>

08005df4 <_malloc_usable_size_r>:
 8005df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df8:	1f18      	subs	r0, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfbc      	itt	lt
 8005dfe:	580b      	ldrlt	r3, [r1, r0]
 8005e00:	18c0      	addlt	r0, r0, r3
 8005e02:	4770      	bx	lr

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
