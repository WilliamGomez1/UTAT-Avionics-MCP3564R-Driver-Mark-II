
UTAT Avionics MCP3564R Driver Mark II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005bd0  08005bd0  00006bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cac  08005cac  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb4  08005cb4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  08005cbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  2004005c  08005d18  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200407a8  08005d18  000077a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001314d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002887  00000000  00000000  0001a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  0001d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a61d  00000000  00000000  0001e5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135e0  00000000  00000000  00048bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010191d  00000000  00000000  0005c1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  0015db04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0016207c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005bb8 	.word	0x08005bb8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	08005bb8 	.word	0x08005bb8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MCP3564_Init>:
//GPIO_TypeDef* GPIOpinLetter;
//uint16_t GPIO_PIN_Number;

//todo: make all pin assignments generic (after testing, for simplicity's sake)
//Initializes MCP3564 on a particular SPI bus, returns 0 if successful, 1 if failed
int MCP3564_Init(SPI_HandleTypeDef* hspi/*, GPIO_TypeDef* GPIOpinLetter, uint16_t GPIO_PIN_Number*/){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	MCP3564_hspi = hspi;
 80005a8:	4a82      	ldr	r2, [pc, #520]	@ (80007b4 <MCP3564_Init+0x214>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
	uint8_t RxData;

	//checks that ADC is connected
	status = MCP3564_CheckConnection();
 80005ae:	f000 f905 	bl	80007bc <MCP3564_CheckConnection>
 80005b2:	4603      	mov	r3, r0
 80005b4:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){ return 1; }
 80005b6:	7dfb      	ldrb	r3, [r7, #23]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MCP3564_Init+0x20>
 80005bc:	2301      	movs	r3, #1
 80005be:	e0f5      	b.n	80007ac <MCP3564_Init+0x20c>

	/* --- INSTRUCTION TO CONFIG0 --- */

	//01 = device address, 0001 = CONFIG0, 10 = incremental write
	uint8_t writeCommand1 = 0b01000110;
 80005c0:	2346      	movs	r3, #70	@ 0x46
 80005c2:	757b      	strb	r3, [r7, #21]
	//11 = not shutdown, 11 = internal clk (analog), 00 = no current applied, 11 = conversion mode
	uint8_t writeCONFIG0 = 0b11110011;
 80005c4:	23f3      	movs	r3, #243	@ 0xf3
 80005c6:	753b      	strb	r3, [r7, #20]

	//set CS low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	487a      	ldr	r0, [pc, #488]	@ (80007b8 <MCP3564_Init+0x218>)
 80005ce:	f001 f8d5 	bl	800177c <HAL_GPIO_WritePin>

	//send write command
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCommand1, &RxData, 1, 1000);
 80005d2:	4b78      	ldr	r3, [pc, #480]	@ (80007b4 <MCP3564_Init+0x214>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	f107 0216 	add.w	r2, r7, #22
 80005da:	f107 0115 	add.w	r1, r7, #21
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	f003 f8c4 	bl	8003772 <HAL_SPI_TransmitReceive>
 80005ea:	4603      	mov	r3, r0
 80005ec:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_ERROR){
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d106      	bne.n	8000602 <MCP3564_Init+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2110      	movs	r1, #16
 80005f8:	486f      	ldr	r0, [pc, #444]	@ (80007b8 <MCP3564_Init+0x218>)
 80005fa:	f001 f8bf 	bl	800177c <HAL_GPIO_WritePin>
		return 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	e0d4      	b.n	80007ac <MCP3564_Init+0x20c>
	}

	//write to config0 register to enable conversion mode
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCONFIG0, &RxData, 1, 1000);
 8000602:	4b6c      	ldr	r3, [pc, #432]	@ (80007b4 <MCP3564_Init+0x214>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	f107 0216 	add.w	r2, r7, #22
 800060a:	f107 0114 	add.w	r1, r7, #20
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	f003 f8ac 	bl	8003772 <HAL_SPI_TransmitReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_ERROR){
 800061e:	7dfb      	ldrb	r3, [r7, #23]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d106      	bne.n	8000632 <MCP3564_Init+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	4863      	ldr	r0, [pc, #396]	@ (80007b8 <MCP3564_Init+0x218>)
 800062a:	f001 f8a7 	bl	800177c <HAL_GPIO_WritePin>
		return 1;
 800062e:	2301      	movs	r3, #1
 8000630:	e0bc      	b.n	80007ac <MCP3564_Init+0x20c>
	}

	//set CS high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4860      	ldr	r0, [pc, #384]	@ (80007b8 <MCP3564_Init+0x218>)
 8000638:	f001 f8a0 	bl	800177c <HAL_GPIO_WritePin>

	/* --- INSTRUCTION TO CONFIG3 --- */

	//01 = device address, 0100 = CONFIG3, 10 = incremental write
	uint8_t writeCommand2 = 0b01010010;
 800063c:	2352      	movs	r3, #82	@ 0x52
 800063e:	74fb      	strb	r3, [r7, #19]
	//11 = Cont. Conversion mode, 00 = 24 bit ADC data 0000 = default other settings
	uint8_t writeCONFIG3 = 0b11000000;
 8000640:	23c0      	movs	r3, #192	@ 0xc0
 8000642:	74bb      	strb	r3, [r7, #18]

	//set CS low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	485b      	ldr	r0, [pc, #364]	@ (80007b8 <MCP3564_Init+0x218>)
 800064a:	f001 f897 	bl	800177c <HAL_GPIO_WritePin>

	//send write command
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCommand2, &RxData, 1, 1000);
 800064e:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <MCP3564_Init+0x214>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 0216 	add.w	r2, r7, #22
 8000656:	f107 0113 	add.w	r1, r7, #19
 800065a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f003 f886 	bl	8003772 <HAL_SPI_TransmitReceive>
 8000666:	4603      	mov	r3, r0
 8000668:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_ERROR){
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d106      	bne.n	800067e <MCP3564_Init+0xde>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4850      	ldr	r0, [pc, #320]	@ (80007b8 <MCP3564_Init+0x218>)
 8000676:	f001 f881 	bl	800177c <HAL_GPIO_WritePin>
		return 1;
 800067a:	2301      	movs	r3, #1
 800067c:	e096      	b.n	80007ac <MCP3564_Init+0x20c>
	}

	//write to config register to enable conversion mode
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCONFIG3, &RxData, 1, 1000);
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <MCP3564_Init+0x214>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	f107 0216 	add.w	r2, r7, #22
 8000686:	f107 0112 	add.w	r1, r7, #18
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	f003 f86e 	bl	8003772 <HAL_SPI_TransmitReceive>
 8000696:	4603      	mov	r3, r0
 8000698:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_ERROR){
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d106      	bne.n	80006ae <MCP3564_Init+0x10e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	4844      	ldr	r0, [pc, #272]	@ (80007b8 <MCP3564_Init+0x218>)
 80006a6:	f001 f869 	bl	800177c <HAL_GPIO_WritePin>
		return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e07e      	b.n	80007ac <MCP3564_Init+0x20c>
	}

	//set CS high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4841      	ldr	r0, [pc, #260]	@ (80007b8 <MCP3564_Init+0x218>)
 80006b4:	f001 f862 	bl	800177c <HAL_GPIO_WritePin>

	/* --- INSTRUCTION TO MUX --- */

		//01 = device address, 0110 = MUX, 10 = incremental write
		uint8_t writeCommand3 = 0b01011010;
 80006b8:	235a      	movs	r3, #90	@ 0x5a
 80006ba:	747b      	strb	r3, [r7, #17]
		//0000 = CH0, 1000 = Agnd
		uint8_t writeMUX = 0b00001000;
 80006bc:	2308      	movs	r3, #8
 80006be:	743b      	strb	r3, [r7, #16]

		//set CS low
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2110      	movs	r1, #16
 80006c4:	483c      	ldr	r0, [pc, #240]	@ (80007b8 <MCP3564_Init+0x218>)
 80006c6:	f001 f859 	bl	800177c <HAL_GPIO_WritePin>

		//send write command
		status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeCommand3, &RxData, 1, 1000);
 80006ca:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <MCP3564_Init+0x214>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	f107 0216 	add.w	r2, r7, #22
 80006d2:	f107 0111 	add.w	r1, r7, #17
 80006d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	f003 f848 	bl	8003772 <HAL_SPI_TransmitReceive>
 80006e2:	4603      	mov	r3, r0
 80006e4:	75fb      	strb	r3, [r7, #23]
		if(status == HAL_ERROR){
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d106      	bne.n	80006fa <MCP3564_Init+0x15a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2110      	movs	r1, #16
 80006f0:	4831      	ldr	r0, [pc, #196]	@ (80007b8 <MCP3564_Init+0x218>)
 80006f2:	f001 f843 	bl	800177c <HAL_GPIO_WritePin>
			return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e058      	b.n	80007ac <MCP3564_Init+0x20c>
		}

		//write to config register to enable conversion mode
		status = HAL_SPI_TransmitReceive(MCP3564_hspi, &writeMUX, &RxData, 1, 1000);
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MCP3564_Init+0x214>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	f107 0216 	add.w	r2, r7, #22
 8000702:	f107 0110 	add.w	r1, r7, #16
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f003 f830 	bl	8003772 <HAL_SPI_TransmitReceive>
 8000712:	4603      	mov	r3, r0
 8000714:	75fb      	strb	r3, [r7, #23]
		if(status == HAL_ERROR){
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d106      	bne.n	800072a <MCP3564_Init+0x18a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4825      	ldr	r0, [pc, #148]	@ (80007b8 <MCP3564_Init+0x218>)
 8000722:	f001 f82b 	bl	800177c <HAL_GPIO_WritePin>
			return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e040      	b.n	80007ac <MCP3564_Init+0x20c>
		}

		//set CS high
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2110      	movs	r1, #16
 800072e:	4822      	ldr	r0, [pc, #136]	@ (80007b8 <MCP3564_Init+0x218>)
 8000730:	f001 f824 	bl	800177c <HAL_GPIO_WritePin>

		/* --- READING CONGFIG0 --- */

		//01 = device address, 0101 = IRQ, 01 = static read
		uint8_t readCommand1 = 0b01010101;
 8000734:	2355      	movs	r3, #85	@ 0x55
 8000736:	73fb      	strb	r3, [r7, #15]
		uint8_t READdata = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73bb      	strb	r3, [r7, #14]
		//set CS low
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2110      	movs	r1, #16
 8000740:	481d      	ldr	r0, [pc, #116]	@ (80007b8 <MCP3564_Init+0x218>)
 8000742:	f001 f81b 	bl	800177c <HAL_GPIO_WritePin>

		//send write command
		status = HAL_SPI_TransmitReceive(MCP3564_hspi, &readCommand1, &RxData, 1, 1000);
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MCP3564_Init+0x214>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f107 0216 	add.w	r2, r7, #22
 800074e:	f107 010f 	add.w	r1, r7, #15
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f003 f80a 	bl	8003772 <HAL_SPI_TransmitReceive>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
		if(status == HAL_ERROR){
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d106      	bne.n	8000776 <MCP3564_Init+0x1d6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <MCP3564_Init+0x218>)
 800076e:	f001 f805 	bl	800177c <HAL_GPIO_WritePin>
			return 1;
 8000772:	2301      	movs	r3, #1
 8000774:	e01a      	b.n	80007ac <MCP3564_Init+0x20c>
		}

		//write to config register to enable conversion mode
		status = HAL_SPI_Receive(MCP3564_hspi, &READdata, 1, 1000);
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MCP3564_Init+0x214>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f107 010e 	add.w	r1, r7, #14
 800077e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000782:	2201      	movs	r2, #1
 8000784:	f002 febd 	bl	8003502 <HAL_SPI_Receive>
 8000788:	4603      	mov	r3, r0
 800078a:	75fb      	strb	r3, [r7, #23]
		if(status == HAL_ERROR){
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d106      	bne.n	80007a0 <MCP3564_Init+0x200>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2110      	movs	r1, #16
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MCP3564_Init+0x218>)
 8000798:	f000 fff0 	bl	800177c <HAL_GPIO_WritePin>
			return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e005      	b.n	80007ac <MCP3564_Init+0x20c>
		}

		//set CS high
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MCP3564_Init+0x218>)
 80007a6:	f000 ffe9 	bl	800177c <HAL_GPIO_WritePin>

	//return 0 if successfully reached this point
	return 0;
 80007aa:	2300      	movs	r3, #0

}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20040078 	.word	0x20040078
 80007b8:	48000800 	.word	0x48000800

080007bc <MCP3564_CheckConnection>:

// Checks if the MCP3564 is connected to the SPI bus, returns 0 if successful, 1 if failed
int MCP3564_CheckConnection(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af02      	add	r7, sp, #8
	//Checks if connected by reading register 0x1 and analyzing the STATUS byte sent over
	HAL_StatusTypeDef status;

	//01 = device address, 0001 = CONFIG0, 01 = static read
	uint8_t TxData = 0b01000101;
 80007c2:	2345      	movs	r3, #69	@ 0x45
 80007c4:	713b      	strb	r3, [r7, #4]
	uint8_t RxData = 0; // create space for status byte
 80007c6:	2300      	movs	r3, #0
 80007c8:	70fb      	strb	r3, [r7, #3]

	//Set ~CS low to begin reading and writing to chip
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2110      	movs	r1, #16
 80007ce:	481d      	ldr	r0, [pc, #116]	@ (8000844 <MCP3564_CheckConnection+0x88>)
 80007d0:	f000 ffd4 	bl	800177c <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &TxData, &RxData, 1, HAL_MAX_DELAY);
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MCP3564_CheckConnection+0x8c>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	1cfa      	adds	r2, r7, #3
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	f002 ffc5 	bl	8003772 <HAL_SPI_TransmitReceive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_ERROR) {
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d106      	bne.n	8000800 <MCP3564_CheckConnection+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2110      	movs	r1, #16
 80007f6:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MCP3564_CheckConnection+0x88>)
 80007f8:	f000 ffc0 	bl	800177c <HAL_GPIO_WritePin>
		return status;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	e01d      	b.n	800083c <MCP3564_CheckConnection+0x80>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2110      	movs	r1, #16
 8000804:	480f      	ldr	r0, [pc, #60]	@ (8000844 <MCP3564_CheckConnection+0x88>)
 8000806:	f000 ffb9 	bl	800177c <HAL_GPIO_WritePin>

	//isolate device bits to check if STAT[4] is complement of STAT[3]
	uint8_t STAT4 = (RxData >> 4) & 0x01;
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	091b      	lsrs	r3, r3, #4
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
	uint8_t STAT3 = (RxData >> 3) & 0x01;
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	717b      	strb	r3, [r7, #5]
	if (STAT4 == STAT3) {
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	429a      	cmp	r2, r3
 8000828:	d101      	bne.n	800082e <MCP3564_CheckConnection+0x72>
		return 1; // device not connected
 800082a:	2301      	movs	r3, #1
 800082c:	e006      	b.n	800083c <MCP3564_CheckConnection+0x80>
	} else if (STAT4 != STAT3){
 800082e:	79ba      	ldrb	r2, [r7, #6]
 8000830:	797b      	ldrb	r3, [r7, #5]
 8000832:	429a      	cmp	r2, r3
 8000834:	d001      	beq.n	800083a <MCP3564_CheckConnection+0x7e>
		return 0; //device connected
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <MCP3564_CheckConnection+0x80>
	}
	return status;
 800083a:	79fb      	ldrb	r3, [r7, #7]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	48000800 	.word	0x48000800
 8000848:	20040078 	.word	0x20040078

0800084c <MCP3564_ReadChannel>:

// Reads voltage calculated from MCP3564, returns 0 if successful, 1 if failed
int MCP3564_ReadChannel(int32_t *channelReading){
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t data[3] = {0,0,0};
 8000854:	4a2c      	ldr	r2, [pc, #176]	@ (8000908 <MCP3564_ReadChannel+0xbc>)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	4611      	mov	r1, r2
 800085e:	8019      	strh	r1, [r3, #0]
 8000860:	3302      	adds	r3, #2
 8000862:	0c12      	lsrs	r2, r2, #16
 8000864:	701a      	strb	r2, [r3, #0]

	//01 = device address, 0000 = ADCDATA, 01 = static read
	uint8_t command = 0b01000001;
 8000866:	2341      	movs	r3, #65	@ 0x41
 8000868:	72fb      	strb	r3, [r7, #11]
	uint8_t RxData = 0; //for comparison to validate connection
 800086a:	2300      	movs	r3, #0
 800086c:	72bb      	strb	r3, [r7, #10]

	//CS low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	4826      	ldr	r0, [pc, #152]	@ (800090c <MCP3564_ReadChannel+0xc0>)
 8000874:	f000 ff82 	bl	800177c <HAL_GPIO_WritePin>

	status = HAL_SPI_TransmitReceive(MCP3564_hspi, &command, &RxData, 1, 1000);
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <MCP3564_ReadChannel+0xc4>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f107 020a 	add.w	r2, r7, #10
 8000880:	f107 010b 	add.w	r1, r7, #11
 8000884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	f002 ff71 	bl	8003772 <HAL_SPI_TransmitReceive>
 8000890:	4603      	mov	r3, r0
 8000892:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <MCP3564_ReadChannel+0x52>
		return status;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	e02f      	b.n	80008fe <MCP3564_ReadChannel+0xb2>
	}
	status = HAL_SPI_Receive (MCP3564_hspi, data, 3, 1000);
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MCP3564_ReadChannel+0xc4>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f107 010c 	add.w	r1, r7, #12
 80008a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008aa:	2203      	movs	r2, #3
 80008ac:	f002 fe29 	bl	8003502 <HAL_SPI_Receive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_ERROR){
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d101      	bne.n	80008be <MCP3564_ReadChannel+0x72>
			return status;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	e01f      	b.n	80008fe <MCP3564_ReadChannel+0xb2>
	}
	//CS high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2110      	movs	r1, #16
 80008c2:	4812      	ldr	r0, [pc, #72]	@ (800090c <MCP3564_ReadChannel+0xc0>)
 80008c4:	f000 ff5a 	bl	800177c <HAL_GPIO_WritePin>

	//stitches the 3 bytes of data together
	*channelReading |= (uint32_t)data[0] << 16;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	7b3b      	ldrb	r3, [r7, #12]
 80008d0:	041b      	lsls	r3, r3, #16
 80008d2:	4313      	orrs	r3, r2
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
	*channelReading |= (uint32_t)data[1] << 8;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	4313      	orrs	r3, r2
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	*channelReading |= (uint32_t)data[2];
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]

	return status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08005bd0 	.word	0x08005bd0
 800090c:	48000800 	.word	0x48000800
 8000910:	20040078 	.word	0x20040078

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	@ 0x70
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  int status;
	  uint32_t channelReading = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fc1c 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f849 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f955 	bl	8000bd4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800092a:	f000 f89b 	bl	8000a64 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800092e:	f000 f923 	bl	8000b78 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000932:	f000 f8e3 	bl	8000afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	// Initially set ~CS pin high
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	481a      	ldr	r0, [pc, #104]	@ (80009a4 <main+0x90>)
 800093c:	f000 ff1e 	bl	800177c <HAL_GPIO_WritePin>
  	// Initialize MCP3564R
  	status = MCP3564_Init(&hspi1);
 8000940:	4819      	ldr	r0, [pc, #100]	@ (80009a8 <main+0x94>)
 8000942:	f7ff fe2d 	bl	80005a0 <MCP3564_Init>
 8000946:	66f8      	str	r0, [r7, #108]	@ 0x6c
  	if(status == HAL_ERROR) {
 8000948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800094a:	2b01      	cmp	r3, #1
 800094c:	d110      	bne.n	8000970 <main+0x5c>
  		sprintf((char*)tx_buff, "ERROR: MCP3564R failed to initiate\n\r");
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4916      	ldr	r1, [pc, #88]	@ (80009ac <main+0x98>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fc90 	bl	8005278 <siprintf>
  		HAL_UART_Transmit(&hlpuart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc50 	bl	8000200 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	1d39      	adds	r1, r7, #4
 8000966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096a:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <main+0x9c>)
 800096c:	f003 fb2c 	bl	8003fc8 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // attempts to read channel data
	status = MCP3564_ReadChannel(&channelReading);
 8000970:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff69 	bl	800084c <MCP3564_ReadChannel>
 800097a:	66f8      	str	r0, [r7, #108]	@ 0x6c

	sprintf((char*)tx_buff, "CH0: %d \n\r", channelReading);
 800097c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <main+0xa0>)
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fc78 	bl	8005278 <siprintf>
	HAL_UART_Transmit(&hlpuart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc38 	bl	8000200 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	1d39      	adds	r1, r7, #4
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <main+0x9c>)
 800099c:	f003 fb14 	bl	8003fc8 <HAL_UART_Transmit>
	status = MCP3564_ReadChannel(&channelReading);
 80009a0:	bf00      	nop
 80009a2:	e7e5      	b.n	8000970 <main+0x5c>
 80009a4:	48000800 	.word	0x48000800
 80009a8:	20040110 	.word	0x20040110
 80009ac:	08005bd4 	.word	0x08005bd4
 80009b0:	2004007c 	.word	0x2004007c
 80009b4:	08005bfc 	.word	0x08005bfc

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	@ 0x58
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2244      	movs	r2, #68	@ 0x44
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fc76 	bl	80052b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009de:	f001 f839 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e8:	f000 f9be 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80009ec:	2322      	movs	r3, #34	@ 0x22
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a02:	2302      	movs	r3, #2
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f8dc 	bl	8001bdc <HAL_RCC_OscConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a2a:	f000 f99d 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2e:	230f      	movs	r3, #15
 8000a30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a32:	2303      	movs	r3, #3
 8000a34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000a36:	2390      	movs	r3, #144	@ 0x90
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000a3a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000a40:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fce0 	bl	8002410 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a56:	f000 f987 	bl	8000d68 <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3758      	adds	r7, #88	@ 0x58
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a68:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <MX_LPUART1_UART_Init+0x94>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aac:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000aae:	f003 fa3b 	bl	8003f28 <HAL_UART_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ab8:	f000 f956 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000ac0:	f004 f864 	bl	8004b8c <HAL_UARTEx_SetTxFifoThreshold>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aca:	f000 f94d 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000ad2:	f004 f899 	bl	8004c08 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000adc:	f000 f944 	bl	8000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_LPUART1_UART_Init+0x90>)
 8000ae2:	f004 f81a 	bl	8004b1a <HAL_UARTEx_DisableFifoMode>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f93c 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2004007c 	.word	0x2004007c
 8000af8:	40008000 	.word	0x40008000

08000afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <MX_SPI1_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b56:	2208      	movs	r2, #8
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_SPI1_Init+0x74>)
 8000b5c:	f002 fc2e 	bl	80033bc <HAL_SPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f8ff 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20040110 	.word	0x20040110
 8000b74:	40013000 	.word	0x40013000

08000b78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2206      	movs	r2, #6
 8000b88:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	f000 fdf6 	bl	80017ac <HAL_PCD_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 f8cf 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20040174 	.word	0x20040174

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	@ 0x30
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a59      	ldr	r2, [pc, #356]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b57      	ldr	r3, [pc, #348]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a53      	ldr	r2, [pc, #332]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c26:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a47      	ldr	r2, [pc, #284]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b45      	ldr	r3, [pc, #276]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a41      	ldr	r2, [pc, #260]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c62:	4b3c      	ldr	r3, [pc, #240]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a3b      	ldr	r2, [pc, #236]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <MX_GPIO_Init+0x180>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c7a:	f000 ff9f 	bl	8001bbc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	4835      	ldr	r0, [pc, #212]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000c84:	f000 fd7a 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000c8e:	4833      	ldr	r0, [pc, #204]	@ (8000d5c <MX_GPIO_Init+0x188>)
 8000c90:	f000 fd74 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2140      	movs	r1, #64	@ 0x40
 8000c98:	4831      	ldr	r0, [pc, #196]	@ (8000d60 <MX_GPIO_Init+0x18c>)
 8000c9a:	f000 fd6f 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4828      	ldr	r0, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000cb6:	f000 fbcf 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <MX_GPIO_Init+0x184>)
 8000cd2:	f000 fbc1 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000cd6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	481b      	ldr	r0, [pc, #108]	@ (8000d5c <MX_GPIO_Init+0x188>)
 8000cf0:	f000 fbb2 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d06:	2307      	movs	r3, #7
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <MX_GPIO_Init+0x190>)
 8000d12:	f000 fba1 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d16:	2320      	movs	r3, #32
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <MX_GPIO_Init+0x18c>)
 8000d2a:	f000 fb95 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d2e:	2340      	movs	r3, #64	@ 0x40
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <MX_GPIO_Init+0x18c>)
 8000d46:	f000 fb87 	bl	8001458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	@ 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48001800 	.word	0x48001800
 8000d64:	48000c00 	.word	0x48000c00

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d86:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_MspInit+0x44>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	@ 0xb8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2294      	movs	r2, #148	@ 0x94
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fa6b 	bl	80052b8 <memset>
  if(huart->Instance==LPUART1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_UART_MspInit+0xb4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d13d      	bne.n	8000e68 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dec:	2320      	movs	r3, #32
 8000dee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fdc7 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e04:	f7ff ffb0 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e0c:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e24:	4a13      	ldr	r2, [pc, #76]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0xb8>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e38:	f000 fec0 	bl	8001bbc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e3c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e56:	2308      	movs	r3, #8
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_UART_MspInit+0xbc>)
 8000e64:	f000 faf8 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	37b8      	adds	r7, #184	@ 0xb8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40008000 	.word	0x40008000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48001800 	.word	0x48001800

08000e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_SPI_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d128      	bne.n	8000ef0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a16      	ldr	r2, [pc, #88]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ece:	23e0      	movs	r3, #224	@ 0xe0
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f000 fab4 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	@ 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b0      	sub	sp, #192	@ 0xc0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	2294      	movs	r2, #148	@ 0x94
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 f9c9 	bl	80052b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f2e:	d16c      	bne.n	800100a <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fd23 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f4c:	f7ff ff0c 	bl	8000d68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f54:	4a2f      	ldr	r2, [pc, #188]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f68:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f82:	230a      	movs	r3, #10
 8000f84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f000 fa61 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb4:	f000 fa50 	bl	8001458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d114      	bne.n	8001006 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ff4:	f000 fdd2 	bl	8001b9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <HAL_PCD_MspInit+0x114>)
 8000ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001002:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001004:	e001      	b.n	800100a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001006:	f000 fdc9 	bl	8001b9c <HAL_PWREx_EnableVddUSB>
}
 800100a:	bf00      	nop
 800100c:	37c0      	adds	r7, #192	@ 0xc0
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f8c9 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f004 f90e 	bl	80052c8 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200a0000 	.word	0x200a0000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	20040658 	.word	0x20040658
 80010e0:	200407a8 	.word	0x200407a8

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f004 f8cd 	bl	80052d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fbeb 	bl	8000914 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001144:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001148:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 800114c:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8001150:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 8001154:	200407a8 	.word	0x200407a8

08001158 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f943 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f80e 	bl	800118c <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff fdfa 	bl	8000d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d023      	beq.n	80011e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_InitTick+0x70>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f941 	bl	800143e <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d809      	bhi.n	80011dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f919 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_InitTick+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e007      	b.n	80011ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e004      	b.n	80011ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e001      	b.n	80011ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20040008 	.word	0x20040008
 80011fc:	20040000 	.word	0x20040000
 8001200:	20040004 	.word	0x20040004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20040008 	.word	0x20040008
 8001228:	2004065c 	.word	0x2004065c

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2004065c 	.word	0x2004065c

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20040008 	.word	0x20040008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff47 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff5c 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffb0 	bl	80013ac <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e166      	b.n	8001736 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8158 	beq.w	8001730 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d005      	beq.n	8001498 <HAL_GPIO_Init+0x40>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d130      	bne.n	80014fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 0201 	and.w	r2, r3, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b03      	cmp	r3, #3
 8001504:	d017      	beq.n	8001536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	6939      	ldr	r1, [r7, #16]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80b2 	beq.w	8001730 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b61      	ldr	r3, [pc, #388]	@ (8001754 <HAL_GPIO_Init+0x2fc>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	4a60      	ldr	r2, [pc, #384]	@ (8001754 <HAL_GPIO_Init+0x2fc>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001754 <HAL_GPIO_Init+0x2fc>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001758 <HAL_GPIO_Init+0x300>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800160e:	d02b      	beq.n	8001668 <HAL_GPIO_Init+0x210>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_GPIO_Init+0x304>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d025      	beq.n	8001664 <HAL_GPIO_Init+0x20c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a51      	ldr	r2, [pc, #324]	@ (8001760 <HAL_GPIO_Init+0x308>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d01f      	beq.n	8001660 <HAL_GPIO_Init+0x208>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a50      	ldr	r2, [pc, #320]	@ (8001764 <HAL_GPIO_Init+0x30c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d019      	beq.n	800165c <HAL_GPIO_Init+0x204>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_GPIO_Init+0x310>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x200>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_GPIO_Init+0x314>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1fc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4d      	ldr	r2, [pc, #308]	@ (8001770 <HAL_GPIO_Init+0x318>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x31c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1f4>
 8001648:	2307      	movs	r3, #7
 800164a:	e00e      	b.n	800166a <HAL_GPIO_Init+0x212>
 800164c:	2308      	movs	r3, #8
 800164e:	e00c      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001650:	2306      	movs	r3, #6
 8001652:	e00a      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001654:	2305      	movs	r3, #5
 8001656:	e008      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001658:	2304      	movs	r3, #4
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x212>
 800165c:	2303      	movs	r3, #3
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x212>
 8001668:	2300      	movs	r3, #0
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167a:	4937      	ldr	r1, [pc, #220]	@ (8001758 <HAL_GPIO_Init+0x300>)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001688:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_GPIO_Init+0x320>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ac:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <HAL_GPIO_Init+0x320>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_GPIO_Init+0x320>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d6:	4a28      	ldr	r2, [pc, #160]	@ (8001778 <HAL_GPIO_Init+0x320>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x320>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001700:	4a1d      	ldr	r2, [pc, #116]	@ (8001778 <HAL_GPIO_Init+0x320>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_GPIO_Init+0x320>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172a:	4a13      	ldr	r2, [pc, #76]	@ (8001778 <HAL_GPIO_Init+0x320>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f ae91 	bne.w	8001468 <HAL_GPIO_Init+0x10>
  }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000
 800176c:	48001400 	.word	0x48001400
 8001770:	48001800 	.word	0x48001800
 8001774:	48001c00 	.word	0x48001c00
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e101      	b.n	80019c2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fb94 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fac5 	bl	8004d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7c1a      	ldrb	r2, [r3, #16]
 80017f8:	f88d 2000 	strb.w	r2, [sp]
 80017fc:	3304      	adds	r3, #4
 80017fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001800:	f003 fa8e 	bl	8004d20 <USB_CoreInit>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0d5      	b.n	80019c2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f003 fabd 	bl	8004d9c <USB_SetCurrentMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0c6      	b.n	80019c2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e04a      	b.n	80018d0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3315      	adds	r3, #21
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3314      	adds	r3, #20
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	b298      	uxth	r0, r3
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	332e      	adds	r3, #46	@ 0x2e
 8001876:	4602      	mov	r2, r0
 8001878:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3318      	adds	r3, #24
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	331c      	adds	r3, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3320      	adds	r3, #32
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3324      	adds	r3, #36	@ 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3af      	bcc.n	800183a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e044      	b.n	800196a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	3301      	adds	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3b5      	bcc.n	80018e0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7c1a      	ldrb	r2, [r3, #16]
 800197c:	f88d 2000 	strb.w	r2, [sp]
 8001980:	3304      	adds	r3, #4
 8001982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001984:	f003 fa56 	bl	8004e34 <USB_DevInit>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e013      	b.n	80019c2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7b1b      	ldrb	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f80a 	bl	80019ca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fbfb 	bl	80051b6 <USB_DevDisconnect>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	f043 0303 	orr.w	r3, r3, #3
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a24:	d102      	bne.n	8001a2c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a2a:	e00b      	b.n	8001a44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a3a:	d102      	bne.n	8001a42 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a40:	e000      	b.n	8001a44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a42:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d141      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a62:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d131      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a70:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a76:	4a46      	ldr	r2, [pc, #280]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a88:	4a41      	ldr	r2, [pc, #260]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a90:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2232      	movs	r2, #50	@ 0x32
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa6:	e002      	b.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aae:	4b38      	ldr	r3, [pc, #224]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d102      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f2      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ace:	d158      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e057      	b.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ada:	4a2d      	ldr	r2, [pc, #180]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ae4:	e04d      	b.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aec:	d141      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	d131      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b02:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b14:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2232      	movs	r2, #50	@ 0x32
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	4a1c      	ldr	r2, [pc, #112]	@ (8001b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b32:	e002      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b46:	d102      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f2      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5a:	d112      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e011      	b.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b70:	e007      	b.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b80:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40007000 	.word	0x40007000
 8001b94:	20040000 	.word	0x20040000
 8001b98:	431bde83 	.word	0x431bde83

08001b9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001baa:	6053      	str	r3, [r2, #4]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bca:	6053      	str	r3, [r2, #4]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40007000 	.word	0x40007000

08001bdc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bc08 	b.w	8002400 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf0:	4b96      	ldr	r3, [pc, #600]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfa:	4b94      	ldr	r3, [pc, #592]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80e4 	beq.w	8001dda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4c>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	f040 808b 	bne.w	8001d36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	f040 8087 	bne.w	8001d36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c28:	4b88      	ldr	r3, [pc, #544]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_OscConfig+0x64>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e3df      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1a      	ldr	r2, [r3, #32]
 8001c44:	4b81      	ldr	r3, [pc, #516]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_RCC_OscConfig+0x7e>
 8001c50:	4b7e      	ldr	r3, [pc, #504]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c58:	e005      	b.n	8001c66 <HAL_RCC_OscConfig+0x8a>
 8001c5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d223      	bcs.n	8001cb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fdcc 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e3c0      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7e:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a72      	ldr	r2, [pc, #456]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b70      	ldr	r3, [pc, #448]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	496d      	ldr	r1, [pc, #436]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	4968      	ldr	r1, [pc, #416]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e025      	b.n	8001cfe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb2:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a65      	ldr	r2, [pc, #404]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4960      	ldr	r1, [pc, #384]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	495b      	ldr	r1, [pc, #364]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fd8c 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e380      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfe:	f000 fcc1 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b51      	ldr	r3, [pc, #324]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	4950      	ldr	r1, [pc, #320]	@ (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa32 	bl	800118c <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d052      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	e364      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d032      	beq.n	8001da4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a42      	ldr	r2, [pc, #264]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fa6f 	bl	800122c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d52:	f7ff fa6b 	bl	800122c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e34d      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a35      	ldr	r2, [pc, #212]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4930      	ldr	r1, [pc, #192]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	492b      	ldr	r1, [pc, #172]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
 8001da2:	e01a      	b.n	8001dda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa3c 	bl	800122c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db8:	f7ff fa38 	bl	800122c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e31a      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1dc>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d073      	beq.n	8001ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_OscConfig+0x21c>
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d063      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d15f      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e2f7      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e18:	d106      	bne.n	8001e28 <HAL_RCC_OscConfig+0x24c>
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e025      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e30:	d114      	bne.n	8001e5c <HAL_RCC_OscConfig+0x280>
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a02      	ldr	r2, [pc, #8]	@ (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08005c08 	.word	0x08005c08
 8001e54:	20040000 	.word	0x20040000
 8001e58:	20040004 	.word	0x20040004
 8001e5c:	4ba0      	ldr	r3, [pc, #640]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a9f      	ldr	r2, [pc, #636]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b9d      	ldr	r3, [pc, #628]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9c      	ldr	r2, [pc, #624]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9d6 	bl	800122c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9d2 	bl	800122c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e2b4      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2a8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f9c2 	bl	800122c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f9be 	bl	800122c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e2a0      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x2d0>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d060      	beq.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x310>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d116      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	4b7c      	ldr	r3, [pc, #496]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x328>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e27d      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4973      	ldr	r1, [pc, #460]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e040      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d023      	beq.n	8001f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f22:	4b6f      	ldr	r3, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f97d 	bl	800122c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff f979 	bl	800122c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e25b      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	4b65      	ldr	r3, [pc, #404]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	495f      	ldr	r1, [pc, #380]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f959 	bl	800122c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f955 	bl	800122c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e237      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f934 	bl	800122c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f930 	bl	800122c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e212      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001fe8:	e01b      	b.n	8002022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f917 	bl	800122c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f913 	bl	800122c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1f5      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002014:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	@ 0x58
 800204c:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_RCC_OscConfig+0x508>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d118      	bne.n	800209a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1d      	ldr	r2, [pc, #116]	@ (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002074:	f7ff f8da 	bl	800122c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff f8d6 	bl	800122c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1b8      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_RCC_OscConfig+0x508>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
 80020a2:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b2:	e029      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x50c>
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	4a03      	ldr	r2, [pc, #12]	@ (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	4a9c      	ldr	r2, [pc, #624]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f8:	4b99      	ldr	r3, [pc, #612]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	4a98      	ldr	r2, [pc, #608]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff f88c 	bl	800122c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff f888 	bl	800122c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e168      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	4b8c      	ldr	r3, [pc, #560]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ed      	beq.n	8002118 <HAL_RCC_OscConfig+0x53c>
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff f875 	bl	800122c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff f871 	bl	800122c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e151      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	4b80      	ldr	r3, [pc, #512]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ed      	bne.n	8002146 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b7b      	ldr	r3, [pc, #492]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	4a7a      	ldr	r2, [pc, #488]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002190:	4b73      	ldr	r3, [pc, #460]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002196:	4a72      	ldr	r2, [pc, #456]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff f844 	bl	800122c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a8:	f7ff f840 	bl	800122c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e122      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ba:	4b69      	ldr	r3, [pc, #420]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80021bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x5cc>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ca:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80021cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021d0:	4a63      	ldr	r2, [pc, #396]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff f827 	bl	800122c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e2:	f7ff f823 	bl	800122c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e105      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80f9 	beq.w	80023fe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	2b02      	cmp	r3, #2
 8002212:	f040 80cf 	bne.w	80023b4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002216:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	429a      	cmp	r2, r3
 8002228:	d12c      	bne.n	8002284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	3b01      	subs	r3, #1
 8002236:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d123      	bne.n	8002284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002246:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d11b      	bne.n	8002284 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002256:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d113      	bne.n	8002284 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	3b01      	subs	r3, #1
 800226a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d109      	bne.n	8002284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d071      	beq.n	8002368 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d068      	beq.n	800235c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800228a:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002296:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0ac      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80022ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b2:	f7fe ffbb 	bl	800122c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe ffb7 	bl	800122c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e099      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <HAL_RCC_OscConfig+0x788>)
 80022de:	4013      	ands	r3, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022f2:	0212      	lsls	r2, r2, #8
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022fa:	0852      	lsrs	r2, r2, #1
 80022fc:	3a01      	subs	r2, #1
 80022fe:	0552      	lsls	r2, r2, #21
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	3a01      	subs	r2, #1
 800230a:	0652      	lsls	r2, r2, #25
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002312:	06d2      	lsls	r2, r2, #27
 8002314:	430a      	orrs	r2, r1
 8002316:	4912      	ldr	r1, [pc, #72]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800231c:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0f      	ldr	r2, [pc, #60]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002334:	f7fe ff7a 	bl	800122c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe ff76 	bl	800122c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e058      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <HAL_RCC_OscConfig+0x784>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235a:	e050      	b.n	80023fe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e04f      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
 8002360:	40021000 	.word	0x40021000
 8002364:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	4b27      	ldr	r3, [pc, #156]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d144      	bne.n	80023fe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002374:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002380:	4b21      	ldr	r3, [pc, #132]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a20      	ldr	r2, [pc, #128]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800238c:	f7fe ff4e 	bl	800122c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe ff4a 	bl	800122c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e02c      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x7b8>
 80023b2:	e024      	b.n	80023fe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d01f      	beq.n	80023fa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe ff31 	bl	800122c <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe ff2d 	bl	800122c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00f      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4905      	ldr	r1, [pc, #20]	@ (8002408 <HAL_RCC_OscConfig+0x82c>)
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_OscConfig+0x830>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e001      	b.n	80023fe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	feeefffc 	.word	0xfeeefffc

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e11d      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b90      	ldr	r3, [pc, #576]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b8d      	ldr	r3, [pc, #564]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	498b      	ldr	r1, [pc, #556]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e105      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b81      	ldr	r3, [pc, #516]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002470:	429a      	cmp	r2, r3
 8002472:	d908      	bls.n	8002486 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b7e      	ldr	r3, [pc, #504]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	497b      	ldr	r1, [pc, #492]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d079      	beq.n	8002586 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d11e      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b75      	ldr	r3, [pc, #468]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0dc      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024aa:	f000 fa09 	bl	80028c0 <RCC_GetSysClockFreqFromPLLSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a70      	ldr	r2, [pc, #448]	@ (8002674 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d946      	bls.n	8002544 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d140      	bne.n	8002544 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ca:	4a69      	ldr	r2, [pc, #420]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e035      	b.n	8002544 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e0:	4b63      	ldr	r3, [pc, #396]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d115      	bne.n	8002518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b9      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0ad      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0a5      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002518:	f000 f8b4 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 800251c:	4603      	mov	r3, r0
 800251e:	4a55      	ldr	r2, [pc, #340]	@ (8002674 <HAL_RCC_ClockConfig+0x264>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d90f      	bls.n	8002544 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002524:	4b52      	ldr	r3, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002530:	4b4f      	ldr	r3, [pc, #316]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002538:	4a4d      	ldr	r2, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800253a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002544:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4947      	ldr	r1, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002556:	f7fe fe69 	bl	800122c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255c:	e00a      	b.n	8002574 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255e:	f7fe fe65 	bl	800122c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e077      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002574:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 020c 	and.w	r2, r3, #12
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	429a      	cmp	r2, r3
 8002584:	d1eb      	bne.n	800255e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b80      	cmp	r3, #128	@ 0x80
 800258a:	d105      	bne.n	8002598 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800258c:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a37      	ldr	r2, [pc, #220]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002596:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d208      	bcs.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	492b      	ldr	r1, [pc, #172]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d210      	bcs.n	80025f6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 020f 	bic.w	r2, r3, #15
 80025dc:	4923      	ldr	r1, [pc, #140]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_RCC_ClockConfig+0x25c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e036      	b.n	8002664 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4918      	ldr	r1, [pc, #96]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002620:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4910      	ldr	r1, [pc, #64]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002634:	f000 f826 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_RCC_ClockConfig+0x260>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	490c      	ldr	r1, [pc, #48]	@ (8002678 <HAL_RCC_ClockConfig+0x268>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <HAL_RCC_ClockConfig+0x26c>)
 8002652:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_RCC_ClockConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fd97 	bl	800118c <HAL_InitTick>
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]

  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	04c4b400 	.word	0x04c4b400
 8002678:	08005c08 	.word	0x08005c08
 800267c:	20040000 	.word	0x20040000
 8002680:	20040004 	.word	0x20040004

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x34>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d11e      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026b8:	4b34      	ldr	r3, [pc, #208]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d4:	4b2d      	ldr	r3, [pc, #180]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e004      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d101      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002708:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 800270a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d134      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0xa6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0xac>
 8002728:	e005      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	e005      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 8002732:	617b      	str	r3, [r7, #20]
      break;
 8002734:	e002      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	617b      	str	r3, [r7, #20]
      break;
 800273a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3301      	adds	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	fb03 f202 	mul.w	r2, r3, r2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0e5b      	lsrs	r3, r3, #25
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	3301      	adds	r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800277c:	69bb      	ldr	r3, [r7, #24]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	@ 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	08005c20 	.word	0x08005c20
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20040000 	.word	0x20040000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4904      	ldr	r1, [pc, #16]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08005c18 	.word	0x08005c18

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e4:	f7ff ffda 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4904      	ldr	r1, [pc, #16]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08005c18 	.word	0x08005c18

0800280c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002818:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002824:	f7ff f8f6 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002828:	6178      	str	r0, [r7, #20]
 800282a:	e014      	b.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b22      	ldr	r3, [pc, #136]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002836:	6593      	str	r3, [r2, #88]	@ 0x58
 8002838:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002844:	f7ff f8e6 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800285c:	d10b      	bne.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b80      	cmp	r3, #128	@ 0x80
 8002862:	d913      	bls.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2ba0      	cmp	r3, #160	@ 0xa0
 8002868:	d902      	bls.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286a:	2302      	movs	r3, #2
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e00d      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e00a      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b7f      	cmp	r3, #127	@ 0x7f
 800287a:	d902      	bls.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e004      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b70      	cmp	r3, #112	@ 0x70
 8002886:	d101      	bne.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 020f 	bic.w	r2, r3, #15
 8002894:	4909      	ldr	r1, [pc, #36]	@ (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800289c:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000

080028c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028c6:	4b2d      	ldr	r3, [pc, #180]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d00b      	beq.n	80028ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d825      	bhi.n	8002928 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d008      	beq.n	80028f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d11f      	bne.n	8002928 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028ea:	613b      	str	r3, [r7, #16]
    break;
 80028ec:	e01f      	b.n	800292e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028ee:	4b25      	ldr	r3, [pc, #148]	@ (8002984 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028f0:	613b      	str	r3, [r7, #16]
    break;
 80028f2:	e01c      	b.n	800292e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f4:	4b21      	ldr	r3, [pc, #132]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002900:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e005      	b.n	800291c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002910:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800291c:	4a1a      	ldr	r2, [pc, #104]	@ (8002988 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	613b      	str	r3, [r7, #16]
    break;
 8002926:	e002      	b.n	800292e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
    break;
 800292c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	3301      	adds	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	fb03 f202 	mul.w	r2, r3, r2
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0e5b      	lsrs	r3, r3, #25
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800296e:	683b      	ldr	r3, [r7, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40021000 	.word	0x40021000
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08005c20 	.word	0x08005c20

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002994:	2300      	movs	r3, #0
 8002996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002998:	2300      	movs	r3, #0
 800299a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d040      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ac:	2b80      	cmp	r3, #128	@ 0x80
 80029ae:	d02a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029b0:	2b80      	cmp	r3, #128	@ 0x80
 80029b2:	d825      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029b4:	2b60      	cmp	r3, #96	@ 0x60
 80029b6:	d026      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029b8:	2b60      	cmp	r3, #96	@ 0x60
 80029ba:	d821      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029bc:	2b40      	cmp	r3, #64	@ 0x40
 80029be:	d006      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029c0:	2b40      	cmp	r3, #64	@ 0x40
 80029c2:	d81d      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d010      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029cc:	e018      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ce:	4b89      	ldr	r3, [pc, #548]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a88      	ldr	r2, [pc, #544]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029da:	e015      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fb02 	bl	8002fec <RCCEx_PLLSAI1_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3320      	adds	r3, #32
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fbed 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	74fb      	strb	r3, [r7, #19]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0e:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a14:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1c:	4975      	ldr	r1, [pc, #468]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002a24:	e001      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d047      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d030      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a44:	d82a      	bhi.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a4a:	d02a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a50:	d824      	bhi.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a5c:	d81e      	bhi.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a66:	d010      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a68:	e018      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a6a:	4b62      	ldr	r3, [pc, #392]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a61      	ldr	r2, [pc, #388]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a76:	e015      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fab4 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a88:	e00c      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fb9f 	bl	80031d4 <RCCEx_PLLSAI2_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a9a:	e003      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	74fb      	strb	r3, [r7, #19]
      break;
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aaa:	4b52      	ldr	r3, [pc, #328]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab8:	494e      	ldr	r1, [pc, #312]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002ac0:	e001      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 809f 	beq.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad8:	4b46      	ldr	r3, [pc, #280]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	4a40      	ldr	r2, [pc, #256]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b16:	f7fe fb89 	bl	800122c <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe fb85 	bl	800122c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d902      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	74fb      	strb	r3, [r7, #19]
        break;
 8002b30:	e005      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b32:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d15b      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b44:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01f      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d019      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b62:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8e:	4a19      	ldr	r2, [pc, #100]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d016      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fb44 	bl	800122c <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb40 	bl	800122c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	74fb      	strb	r3, [r7, #19]
            break;
 8002bbe:	e006      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ec      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	4903      	ldr	r1, [pc, #12]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c00:	7c7b      	ldrb	r3, [r7, #17]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4ba0      	ldr	r3, [pc, #640]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	4a9f      	ldr	r2, [pc, #636]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1e:	4b9a      	ldr	r3, [pc, #616]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	4996      	ldr	r1, [pc, #600]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c40:	4b91      	ldr	r3, [pc, #580]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f023 020c 	bic.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	498e      	ldr	r1, [pc, #568]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c62:	4b89      	ldr	r3, [pc, #548]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c70:	4985      	ldr	r1, [pc, #532]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c84:	4b80      	ldr	r3, [pc, #512]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c92:	497d      	ldr	r1, [pc, #500]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca6:	4b78      	ldr	r3, [pc, #480]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb4:	4974      	ldr	r1, [pc, #464]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd6:	496c      	ldr	r1, [pc, #432]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cea:	4b67      	ldr	r3, [pc, #412]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf8:	4963      	ldr	r1, [pc, #396]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1a:	495b      	ldr	r1, [pc, #364]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2e:	4b56      	ldr	r3, [pc, #344]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	4952      	ldr	r1, [pc, #328]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d50:	4b4d      	ldr	r3, [pc, #308]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	494a      	ldr	r1, [pc, #296]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d72:	4b45      	ldr	r3, [pc, #276]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	4941      	ldr	r1, [pc, #260]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d94:	4b3c      	ldr	r3, [pc, #240]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da2:	4939      	ldr	r1, [pc, #228]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d028      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db6:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc4:	4930      	ldr	r1, [pc, #192]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a2b      	ldr	r2, [pc, #172]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de0:	60d3      	str	r3, [r2, #12]
 8002de2:	e011      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f8f9 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d04d      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e1c:	d108      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e2e:	e012      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e36:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e4e:	490e      	ldr	r1, [pc, #56]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e020      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e76:	d109      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e78:	4b03      	ldr	r3, [pc, #12]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a02      	ldr	r2, [pc, #8]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	60d3      	str	r3, [r2, #12]
 8002e84:	e014      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f8a5 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d028      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eca:	4947      	ldr	r1, [pc, #284]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eda:	d106      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002edc:	4b42      	ldr	r3, [pc, #264]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a41      	ldr	r2, [pc, #260]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	60d3      	str	r3, [r2, #12]
 8002ee8:	e011      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f876 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01e      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f1a:	4b33      	ldr	r3, [pc, #204]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f2a:	492f      	ldr	r1, [pc, #188]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f851 	bl	8002fec <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f6a:	f023 0204 	bic.w	r2, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f74:	491c      	ldr	r1, [pc, #112]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f88:	4b17      	ldr	r3, [pc, #92]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f8e:	f023 0218 	bic.w	r2, r3, #24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f98:	4913      	ldr	r1, [pc, #76]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002fac:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fbc:	490a      	ldr	r1, [pc, #40]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd0:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000

08002fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ffa:	4b72      	ldr	r3, [pc, #456]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003006:	4b6f      	ldr	r3, [pc, #444]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d103      	bne.n	800301e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
       ||
 800301a:	2b00      	cmp	r3, #0
 800301c:	d142      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e03f      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d018      	beq.n	800305e <RCCEx_PLLSAI1_Config+0x72>
 800302c:	2b03      	cmp	r3, #3
 800302e:	d825      	bhi.n	800307c <RCCEx_PLLSAI1_Config+0x90>
 8003030:	2b01      	cmp	r3, #1
 8003032:	d002      	beq.n	800303a <RCCEx_PLLSAI1_Config+0x4e>
 8003034:	2b02      	cmp	r3, #2
 8003036:	d009      	beq.n	800304c <RCCEx_PLLSAI1_Config+0x60>
 8003038:	e020      	b.n	800307c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800303a:	4b62      	ldr	r3, [pc, #392]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11d      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304a:	e01a      	b.n	8003082 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800304c:	4b5d      	ldr	r3, [pc, #372]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e013      	b.n	8003086 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800305e:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800306a:	4b56      	ldr	r3, [pc, #344]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800307a:	e006      	b.n	800308a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e004      	b.n	800308c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003082:	bf00      	nop
 8003084:	e002      	b.n	800308c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800308a:	bf00      	nop
    }

    if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003092:	4b4c      	ldr	r3, [pc, #304]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4949      	ldr	r1, [pc, #292]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 8086 	bne.w	80031b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ac:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a44      	ldr	r2, [pc, #272]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fe f8b8 	bl	800122c <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030be:	e009      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c0:	f7fe f8b4 	bl	800122c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	73fb      	strb	r3, [r7, #15]
        break;
 80030d2:	e005      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030d4:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ef      	bne.n	80030c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d168      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d113      	bne.n	8003114 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ec:	4b35      	ldr	r3, [pc, #212]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	4b35      	ldr	r3, [pc, #212]	@ (80031c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	0211      	lsls	r1, r2, #8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68d2      	ldr	r2, [r2, #12]
 80030fe:	06d2      	lsls	r2, r2, #27
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	3a01      	subs	r2, #1
 8003108:	0112      	lsls	r2, r2, #4
 800310a:	430a      	orrs	r2, r1
 800310c:	492d      	ldr	r1, [pc, #180]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	610b      	str	r3, [r1, #16]
 8003112:	e02d      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d115      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	0211      	lsls	r1, r2, #8
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6912      	ldr	r2, [r2, #16]
 800312c:	0852      	lsrs	r2, r2, #1
 800312e:	3a01      	subs	r2, #1
 8003130:	0552      	lsls	r2, r2, #21
 8003132:	4311      	orrs	r1, r2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	3a01      	subs	r2, #1
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	430a      	orrs	r2, r1
 800313e:	4921      	ldr	r1, [pc, #132]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	610b      	str	r3, [r1, #16]
 8003144:	e014      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	4b21      	ldr	r3, [pc, #132]	@ (80031d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6892      	ldr	r2, [r2, #8]
 8003152:	0211      	lsls	r1, r2, #8
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6952      	ldr	r2, [r2, #20]
 8003158:	0852      	lsrs	r2, r2, #1
 800315a:	3a01      	subs	r2, #1
 800315c:	0652      	lsls	r2, r2, #25
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6852      	ldr	r2, [r2, #4]
 8003164:	3a01      	subs	r2, #1
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	430a      	orrs	r2, r1
 800316a:	4916      	ldr	r1, [pc, #88]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800317a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe f856 	bl	800122c <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003182:	e009      	b.n	8003198 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003184:	f7fe f852 	bl	800122c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	73fb      	strb	r3, [r7, #15]
          break;
 8003196:	e005      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4904      	ldr	r1, [pc, #16]	@ (80031c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	07ff800f 	.word	0x07ff800f
 80031cc:	ff9f800f 	.word	0xff9f800f
 80031d0:	f9ff800f 	.word	0xf9ff800f

080031d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031e2:	4b72      	ldr	r3, [pc, #456]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00e      	beq.n	800320c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ee:	4b6f      	ldr	r3, [pc, #444]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
       ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d142      	bne.n	800328c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e03f      	b.n	800328c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d018      	beq.n	8003246 <RCCEx_PLLSAI2_Config+0x72>
 8003214:	2b03      	cmp	r3, #3
 8003216:	d825      	bhi.n	8003264 <RCCEx_PLLSAI2_Config+0x90>
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <RCCEx_PLLSAI2_Config+0x4e>
 800321c:	2b02      	cmp	r3, #2
 800321e:	d009      	beq.n	8003234 <RCCEx_PLLSAI2_Config+0x60>
 8003220:	e020      	b.n	8003264 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003222:	4b62      	ldr	r3, [pc, #392]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11d      	bne.n	800326a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003232:	e01a      	b.n	800326a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003234:	4b5d      	ldr	r3, [pc, #372]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e013      	b.n	800326e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003246:	4b59      	ldr	r3, [pc, #356]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003252:	4b56      	ldr	r3, [pc, #344]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003262:	e006      	b.n	8003272 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e004      	b.n	8003274 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800326a:	bf00      	nop
 800326c:	e002      	b.n	8003274 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003272:	bf00      	nop
    }

    if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800327a:	4b4c      	ldr	r3, [pc, #304]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4949      	ldr	r1, [pc, #292]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 8086 	bne.w	80033a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003294:	4b45      	ldr	r3, [pc, #276]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a44      	ldr	r2, [pc, #272]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fd ffc4 	bl	800122c <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a6:	e009      	b.n	80032bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032a8:	f7fd ffc0 	bl	800122c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	73fb      	strb	r3, [r7, #15]
        break;
 80032ba:	e005      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032bc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ef      	bne.n	80032a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d168      	bne.n	80033a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d113      	bne.n	80032fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032d4:	4b35      	ldr	r3, [pc, #212]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	4b35      	ldr	r3, [pc, #212]	@ (80033b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6892      	ldr	r2, [r2, #8]
 80032e0:	0211      	lsls	r1, r2, #8
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	06d2      	lsls	r2, r2, #27
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6852      	ldr	r2, [r2, #4]
 80032ee:	3a01      	subs	r2, #1
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	430a      	orrs	r2, r1
 80032f4:	492d      	ldr	r1, [pc, #180]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	614b      	str	r3, [r1, #20]
 80032fa:	e02d      	b.n	8003358 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d115      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003302:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	0211      	lsls	r1, r2, #8
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6912      	ldr	r2, [r2, #16]
 8003314:	0852      	lsrs	r2, r2, #1
 8003316:	3a01      	subs	r2, #1
 8003318:	0552      	lsls	r2, r2, #21
 800331a:	4311      	orrs	r1, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6852      	ldr	r2, [r2, #4]
 8003320:	3a01      	subs	r2, #1
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	430a      	orrs	r2, r1
 8003326:	4921      	ldr	r1, [pc, #132]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	614b      	str	r3, [r1, #20]
 800332c:	e014      	b.n	8003358 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332e:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	0211      	lsls	r1, r2, #8
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6952      	ldr	r2, [r2, #20]
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0652      	lsls	r2, r2, #25
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	3a01      	subs	r2, #1
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	430a      	orrs	r2, r1
 8003352:	4916      	ldr	r1, [pc, #88]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003358:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fd ff62 	bl	800122c <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800336a:	e009      	b.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800336c:	f7fd ff5e 	bl	800122c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	73fb      	strb	r3, [r7, #15]
          break;
 800337e:	e005      	b.n	800338c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003380:	4b0a      	ldr	r3, [pc, #40]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4904      	ldr	r1, [pc, #16]	@ (80033ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	07ff800f 	.word	0x07ff800f
 80033b4:	ff9f800f 	.word	0xff9f800f
 80033b8:	f9ff800f 	.word	0xf9ff800f

080033bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e095      	b.n	80034fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033de:	d009      	beq.n	80033f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
 80033e6:	e005      	b.n	80033f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fd34 	bl	8000e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800342a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003434:	d902      	bls.n	800343c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e002      	b.n	8003442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800343c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800344a:	d007      	beq.n	800345c <HAL_SPI_Init+0xa0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003454:	d002      	beq.n	800345c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349e:	ea42 0103 	orr.w	r1, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	f003 0204 	and.w	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e123      	b.n	800376a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800352a:	d112      	bne.n	8003552 <HAL_SPI_Receive+0x50>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10e      	bne.n	8003552 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2204      	movs	r2, #4
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f912 	bl	8003772 <HAL_SPI_TransmitReceive>
 800354e:	4603      	mov	r3, r0
 8003550:	e10b      	b.n	800376a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003552:	f7fd fe6b 	bl	800122c <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_SPI_Receive+0x62>
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e100      	b.n	800376a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_SPI_Receive+0x74>
 8003572:	2302      	movs	r3, #2
 8003574:	e0f9      	b.n	800376a <HAL_SPI_Receive+0x268>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2204      	movs	r2, #4
 8003582:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035c8:	d908      	bls.n	80035dc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	e007      	b.n	80035ec <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f4:	d10f      	bne.n	8003616 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d007      	beq.n	8003634 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800363c:	d875      	bhi.n	800372a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800363e:	e037      	b.n	80036b0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d117      	bne.n	800367e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f103 020c 	add.w	r2, r3, #12
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800367c:	e018      	b.n	80036b0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800367e:	f7fd fdd5 	bl	800122c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d803      	bhi.n	8003696 <HAL_SPI_Receive+0x194>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d102      	bne.n	800369c <HAL_SPI_Receive+0x19a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e05c      	b.n	800376a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1c1      	bne.n	8003640 <HAL_SPI_Receive+0x13e>
 80036bc:	e03b      	b.n	8003736 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d115      	bne.n	80036f8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	b292      	uxth	r2, r2
 80036d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036f6:	e018      	b.n	800372a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f8:	f7fd fd98 	bl	800122c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d803      	bhi.n	8003710 <HAL_SPI_Receive+0x20e>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d102      	bne.n	8003716 <HAL_SPI_Receive+0x214>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e01f      	b.n	800376a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1c3      	bne.n	80036be <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb56 	bl	8003dec <SPI_EndRxTransaction>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08a      	sub	sp, #40	@ 0x28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003784:	f7fd fd52 	bl	800122c <HAL_GetTick>
 8003788:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003790:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00c      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x4e>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ac:	d106      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x4a>
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d001      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
 80037be:	e1f3      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_SPI_TransmitReceive+0x60>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_TransmitReceive+0x60>
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1e8      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_SPI_TransmitReceive+0x72>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e1e1      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d003      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2205      	movs	r2, #5
 80037fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	887a      	ldrh	r2, [r7, #2]
 8003826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003842:	d802      	bhi.n	800384a <HAL_SPI_TransmitReceive+0xd8>
 8003844:	8abb      	ldrh	r3, [r7, #20]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d908      	bls.n	800385c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e007      	b.n	800386c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d007      	beq.n	800388a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003892:	f240 8083 	bls.w	800399c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x132>
 800389e:	8afb      	ldrh	r3, [r7, #22]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d16f      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c8:	e05c      	b.n	8003984 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d11b      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x19e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x19e>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d113      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11c      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x1e6>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	b292      	uxth	r2, r2
 8003936:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003958:	f7fd fc68 	bl	800122c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003964:	429a      	cmp	r2, r3
 8003966:	d80d      	bhi.n	8003984 <HAL_SPI_TransmitReceive+0x212>
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d009      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e111      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d19d      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x158>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d197      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x158>
 800399a:	e0e5      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x23a>
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 80d1 	bne.w	8003b4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d912      	bls.n	80039dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	881a      	ldrh	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b02      	subs	r3, #2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039da:	e0b8      	b.n	8003b4e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a02:	e0a4      	b.n	8003b4e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d134      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x30a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02f      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x30a>
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d12c      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d912      	bls.n	8003a52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	881a      	ldrh	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b02      	subs	r3, #2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a50:	e012      	b.n	8003a78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d148      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x3aa>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d042      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d923      	bls.n	8003aea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	b292      	uxth	r2, r2
 8003aae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	1c9a      	adds	r2, r3, #2
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b02      	subs	r3, #2
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d81f      	bhi.n	8003b18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e016      	b.n	8003b18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f103 020c 	add.w	r2, r3, #12
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b1c:	f7fd fb86 	bl	800122c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d803      	bhi.n	8003b34 <HAL_SPI_TransmitReceive+0x3c2>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x3c8>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e02c      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f af55 	bne.w	8003a04 <HAL_SPI_TransmitReceive+0x292>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f47f af4e 	bne.w	8003a04 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f995 	bl	8003e9c <SPI_EndRxTxTransaction>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00e      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3728      	adds	r7, #40	@ 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc0:	f7fd fb34 	bl	800122c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd0:	f7fd fb2c 	bl	800122c <HAL_GetTick>
 8003bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	015b      	lsls	r3, r3, #5
 8003bdc:	0d1b      	lsrs	r3, r3, #20
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be6:	e054      	b.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d050      	beq.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf0:	f7fd fb1c 	bl	800122c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d902      	bls.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d13d      	bne.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c1e:	d111      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d004      	beq.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d107      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4c:	d10f      	bne.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e017      	b.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d19b      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20040000 	.word	0x20040000

08003cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cd2:	f7fd faab 	bl	800122c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ce2:	f7fd faa3 	bl	800122c <HAL_GetTick>
 8003ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00da      	lsls	r2, r3, #3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	0d1b      	lsrs	r3, r3, #20
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d08:	e060      	b.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d10:	d107      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d050      	beq.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2a:	f7fd fa7f 	bl	800122c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13d      	bne.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d58:	d111      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d62:	d004      	beq.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	d107      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	d10f      	bne.n	8003da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e010      	b.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d196      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20040000 	.word	0x20040000

08003dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e00:	d111      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0a:	d004      	beq.n	8003e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e14:	d107      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff febd 	bl	8003bb0 <SPI_WaitFlagStateUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e023      	b.n	8003e94 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e54:	d11d      	bne.n	8003e92 <SPI_EndRxTransaction+0xa6>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5e:	d004      	beq.n	8003e6a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e68:	d113      	bne.n	8003e92 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff22 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e000      	b.n	8003e94 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff03 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e027      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2180      	movs	r1, #128	@ 0x80
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fe68 	bl	8003bb0 <SPI_WaitFlagStateUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e014      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fedc 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e000      	b.n	8003f20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e042      	b.n	8003fc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc ff35 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	@ 0x24
 8003f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fbb2 	bl	80046dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8b3 	bl	80040e4 <UART_SetConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e01b      	b.n	8003fc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fc31 	bl	8004820 <UART_CheckIdleState>
 8003fbe:	4603      	mov	r3, r0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	@ 0x28
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d17b      	bne.n	80040da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_Transmit+0x26>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e074      	b.n	80040dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	@ 0x21
 8003ffe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd f913 	bl	800122c <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004020:	d108      	bne.n	8004034 <HAL_UART_Transmit+0x6c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e003      	b.n	800403c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800403c:	e030      	b.n	80040a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	@ 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fc93 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e03d      	b.n	80040dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004072:	b292      	uxth	r2, r2
 8004074:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3302      	adds	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e007      	b.n	800408e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1c8      	bne.n	800403e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2140      	movs	r1, #64	@ 0x40
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fc5c 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e006      	b.n	80040dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e8:	b08c      	sub	sp, #48	@ 0x30
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4313      	orrs	r3, r2
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4baa      	ldr	r3, [pc, #680]	@ (80043bc <UART_SetConfig+0x2d8>)
 8004114:	4013      	ands	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800411c:	430b      	orrs	r3, r1
 800411e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a9f      	ldr	r2, [pc, #636]	@ (80043c0 <UART_SetConfig+0x2dc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800414c:	4313      	orrs	r3, r2
 800414e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800415a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004164:	430b      	orrs	r3, r1
 8004166:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	f023 010f 	bic.w	r1, r3, #15
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a90      	ldr	r2, [pc, #576]	@ (80043c4 <UART_SetConfig+0x2e0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d125      	bne.n	80041d4 <UART_SetConfig+0xf0>
 8004188:	4b8f      	ldr	r3, [pc, #572]	@ (80043c8 <UART_SetConfig+0x2e4>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d81a      	bhi.n	80041cc <UART_SetConfig+0xe8>
 8004196:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <UART_SetConfig+0xb8>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b2:	e116      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80041b4:	2302      	movs	r3, #2
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ba:	e112      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80041bc:	2304      	movs	r3, #4
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c2:	e10e      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80041c4:	2308      	movs	r3, #8
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ca:	e10a      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80041cc:	2310      	movs	r3, #16
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e106      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a7c      	ldr	r2, [pc, #496]	@ (80043cc <UART_SetConfig+0x2e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d138      	bne.n	8004250 <UART_SetConfig+0x16c>
 80041de:	4b7a      	ldr	r3, [pc, #488]	@ (80043c8 <UART_SetConfig+0x2e4>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d82d      	bhi.n	8004248 <UART_SetConfig+0x164>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <UART_SetConfig+0x110>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004229 	.word	0x08004229
 80041f8:	08004249 	.word	0x08004249
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004249 	.word	0x08004249
 8004204:	08004239 	.word	0x08004239
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
 8004214:	08004231 	.word	0x08004231
 8004218:	08004249 	.word	0x08004249
 800421c:	08004249 	.word	0x08004249
 8004220:	08004249 	.word	0x08004249
 8004224:	08004241 	.word	0x08004241
 8004228:	2300      	movs	r3, #0
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e0d8      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e0d4      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e0d0      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e0cc      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424e:	e0c8      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5e      	ldr	r2, [pc, #376]	@ (80043d0 <UART_SetConfig+0x2ec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d125      	bne.n	80042a6 <UART_SetConfig+0x1c2>
 800425a:	4b5b      	ldr	r3, [pc, #364]	@ (80043c8 <UART_SetConfig+0x2e4>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004264:	2b30      	cmp	r3, #48	@ 0x30
 8004266:	d016      	beq.n	8004296 <UART_SetConfig+0x1b2>
 8004268:	2b30      	cmp	r3, #48	@ 0x30
 800426a:	d818      	bhi.n	800429e <UART_SetConfig+0x1ba>
 800426c:	2b20      	cmp	r3, #32
 800426e:	d00a      	beq.n	8004286 <UART_SetConfig+0x1a2>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d814      	bhi.n	800429e <UART_SetConfig+0x1ba>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <UART_SetConfig+0x19a>
 8004278:	2b10      	cmp	r3, #16
 800427a:	d008      	beq.n	800428e <UART_SetConfig+0x1aa>
 800427c:	e00f      	b.n	800429e <UART_SetConfig+0x1ba>
 800427e:	2300      	movs	r3, #0
 8004280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004284:	e0ad      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004286:	2302      	movs	r3, #2
 8004288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428c:	e0a9      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800428e:	2304      	movs	r3, #4
 8004290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004294:	e0a5      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004296:	2308      	movs	r3, #8
 8004298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429c:	e0a1      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800429e:	2310      	movs	r3, #16
 80042a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a4:	e09d      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a4a      	ldr	r2, [pc, #296]	@ (80043d4 <UART_SetConfig+0x2f0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d125      	bne.n	80042fc <UART_SetConfig+0x218>
 80042b0:	4b45      	ldr	r3, [pc, #276]	@ (80043c8 <UART_SetConfig+0x2e4>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80042bc:	d016      	beq.n	80042ec <UART_SetConfig+0x208>
 80042be:	2bc0      	cmp	r3, #192	@ 0xc0
 80042c0:	d818      	bhi.n	80042f4 <UART_SetConfig+0x210>
 80042c2:	2b80      	cmp	r3, #128	@ 0x80
 80042c4:	d00a      	beq.n	80042dc <UART_SetConfig+0x1f8>
 80042c6:	2b80      	cmp	r3, #128	@ 0x80
 80042c8:	d814      	bhi.n	80042f4 <UART_SetConfig+0x210>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <UART_SetConfig+0x1f0>
 80042ce:	2b40      	cmp	r3, #64	@ 0x40
 80042d0:	d008      	beq.n	80042e4 <UART_SetConfig+0x200>
 80042d2:	e00f      	b.n	80042f4 <UART_SetConfig+0x210>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042da:	e082      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042dc:	2302      	movs	r3, #2
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e2:	e07e      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042e4:	2304      	movs	r3, #4
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ea:	e07a      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042ec:	2308      	movs	r3, #8
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e076      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042f4:	2310      	movs	r3, #16
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e072      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a35      	ldr	r2, [pc, #212]	@ (80043d8 <UART_SetConfig+0x2f4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d12a      	bne.n	800435c <UART_SetConfig+0x278>
 8004306:	4b30      	ldr	r3, [pc, #192]	@ (80043c8 <UART_SetConfig+0x2e4>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004314:	d01a      	beq.n	800434c <UART_SetConfig+0x268>
 8004316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431a:	d81b      	bhi.n	8004354 <UART_SetConfig+0x270>
 800431c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004320:	d00c      	beq.n	800433c <UART_SetConfig+0x258>
 8004322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004326:	d815      	bhi.n	8004354 <UART_SetConfig+0x270>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <UART_SetConfig+0x250>
 800432c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004330:	d008      	beq.n	8004344 <UART_SetConfig+0x260>
 8004332:	e00f      	b.n	8004354 <UART_SetConfig+0x270>
 8004334:	2300      	movs	r3, #0
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433a:	e052      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800433c:	2302      	movs	r3, #2
 800433e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004342:	e04e      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434a:	e04a      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004352:	e046      	b.n	80043e2 <UART_SetConfig+0x2fe>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e042      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <UART_SetConfig+0x2dc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d13a      	bne.n	80043dc <UART_SetConfig+0x2f8>
 8004366:	4b18      	ldr	r3, [pc, #96]	@ (80043c8 <UART_SetConfig+0x2e4>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004374:	d01a      	beq.n	80043ac <UART_SetConfig+0x2c8>
 8004376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800437a:	d81b      	bhi.n	80043b4 <UART_SetConfig+0x2d0>
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004380:	d00c      	beq.n	800439c <UART_SetConfig+0x2b8>
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004386:	d815      	bhi.n	80043b4 <UART_SetConfig+0x2d0>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x2b0>
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004390:	d008      	beq.n	80043a4 <UART_SetConfig+0x2c0>
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x2d0>
 8004394:	2300      	movs	r3, #0
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439a:	e022      	b.n	80043e2 <UART_SetConfig+0x2fe>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a2:	e01e      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043aa:	e01a      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b2:	e016      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ba:	e012      	b.n	80043e2 <UART_SetConfig+0x2fe>
 80043bc:	cfff69f3 	.word	0xcfff69f3
 80043c0:	40008000 	.word	0x40008000
 80043c4:	40013800 	.word	0x40013800
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40004400 	.word	0x40004400
 80043d0:	40004800 	.word	0x40004800
 80043d4:	40004c00 	.word	0x40004c00
 80043d8:	40005000 	.word	0x40005000
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4aae      	ldr	r2, [pc, #696]	@ (80046a0 <UART_SetConfig+0x5bc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 8097 	bne.w	800451c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d823      	bhi.n	800443e <UART_SetConfig+0x35a>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <UART_SetConfig+0x318>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004421 	.word	0x08004421
 8004400:	0800443f 	.word	0x0800443f
 8004404:	08004429 	.word	0x08004429
 8004408:	0800443f 	.word	0x0800443f
 800440c:	0800442f 	.word	0x0800442f
 8004410:	0800443f 	.word	0x0800443f
 8004414:	0800443f 	.word	0x0800443f
 8004418:	0800443f 	.word	0x0800443f
 800441c:	08004437 	.word	0x08004437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004420:	f7fe f9c8 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004426:	e010      	b.n	800444a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004428:	4b9e      	ldr	r3, [pc, #632]	@ (80046a4 <UART_SetConfig+0x5c0>)
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800442c:	e00d      	b.n	800444a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442e:	f7fe f929 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8004432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004434:	e009      	b.n	800444a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800443c:	e005      	b.n	800444a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8130 	beq.w	80046b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	4a94      	ldr	r2, [pc, #592]	@ (80046a8 <UART_SetConfig+0x5c4>)
 8004458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	fbb3 f3f2 	udiv	r3, r3, r2
 8004464:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	429a      	cmp	r2, r3
 8004474:	d305      	bcc.n	8004482 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	429a      	cmp	r2, r3
 8004480:	d903      	bls.n	800448a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004488:	e113      	b.n	80046b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2200      	movs	r2, #0
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	60fa      	str	r2, [r7, #12]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	4a84      	ldr	r2, [pc, #528]	@ (80046a8 <UART_SetConfig+0x5c4>)
 8004498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800449c:	b29b      	uxth	r3, r3
 800449e:	2200      	movs	r2, #0
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ac:	f7fb ff00 	bl	80002b0 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	020b      	lsls	r3, r1, #8
 80044c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044c6:	0202      	lsls	r2, r0, #8
 80044c8:	6979      	ldr	r1, [r7, #20]
 80044ca:	6849      	ldr	r1, [r1, #4]
 80044cc:	0849      	lsrs	r1, r1, #1
 80044ce:	2000      	movs	r0, #0
 80044d0:	460c      	mov	r4, r1
 80044d2:	4605      	mov	r5, r0
 80044d4:	eb12 0804 	adds.w	r8, r2, r4
 80044d8:	eb43 0905 	adc.w	r9, r3, r5
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	469a      	mov	sl, r3
 80044e4:	4693      	mov	fp, r2
 80044e6:	4652      	mov	r2, sl
 80044e8:	465b      	mov	r3, fp
 80044ea:	4640      	mov	r0, r8
 80044ec:	4649      	mov	r1, r9
 80044ee:	f7fb fedf 	bl	80002b0 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4613      	mov	r3, r2
 80044f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004500:	d308      	bcc.n	8004514 <UART_SetConfig+0x430>
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004508:	d204      	bcs.n	8004514 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	e0ce      	b.n	80046b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800451a:	e0ca      	b.n	80046b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004524:	d166      	bne.n	80045f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004526:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800452a:	2b08      	cmp	r3, #8
 800452c:	d827      	bhi.n	800457e <UART_SetConfig+0x49a>
 800452e:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <UART_SetConfig+0x450>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004559 	.word	0x08004559
 8004538:	08004561 	.word	0x08004561
 800453c:	08004569 	.word	0x08004569
 8004540:	0800457f 	.word	0x0800457f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800457f 	.word	0x0800457f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe f92c 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 800455c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800455e:	e014      	b.n	800458a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7fe f93e 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8004564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b4e      	ldr	r3, [pc, #312]	@ (80046a4 <UART_SetConfig+0x5c0>)
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe f889 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8004572:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8090 	beq.w	80046b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	4a44      	ldr	r2, [pc, #272]	@ (80046a8 <UART_SetConfig+0x5c4>)
 8004598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459c:	461a      	mov	r2, r3
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a4:	005a      	lsls	r2, r3, #1
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	441a      	add	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d916      	bls.n	80045ec <UART_SetConfig+0x508>
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c4:	d212      	bcs.n	80045ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f023 030f 	bic.w	r3, r3, #15
 80045ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	b29a      	uxth	r2, r3
 80045dc:	8bfb      	ldrh	r3, [r7, #30]
 80045de:	4313      	orrs	r3, r2
 80045e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	8bfa      	ldrh	r2, [r7, #30]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e062      	b.n	80046b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045f2:	e05e      	b.n	80046b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d828      	bhi.n	800464e <UART_SetConfig+0x56a>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x520>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800464f 	.word	0x0800464f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe f8c4 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 800462c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800462e:	e014      	b.n	800465a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7fe f8d6 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <UART_SetConfig+0x5c0>)
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe f821 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8004642:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004658:	bf00      	nop
    }

    if (pclk != 0U)
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	4a10      	ldr	r2, [pc, #64]	@ (80046a8 <UART_SetConfig+0x5c4>)
 8004666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800466a:	461a      	mov	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	441a      	add	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	2b0f      	cmp	r3, #15
 8004688:	d910      	bls.n	80046ac <UART_SetConfig+0x5c8>
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d20c      	bcs.n	80046ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	b29a      	uxth	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e009      	b.n	80046b2 <UART_SetConfig+0x5ce>
 800469e:	bf00      	nop
 80046a0:	40008000 	.word	0x40008000
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	08005c50 	.word	0x08005c50
      }
      else
      {
        ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2201      	movs	r2, #1
 80046be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2200      	movs	r2, #0
 80046c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2200      	movs	r2, #0
 80046cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3730      	adds	r7, #48	@ 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01a      	beq.n	80047f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047da:	d10a      	bne.n	80047f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b098      	sub	sp, #96	@ 0x60
 8004824:	af02      	add	r7, sp, #8
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004830:	f7fc fcfc 	bl	800122c <HAL_GetTick>
 8004834:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d12f      	bne.n	80048a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004844:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f88e 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d022      	beq.n	80048a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004872:	653b      	str	r3, [r7, #80]	@ 0x50
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800487c:	647b      	str	r3, [r7, #68]	@ 0x44
 800487e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800488a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e6      	bne.n	800485e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e063      	b.n	800496c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d149      	bne.n	8004946 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ba:	2200      	movs	r2, #0
 80048bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f857 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d03c      	beq.n	8004946 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	623b      	str	r3, [r7, #32]
   return(result);
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e6      	bne.n	80048cc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	60fb      	str	r3, [r7, #12]
   return(result);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800491e:	61fa      	str	r2, [r7, #28]
 8004920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	69b9      	ldr	r1, [r7, #24]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	617b      	str	r3, [r7, #20]
   return(result);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e012      	b.n	800496c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3758      	adds	r7, #88	@ 0x58
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004984:	e04f      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d04b      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fc fc4d 	bl	800122c <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e04e      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d037      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d034      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d031      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d110      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2208      	movs	r2, #8
 80049d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f838 	bl	8004a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2208      	movs	r2, #8
 80049e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e029      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a00:	d111      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f81e 	bl	8004a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0a0      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b095      	sub	sp, #84	@ 0x54
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	f023 0301 	bic.w	r3, r3, #1
 8004aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e3      	bne.n	8004a88 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d118      	bne.n	8004afa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 0310 	bic.w	r3, r3, #16
 8004adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6979      	ldr	r1, [r7, #20]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	613b      	str	r3, [r7, #16]
   return(result);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b0e:	bf00      	nop
 8004b10:	3754      	adds	r7, #84	@ 0x54
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e027      	b.n	8004b80 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	@ 0x24
 8004b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e02d      	b.n	8004c00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	@ 0x24
 8004bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f84f 	bl	8004c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e02d      	b.n	8004c7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2224      	movs	r2, #36	@ 0x24
 8004c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f811 	bl	8004c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ca4:	e031      	b.n	8004d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004caa:	2308      	movs	r3, #8
 8004cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0e5b      	lsrs	r3, r3, #25
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	0f5b      	lsrs	r3, r3, #29
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cce:	7bbb      	ldrb	r3, [r7, #14]
 8004cd0:	7b3a      	ldrb	r2, [r7, #12]
 8004cd2:	4911      	ldr	r1, [pc, #68]	@ (8004d18 <UARTEx_SetNbDataToProcess+0x94>)
 8004cd4:	5c8a      	ldrb	r2, [r1, r2]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cda:	7b3a      	ldrb	r2, [r7, #12]
 8004cdc:	490f      	ldr	r1, [pc, #60]	@ (8004d1c <UARTEx_SetNbDataToProcess+0x98>)
 8004cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	7b7a      	ldrb	r2, [r7, #13]
 8004cf0:	4909      	ldr	r1, [pc, #36]	@ (8004d18 <UARTEx_SetNbDataToProcess+0x94>)
 8004cf2:	5c8a      	ldrb	r2, [r1, r2]
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cf8:	7b7a      	ldrb	r2, [r7, #13]
 8004cfa:	4908      	ldr	r1, [pc, #32]	@ (8004d1c <UARTEx_SetNbDataToProcess+0x98>)
 8004cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	08005c68 	.word	0x08005c68
 8004d1c:	08005c70 	.word	0x08005c70

08004d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d20:	b084      	sub	sp, #16
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	f107 001c 	add.w	r0, r7, #28
 8004d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa68 	bl	8005214 <USB_CoreReset>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004d48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d5c:	e005      	b.n	8004d6a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d76:	b004      	add	sp, #16
 8004d78:	4770      	bx	lr

08004d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d115      	bne.n	8004dea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dca:	200a      	movs	r0, #10
 8004dcc:	f7fc fa3a 	bl	8001244 <HAL_Delay>
      ms += 10U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	330a      	adds	r3, #10
 8004dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fa0e 	bl	80051f8 <USB_GetMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d01e      	beq.n	8004e20 <USB_SetCurrentMode+0x84>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004de6:	d9f0      	bls.n	8004dca <USB_SetCurrentMode+0x2e>
 8004de8:	e01a      	b.n	8004e20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d115      	bne.n	8004e1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dfc:	200a      	movs	r0, #10
 8004dfe:	f7fc fa21 	bl	8001244 <HAL_Delay>
      ms += 10U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	330a      	adds	r3, #10
 8004e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9f5 	bl	80051f8 <USB_GetMode>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <USB_SetCurrentMode+0x84>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e18:	d9f0      	bls.n	8004dfc <USB_SetCurrentMode+0x60>
 8004e1a:	e001      	b.n	8004e20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e005      	b.n	8004e2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e24:	d101      	bne.n	8004e2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e34:	b084      	sub	sp, #16
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e009      	b.n	8004e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3340      	adds	r3, #64	@ 0x40
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0e      	cmp	r3, #14
 8004e6c:	d9f2      	bls.n	8004e54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d11c      	bne.n	8004eb0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e005      	b.n	8004ebc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ec8:	2103      	movs	r1, #3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f95a 	bl	8005184 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8f6 	bl	80050c4 <USB_FlushTxFifo>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f920 	bl	8005128 <USB_FlushRxFifo>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f04:	461a      	mov	r2, r3
 8004f06:	2300      	movs	r3, #0
 8004f08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e043      	b.n	8004fa4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f32:	d118      	bne.n	8004f66 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e013      	b.n	8004f78 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	e008      	b.n	8004f78 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f72:	461a      	mov	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	461a      	mov	r2, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f96:	461a      	mov	r2, r3
 8004f98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fa8:	461a      	mov	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d3b5      	bcc.n	8004f1c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e043      	b.n	800503e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fcc:	d118      	bne.n	8005000 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e013      	b.n	8005012 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e008      	b.n	8005012 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500c:	461a      	mov	r2, r3
 800500e:	2300      	movs	r3, #0
 8005010:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501e:	461a      	mov	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005030:	461a      	mov	r2, r3
 8005032:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	3301      	adds	r3, #1
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005042:	461a      	mov	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4293      	cmp	r3, r2
 8005048:	d3b5      	bcc.n	8004fb6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800505c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800506a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f043 0210 	orr.w	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <USB_DevInit+0x28c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005084:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f043 0208 	orr.w	r2, r3, #8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005098:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a8:	f043 0304 	orr.w	r3, r3, #4
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050bc:	b004      	add	sp, #16
 80050be:	4770      	bx	lr
 80050c0:	803c3800 	.word	0x803c3800

080050c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050de:	d901      	bls.n	80050e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e01b      	b.n	800511c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	daf2      	bge.n	80050d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	019b      	lsls	r3, r3, #6
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005108:	d901      	bls.n	800510e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b20      	cmp	r3, #32
 8005118:	d0f0      	beq.n	80050fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005140:	d901      	bls.n	8005146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e018      	b.n	8005178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	daf2      	bge.n	8005134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2210      	movs	r2, #16
 8005156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005164:	d901      	bls.n	800516a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e006      	b.n	8005178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d0f0      	beq.n	8005158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051d0:	f023 0303 	bic.w	r3, r3, #3
 80051d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0301 	and.w	r3, r3, #1
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800522c:	d901      	bls.n	8005232 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e01b      	b.n	800526a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	daf2      	bge.n	8005220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005256:	d901      	bls.n	800525c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d0f0      	beq.n	800524a <USB_CoreReset+0x36>

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <siprintf>:
 8005278:	b40e      	push	{r1, r2, r3}
 800527a:	b500      	push	{lr}
 800527c:	b09c      	sub	sp, #112	@ 0x70
 800527e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005280:	9002      	str	r0, [sp, #8]
 8005282:	9006      	str	r0, [sp, #24]
 8005284:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005288:	4809      	ldr	r0, [pc, #36]	@ (80052b0 <siprintf+0x38>)
 800528a:	9107      	str	r1, [sp, #28]
 800528c:	9104      	str	r1, [sp, #16]
 800528e:	4909      	ldr	r1, [pc, #36]	@ (80052b4 <siprintf+0x3c>)
 8005290:	f853 2b04 	ldr.w	r2, [r3], #4
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	6800      	ldr	r0, [r0, #0]
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	a902      	add	r1, sp, #8
 800529c:	f000 f994 	bl	80055c8 <_svfiprintf_r>
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	b01c      	add	sp, #112	@ 0x70
 80052a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ac:	b003      	add	sp, #12
 80052ae:	4770      	bx	lr
 80052b0:	2004000c 	.word	0x2004000c
 80052b4:	ffff0208 	.word	0xffff0208

080052b8 <memset>:
 80052b8:	4402      	add	r2, r0
 80052ba:	4603      	mov	r3, r0
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	f803 1b01 	strb.w	r1, [r3], #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <__errno>:
 80052c8:	4b01      	ldr	r3, [pc, #4]	@ (80052d0 <__errno+0x8>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	2004000c 	.word	0x2004000c

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4d0d      	ldr	r5, [pc, #52]	@ (800530c <__libc_init_array+0x38>)
 80052d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005310 <__libc_init_array+0x3c>)
 80052da:	1b64      	subs	r4, r4, r5
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	2600      	movs	r6, #0
 80052e0:	42a6      	cmp	r6, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005314 <__libc_init_array+0x40>)
 80052e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005318 <__libc_init_array+0x44>)
 80052e8:	f000 fc66 	bl	8005bb8 <_init>
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	2600      	movs	r6, #0
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fc:	4798      	blx	r3
 80052fe:	3601      	adds	r6, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f855 3b04 	ldr.w	r3, [r5], #4
 8005306:	4798      	blx	r3
 8005308:	3601      	adds	r6, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	08005cb4 	.word	0x08005cb4
 8005310:	08005cb4 	.word	0x08005cb4
 8005314:	08005cb4 	.word	0x08005cb4
 8005318:	08005cb8 	.word	0x08005cb8

0800531c <__retarget_lock_acquire_recursive>:
 800531c:	4770      	bx	lr

0800531e <__retarget_lock_release_recursive>:
 800531e:	4770      	bx	lr

08005320 <_free_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4605      	mov	r5, r0
 8005324:	2900      	cmp	r1, #0
 8005326:	d041      	beq.n	80053ac <_free_r+0x8c>
 8005328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800532c:	1f0c      	subs	r4, r1, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	bfb8      	it	lt
 8005332:	18e4      	addlt	r4, r4, r3
 8005334:	f000 f8e0 	bl	80054f8 <__malloc_lock>
 8005338:	4a1d      	ldr	r2, [pc, #116]	@ (80053b0 <_free_r+0x90>)
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	b933      	cbnz	r3, 800534c <_free_r+0x2c>
 800533e:	6063      	str	r3, [r4, #4]
 8005340:	6014      	str	r4, [r2, #0]
 8005342:	4628      	mov	r0, r5
 8005344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005348:	f000 b8dc 	b.w	8005504 <__malloc_unlock>
 800534c:	42a3      	cmp	r3, r4
 800534e:	d908      	bls.n	8005362 <_free_r+0x42>
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	1821      	adds	r1, r4, r0
 8005354:	428b      	cmp	r3, r1
 8005356:	bf01      	itttt	eq
 8005358:	6819      	ldreq	r1, [r3, #0]
 800535a:	685b      	ldreq	r3, [r3, #4]
 800535c:	1809      	addeq	r1, r1, r0
 800535e:	6021      	streq	r1, [r4, #0]
 8005360:	e7ed      	b.n	800533e <_free_r+0x1e>
 8005362:	461a      	mov	r2, r3
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	b10b      	cbz	r3, 800536c <_free_r+0x4c>
 8005368:	42a3      	cmp	r3, r4
 800536a:	d9fa      	bls.n	8005362 <_free_r+0x42>
 800536c:	6811      	ldr	r1, [r2, #0]
 800536e:	1850      	adds	r0, r2, r1
 8005370:	42a0      	cmp	r0, r4
 8005372:	d10b      	bne.n	800538c <_free_r+0x6c>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	4401      	add	r1, r0
 8005378:	1850      	adds	r0, r2, r1
 800537a:	4283      	cmp	r3, r0
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	d1e0      	bne.n	8005342 <_free_r+0x22>
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	6053      	str	r3, [r2, #4]
 8005386:	4408      	add	r0, r1
 8005388:	6010      	str	r0, [r2, #0]
 800538a:	e7da      	b.n	8005342 <_free_r+0x22>
 800538c:	d902      	bls.n	8005394 <_free_r+0x74>
 800538e:	230c      	movs	r3, #12
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	e7d6      	b.n	8005342 <_free_r+0x22>
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	1821      	adds	r1, r4, r0
 8005398:	428b      	cmp	r3, r1
 800539a:	bf04      	itt	eq
 800539c:	6819      	ldreq	r1, [r3, #0]
 800539e:	685b      	ldreq	r3, [r3, #4]
 80053a0:	6063      	str	r3, [r4, #4]
 80053a2:	bf04      	itt	eq
 80053a4:	1809      	addeq	r1, r1, r0
 80053a6:	6021      	streq	r1, [r4, #0]
 80053a8:	6054      	str	r4, [r2, #4]
 80053aa:	e7ca      	b.n	8005342 <_free_r+0x22>
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	200407a4 	.word	0x200407a4

080053b4 <sbrk_aligned>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4e0f      	ldr	r6, [pc, #60]	@ (80053f4 <sbrk_aligned+0x40>)
 80053b8:	460c      	mov	r4, r1
 80053ba:	6831      	ldr	r1, [r6, #0]
 80053bc:	4605      	mov	r5, r0
 80053be:	b911      	cbnz	r1, 80053c6 <sbrk_aligned+0x12>
 80053c0:	f000 fba6 	bl	8005b10 <_sbrk_r>
 80053c4:	6030      	str	r0, [r6, #0]
 80053c6:	4621      	mov	r1, r4
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 fba1 	bl	8005b10 <_sbrk_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d103      	bne.n	80053da <sbrk_aligned+0x26>
 80053d2:	f04f 34ff 	mov.w	r4, #4294967295
 80053d6:	4620      	mov	r0, r4
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	1cc4      	adds	r4, r0, #3
 80053dc:	f024 0403 	bic.w	r4, r4, #3
 80053e0:	42a0      	cmp	r0, r4
 80053e2:	d0f8      	beq.n	80053d6 <sbrk_aligned+0x22>
 80053e4:	1a21      	subs	r1, r4, r0
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fb92 	bl	8005b10 <_sbrk_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1f2      	bne.n	80053d6 <sbrk_aligned+0x22>
 80053f0:	e7ef      	b.n	80053d2 <sbrk_aligned+0x1e>
 80053f2:	bf00      	nop
 80053f4:	200407a0 	.word	0x200407a0

080053f8 <_malloc_r>:
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053fc:	1ccd      	adds	r5, r1, #3
 80053fe:	f025 0503 	bic.w	r5, r5, #3
 8005402:	3508      	adds	r5, #8
 8005404:	2d0c      	cmp	r5, #12
 8005406:	bf38      	it	cc
 8005408:	250c      	movcc	r5, #12
 800540a:	2d00      	cmp	r5, #0
 800540c:	4606      	mov	r6, r0
 800540e:	db01      	blt.n	8005414 <_malloc_r+0x1c>
 8005410:	42a9      	cmp	r1, r5
 8005412:	d904      	bls.n	800541e <_malloc_r+0x26>
 8005414:	230c      	movs	r3, #12
 8005416:	6033      	str	r3, [r6, #0]
 8005418:	2000      	movs	r0, #0
 800541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054f4 <_malloc_r+0xfc>
 8005422:	f000 f869 	bl	80054f8 <__malloc_lock>
 8005426:	f8d8 3000 	ldr.w	r3, [r8]
 800542a:	461c      	mov	r4, r3
 800542c:	bb44      	cbnz	r4, 8005480 <_malloc_r+0x88>
 800542e:	4629      	mov	r1, r5
 8005430:	4630      	mov	r0, r6
 8005432:	f7ff ffbf 	bl	80053b4 <sbrk_aligned>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	4604      	mov	r4, r0
 800543a:	d158      	bne.n	80054ee <_malloc_r+0xf6>
 800543c:	f8d8 4000 	ldr.w	r4, [r8]
 8005440:	4627      	mov	r7, r4
 8005442:	2f00      	cmp	r7, #0
 8005444:	d143      	bne.n	80054ce <_malloc_r+0xd6>
 8005446:	2c00      	cmp	r4, #0
 8005448:	d04b      	beq.n	80054e2 <_malloc_r+0xea>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	4639      	mov	r1, r7
 800544e:	4630      	mov	r0, r6
 8005450:	eb04 0903 	add.w	r9, r4, r3
 8005454:	f000 fb5c 	bl	8005b10 <_sbrk_r>
 8005458:	4581      	cmp	r9, r0
 800545a:	d142      	bne.n	80054e2 <_malloc_r+0xea>
 800545c:	6821      	ldr	r1, [r4, #0]
 800545e:	1a6d      	subs	r5, r5, r1
 8005460:	4629      	mov	r1, r5
 8005462:	4630      	mov	r0, r6
 8005464:	f7ff ffa6 	bl	80053b4 <sbrk_aligned>
 8005468:	3001      	adds	r0, #1
 800546a:	d03a      	beq.n	80054e2 <_malloc_r+0xea>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	442b      	add	r3, r5
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	f8d8 3000 	ldr.w	r3, [r8]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	bb62      	cbnz	r2, 80054d4 <_malloc_r+0xdc>
 800547a:	f8c8 7000 	str.w	r7, [r8]
 800547e:	e00f      	b.n	80054a0 <_malloc_r+0xa8>
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	1b52      	subs	r2, r2, r5
 8005484:	d420      	bmi.n	80054c8 <_malloc_r+0xd0>
 8005486:	2a0b      	cmp	r2, #11
 8005488:	d917      	bls.n	80054ba <_malloc_r+0xc2>
 800548a:	1961      	adds	r1, r4, r5
 800548c:	42a3      	cmp	r3, r4
 800548e:	6025      	str	r5, [r4, #0]
 8005490:	bf18      	it	ne
 8005492:	6059      	strne	r1, [r3, #4]
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	bf08      	it	eq
 8005498:	f8c8 1000 	streq.w	r1, [r8]
 800549c:	5162      	str	r2, [r4, r5]
 800549e:	604b      	str	r3, [r1, #4]
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 f82f 	bl	8005504 <__malloc_unlock>
 80054a6:	f104 000b 	add.w	r0, r4, #11
 80054aa:	1d23      	adds	r3, r4, #4
 80054ac:	f020 0007 	bic.w	r0, r0, #7
 80054b0:	1ac2      	subs	r2, r0, r3
 80054b2:	bf1c      	itt	ne
 80054b4:	1a1b      	subne	r3, r3, r0
 80054b6:	50a3      	strne	r3, [r4, r2]
 80054b8:	e7af      	b.n	800541a <_malloc_r+0x22>
 80054ba:	6862      	ldr	r2, [r4, #4]
 80054bc:	42a3      	cmp	r3, r4
 80054be:	bf0c      	ite	eq
 80054c0:	f8c8 2000 	streq.w	r2, [r8]
 80054c4:	605a      	strne	r2, [r3, #4]
 80054c6:	e7eb      	b.n	80054a0 <_malloc_r+0xa8>
 80054c8:	4623      	mov	r3, r4
 80054ca:	6864      	ldr	r4, [r4, #4]
 80054cc:	e7ae      	b.n	800542c <_malloc_r+0x34>
 80054ce:	463c      	mov	r4, r7
 80054d0:	687f      	ldr	r7, [r7, #4]
 80054d2:	e7b6      	b.n	8005442 <_malloc_r+0x4a>
 80054d4:	461a      	mov	r2, r3
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d1fb      	bne.n	80054d4 <_malloc_r+0xdc>
 80054dc:	2300      	movs	r3, #0
 80054de:	6053      	str	r3, [r2, #4]
 80054e0:	e7de      	b.n	80054a0 <_malloc_r+0xa8>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6033      	str	r3, [r6, #0]
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f80c 	bl	8005504 <__malloc_unlock>
 80054ec:	e794      	b.n	8005418 <_malloc_r+0x20>
 80054ee:	6005      	str	r5, [r0, #0]
 80054f0:	e7d6      	b.n	80054a0 <_malloc_r+0xa8>
 80054f2:	bf00      	nop
 80054f4:	200407a4 	.word	0x200407a4

080054f8 <__malloc_lock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	@ (8005500 <__malloc_lock+0x8>)
 80054fa:	f7ff bf0f 	b.w	800531c <__retarget_lock_acquire_recursive>
 80054fe:	bf00      	nop
 8005500:	2004079c 	.word	0x2004079c

08005504 <__malloc_unlock>:
 8005504:	4801      	ldr	r0, [pc, #4]	@ (800550c <__malloc_unlock+0x8>)
 8005506:	f7ff bf0a 	b.w	800531e <__retarget_lock_release_recursive>
 800550a:	bf00      	nop
 800550c:	2004079c 	.word	0x2004079c

08005510 <__ssputs_r>:
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	688e      	ldr	r6, [r1, #8]
 8005516:	461f      	mov	r7, r3
 8005518:	42be      	cmp	r6, r7
 800551a:	680b      	ldr	r3, [r1, #0]
 800551c:	4682      	mov	sl, r0
 800551e:	460c      	mov	r4, r1
 8005520:	4690      	mov	r8, r2
 8005522:	d82d      	bhi.n	8005580 <__ssputs_r+0x70>
 8005524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005528:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800552c:	d026      	beq.n	800557c <__ssputs_r+0x6c>
 800552e:	6965      	ldr	r5, [r4, #20]
 8005530:	6909      	ldr	r1, [r1, #16]
 8005532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005536:	eba3 0901 	sub.w	r9, r3, r1
 800553a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800553e:	1c7b      	adds	r3, r7, #1
 8005540:	444b      	add	r3, r9
 8005542:	106d      	asrs	r5, r5, #1
 8005544:	429d      	cmp	r5, r3
 8005546:	bf38      	it	cc
 8005548:	461d      	movcc	r5, r3
 800554a:	0553      	lsls	r3, r2, #21
 800554c:	d527      	bpl.n	800559e <__ssputs_r+0x8e>
 800554e:	4629      	mov	r1, r5
 8005550:	f7ff ff52 	bl	80053f8 <_malloc_r>
 8005554:	4606      	mov	r6, r0
 8005556:	b360      	cbz	r0, 80055b2 <__ssputs_r+0xa2>
 8005558:	6921      	ldr	r1, [r4, #16]
 800555a:	464a      	mov	r2, r9
 800555c:	f000 fae8 	bl	8005b30 <memcpy>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	6126      	str	r6, [r4, #16]
 800556e:	6165      	str	r5, [r4, #20]
 8005570:	444e      	add	r6, r9
 8005572:	eba5 0509 	sub.w	r5, r5, r9
 8005576:	6026      	str	r6, [r4, #0]
 8005578:	60a5      	str	r5, [r4, #8]
 800557a:	463e      	mov	r6, r7
 800557c:	42be      	cmp	r6, r7
 800557e:	d900      	bls.n	8005582 <__ssputs_r+0x72>
 8005580:	463e      	mov	r6, r7
 8005582:	6820      	ldr	r0, [r4, #0]
 8005584:	4632      	mov	r2, r6
 8005586:	4641      	mov	r1, r8
 8005588:	f000 faa8 	bl	8005adc <memmove>
 800558c:	68a3      	ldr	r3, [r4, #8]
 800558e:	1b9b      	subs	r3, r3, r6
 8005590:	60a3      	str	r3, [r4, #8]
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	4433      	add	r3, r6
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	2000      	movs	r0, #0
 800559a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559e:	462a      	mov	r2, r5
 80055a0:	f000 fad4 	bl	8005b4c <_realloc_r>
 80055a4:	4606      	mov	r6, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d1e0      	bne.n	800556c <__ssputs_r+0x5c>
 80055aa:	6921      	ldr	r1, [r4, #16]
 80055ac:	4650      	mov	r0, sl
 80055ae:	f7ff feb7 	bl	8005320 <_free_r>
 80055b2:	230c      	movs	r3, #12
 80055b4:	f8ca 3000 	str.w	r3, [sl]
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	e7e9      	b.n	800559a <__ssputs_r+0x8a>
	...

080055c8 <_svfiprintf_r>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	4698      	mov	r8, r3
 80055ce:	898b      	ldrh	r3, [r1, #12]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	b09d      	sub	sp, #116	@ 0x74
 80055d4:	4607      	mov	r7, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	4614      	mov	r4, r2
 80055da:	d510      	bpl.n	80055fe <_svfiprintf_r+0x36>
 80055dc:	690b      	ldr	r3, [r1, #16]
 80055de:	b973      	cbnz	r3, 80055fe <_svfiprintf_r+0x36>
 80055e0:	2140      	movs	r1, #64	@ 0x40
 80055e2:	f7ff ff09 	bl	80053f8 <_malloc_r>
 80055e6:	6028      	str	r0, [r5, #0]
 80055e8:	6128      	str	r0, [r5, #16]
 80055ea:	b930      	cbnz	r0, 80055fa <_svfiprintf_r+0x32>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	b01d      	add	sp, #116	@ 0x74
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	2340      	movs	r3, #64	@ 0x40
 80055fc:	616b      	str	r3, [r5, #20]
 80055fe:	2300      	movs	r3, #0
 8005600:	9309      	str	r3, [sp, #36]	@ 0x24
 8005602:	2320      	movs	r3, #32
 8005604:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005608:	f8cd 800c 	str.w	r8, [sp, #12]
 800560c:	2330      	movs	r3, #48	@ 0x30
 800560e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057ac <_svfiprintf_r+0x1e4>
 8005612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005616:	f04f 0901 	mov.w	r9, #1
 800561a:	4623      	mov	r3, r4
 800561c:	469a      	mov	sl, r3
 800561e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005622:	b10a      	cbz	r2, 8005628 <_svfiprintf_r+0x60>
 8005624:	2a25      	cmp	r2, #37	@ 0x25
 8005626:	d1f9      	bne.n	800561c <_svfiprintf_r+0x54>
 8005628:	ebba 0b04 	subs.w	fp, sl, r4
 800562c:	d00b      	beq.n	8005646 <_svfiprintf_r+0x7e>
 800562e:	465b      	mov	r3, fp
 8005630:	4622      	mov	r2, r4
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ff6b 	bl	8005510 <__ssputs_r>
 800563a:	3001      	adds	r0, #1
 800563c:	f000 80a7 	beq.w	800578e <_svfiprintf_r+0x1c6>
 8005640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005642:	445a      	add	r2, fp
 8005644:	9209      	str	r2, [sp, #36]	@ 0x24
 8005646:	f89a 3000 	ldrb.w	r3, [sl]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 809f 	beq.w	800578e <_svfiprintf_r+0x1c6>
 8005650:	2300      	movs	r3, #0
 8005652:	f04f 32ff 	mov.w	r2, #4294967295
 8005656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800565a:	f10a 0a01 	add.w	sl, sl, #1
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	9307      	str	r3, [sp, #28]
 8005662:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005666:	931a      	str	r3, [sp, #104]	@ 0x68
 8005668:	4654      	mov	r4, sl
 800566a:	2205      	movs	r2, #5
 800566c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005670:	484e      	ldr	r0, [pc, #312]	@ (80057ac <_svfiprintf_r+0x1e4>)
 8005672:	f7fa fdcd 	bl	8000210 <memchr>
 8005676:	9a04      	ldr	r2, [sp, #16]
 8005678:	b9d8      	cbnz	r0, 80056b2 <_svfiprintf_r+0xea>
 800567a:	06d0      	lsls	r0, r2, #27
 800567c:	bf44      	itt	mi
 800567e:	2320      	movmi	r3, #32
 8005680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005684:	0711      	lsls	r1, r2, #28
 8005686:	bf44      	itt	mi
 8005688:	232b      	movmi	r3, #43	@ 0x2b
 800568a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800568e:	f89a 3000 	ldrb.w	r3, [sl]
 8005692:	2b2a      	cmp	r3, #42	@ 0x2a
 8005694:	d015      	beq.n	80056c2 <_svfiprintf_r+0xfa>
 8005696:	9a07      	ldr	r2, [sp, #28]
 8005698:	4654      	mov	r4, sl
 800569a:	2000      	movs	r0, #0
 800569c:	f04f 0c0a 	mov.w	ip, #10
 80056a0:	4621      	mov	r1, r4
 80056a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a6:	3b30      	subs	r3, #48	@ 0x30
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d94b      	bls.n	8005744 <_svfiprintf_r+0x17c>
 80056ac:	b1b0      	cbz	r0, 80056dc <_svfiprintf_r+0x114>
 80056ae:	9207      	str	r2, [sp, #28]
 80056b0:	e014      	b.n	80056dc <_svfiprintf_r+0x114>
 80056b2:	eba0 0308 	sub.w	r3, r0, r8
 80056b6:	fa09 f303 	lsl.w	r3, r9, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	46a2      	mov	sl, r4
 80056c0:	e7d2      	b.n	8005668 <_svfiprintf_r+0xa0>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	1d19      	adds	r1, r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	9103      	str	r1, [sp, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfbb      	ittet	lt
 80056ce:	425b      	neglt	r3, r3
 80056d0:	f042 0202 	orrlt.w	r2, r2, #2
 80056d4:	9307      	strge	r3, [sp, #28]
 80056d6:	9307      	strlt	r3, [sp, #28]
 80056d8:	bfb8      	it	lt
 80056da:	9204      	strlt	r2, [sp, #16]
 80056dc:	7823      	ldrb	r3, [r4, #0]
 80056de:	2b2e      	cmp	r3, #46	@ 0x2e
 80056e0:	d10a      	bne.n	80056f8 <_svfiprintf_r+0x130>
 80056e2:	7863      	ldrb	r3, [r4, #1]
 80056e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80056e6:	d132      	bne.n	800574e <_svfiprintf_r+0x186>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	9203      	str	r2, [sp, #12]
 80056f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056f4:	3402      	adds	r4, #2
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057bc <_svfiprintf_r+0x1f4>
 80056fc:	7821      	ldrb	r1, [r4, #0]
 80056fe:	2203      	movs	r2, #3
 8005700:	4650      	mov	r0, sl
 8005702:	f7fa fd85 	bl	8000210 <memchr>
 8005706:	b138      	cbz	r0, 8005718 <_svfiprintf_r+0x150>
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	eba0 000a 	sub.w	r0, r0, sl
 800570e:	2240      	movs	r2, #64	@ 0x40
 8005710:	4082      	lsls	r2, r0
 8005712:	4313      	orrs	r3, r2
 8005714:	3401      	adds	r4, #1
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4824      	ldr	r0, [pc, #144]	@ (80057b0 <_svfiprintf_r+0x1e8>)
 800571e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005722:	2206      	movs	r2, #6
 8005724:	f7fa fd74 	bl	8000210 <memchr>
 8005728:	2800      	cmp	r0, #0
 800572a:	d036      	beq.n	800579a <_svfiprintf_r+0x1d2>
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <_svfiprintf_r+0x1ec>)
 800572e:	bb1b      	cbnz	r3, 8005778 <_svfiprintf_r+0x1b0>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	3307      	adds	r3, #7
 8005734:	f023 0307 	bic.w	r3, r3, #7
 8005738:	3308      	adds	r3, #8
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573e:	4433      	add	r3, r6
 8005740:	9309      	str	r3, [sp, #36]	@ 0x24
 8005742:	e76a      	b.n	800561a <_svfiprintf_r+0x52>
 8005744:	fb0c 3202 	mla	r2, ip, r2, r3
 8005748:	460c      	mov	r4, r1
 800574a:	2001      	movs	r0, #1
 800574c:	e7a8      	b.n	80056a0 <_svfiprintf_r+0xd8>
 800574e:	2300      	movs	r3, #0
 8005750:	3401      	adds	r4, #1
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	4619      	mov	r1, r3
 8005756:	f04f 0c0a 	mov.w	ip, #10
 800575a:	4620      	mov	r0, r4
 800575c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005760:	3a30      	subs	r2, #48	@ 0x30
 8005762:	2a09      	cmp	r2, #9
 8005764:	d903      	bls.n	800576e <_svfiprintf_r+0x1a6>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0c6      	beq.n	80056f8 <_svfiprintf_r+0x130>
 800576a:	9105      	str	r1, [sp, #20]
 800576c:	e7c4      	b.n	80056f8 <_svfiprintf_r+0x130>
 800576e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005772:	4604      	mov	r4, r0
 8005774:	2301      	movs	r3, #1
 8005776:	e7f0      	b.n	800575a <_svfiprintf_r+0x192>
 8005778:	ab03      	add	r3, sp, #12
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	462a      	mov	r2, r5
 800577e:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <_svfiprintf_r+0x1f0>)
 8005780:	a904      	add	r1, sp, #16
 8005782:	4638      	mov	r0, r7
 8005784:	f3af 8000 	nop.w
 8005788:	1c42      	adds	r2, r0, #1
 800578a:	4606      	mov	r6, r0
 800578c:	d1d6      	bne.n	800573c <_svfiprintf_r+0x174>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	065b      	lsls	r3, r3, #25
 8005792:	f53f af2d 	bmi.w	80055f0 <_svfiprintf_r+0x28>
 8005796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005798:	e72c      	b.n	80055f4 <_svfiprintf_r+0x2c>
 800579a:	ab03      	add	r3, sp, #12
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <_svfiprintf_r+0x1f0>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	4638      	mov	r0, r7
 80057a6:	f000 f879 	bl	800589c <_printf_i>
 80057aa:	e7ed      	b.n	8005788 <_svfiprintf_r+0x1c0>
 80057ac:	08005c78 	.word	0x08005c78
 80057b0:	08005c82 	.word	0x08005c82
 80057b4:	00000000 	.word	0x00000000
 80057b8:	08005511 	.word	0x08005511
 80057bc:	08005c7e 	.word	0x08005c7e

080057c0 <_printf_common>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	4698      	mov	r8, r3
 80057c8:	688a      	ldr	r2, [r1, #8]
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfb8      	it	lt
 80057d4:	4613      	movlt	r3, r2
 80057d6:	6033      	str	r3, [r6, #0]
 80057d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057dc:	4607      	mov	r7, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	b10a      	cbz	r2, 80057e6 <_printf_common+0x26>
 80057e2:	3301      	adds	r3, #1
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	6833      	ldrmi	r3, [r6, #0]
 80057ee:	3302      	addmi	r3, #2
 80057f0:	6033      	strmi	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d106      	bne.n	8005808 <_printf_common+0x48>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	6832      	ldr	r2, [r6, #0]
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc26      	bgt.n	8005856 <_printf_common+0x96>
 8005808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	3b00      	subs	r3, #0
 8005810:	bf18      	it	ne
 8005812:	2301      	movne	r3, #1
 8005814:	0692      	lsls	r2, r2, #26
 8005816:	d42b      	bmi.n	8005870 <_printf_common+0xb0>
 8005818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800581c:	4641      	mov	r1, r8
 800581e:	4638      	mov	r0, r7
 8005820:	47c8      	blx	r9
 8005822:	3001      	adds	r0, #1
 8005824:	d01e      	beq.n	8005864 <_printf_common+0xa4>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	f003 0306 	and.w	r3, r3, #6
 800582e:	2b04      	cmp	r3, #4
 8005830:	bf02      	ittt	eq
 8005832:	68e5      	ldreq	r5, [r4, #12]
 8005834:	6833      	ldreq	r3, [r6, #0]
 8005836:	1aed      	subeq	r5, r5, r3
 8005838:	68a3      	ldr	r3, [r4, #8]
 800583a:	bf0c      	ite	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	2500      	movne	r5, #0
 8005842:	4293      	cmp	r3, r2
 8005844:	bfc4      	itt	gt
 8005846:	1a9b      	subgt	r3, r3, r2
 8005848:	18ed      	addgt	r5, r5, r3
 800584a:	2600      	movs	r6, #0
 800584c:	341a      	adds	r4, #26
 800584e:	42b5      	cmp	r5, r6
 8005850:	d11a      	bne.n	8005888 <_printf_common+0xc8>
 8005852:	2000      	movs	r0, #0
 8005854:	e008      	b.n	8005868 <_printf_common+0xa8>
 8005856:	2301      	movs	r3, #1
 8005858:	4652      	mov	r2, sl
 800585a:	4641      	mov	r1, r8
 800585c:	4638      	mov	r0, r7
 800585e:	47c8      	blx	r9
 8005860:	3001      	adds	r0, #1
 8005862:	d103      	bne.n	800586c <_printf_common+0xac>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586c:	3501      	adds	r5, #1
 800586e:	e7c6      	b.n	80057fe <_printf_common+0x3e>
 8005870:	18e1      	adds	r1, r4, r3
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	2030      	movs	r0, #48	@ 0x30
 8005876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800587a:	4422      	add	r2, r4
 800587c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005884:	3302      	adds	r3, #2
 8005886:	e7c7      	b.n	8005818 <_printf_common+0x58>
 8005888:	2301      	movs	r3, #1
 800588a:	4622      	mov	r2, r4
 800588c:	4641      	mov	r1, r8
 800588e:	4638      	mov	r0, r7
 8005890:	47c8      	blx	r9
 8005892:	3001      	adds	r0, #1
 8005894:	d0e6      	beq.n	8005864 <_printf_common+0xa4>
 8005896:	3601      	adds	r6, #1
 8005898:	e7d9      	b.n	800584e <_printf_common+0x8e>
	...

0800589c <_printf_i>:
 800589c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	7e0f      	ldrb	r7, [r1, #24]
 80058a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058a4:	2f78      	cmp	r7, #120	@ 0x78
 80058a6:	4691      	mov	r9, r2
 80058a8:	4680      	mov	r8, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	469a      	mov	sl, r3
 80058ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058b2:	d807      	bhi.n	80058c4 <_printf_i+0x28>
 80058b4:	2f62      	cmp	r7, #98	@ 0x62
 80058b6:	d80a      	bhi.n	80058ce <_printf_i+0x32>
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	f000 80d2 	beq.w	8005a62 <_printf_i+0x1c6>
 80058be:	2f58      	cmp	r7, #88	@ 0x58
 80058c0:	f000 80b9 	beq.w	8005a36 <_printf_i+0x19a>
 80058c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058cc:	e03a      	b.n	8005944 <_printf_i+0xa8>
 80058ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058d2:	2b15      	cmp	r3, #21
 80058d4:	d8f6      	bhi.n	80058c4 <_printf_i+0x28>
 80058d6:	a101      	add	r1, pc, #4	@ (adr r1, 80058dc <_printf_i+0x40>)
 80058d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058dc:	08005935 	.word	0x08005935
 80058e0:	08005949 	.word	0x08005949
 80058e4:	080058c5 	.word	0x080058c5
 80058e8:	080058c5 	.word	0x080058c5
 80058ec:	080058c5 	.word	0x080058c5
 80058f0:	080058c5 	.word	0x080058c5
 80058f4:	08005949 	.word	0x08005949
 80058f8:	080058c5 	.word	0x080058c5
 80058fc:	080058c5 	.word	0x080058c5
 8005900:	080058c5 	.word	0x080058c5
 8005904:	080058c5 	.word	0x080058c5
 8005908:	08005a49 	.word	0x08005a49
 800590c:	08005973 	.word	0x08005973
 8005910:	08005a03 	.word	0x08005a03
 8005914:	080058c5 	.word	0x080058c5
 8005918:	080058c5 	.word	0x080058c5
 800591c:	08005a6b 	.word	0x08005a6b
 8005920:	080058c5 	.word	0x080058c5
 8005924:	08005973 	.word	0x08005973
 8005928:	080058c5 	.word	0x080058c5
 800592c:	080058c5 	.word	0x080058c5
 8005930:	08005a0b 	.word	0x08005a0b
 8005934:	6833      	ldr	r3, [r6, #0]
 8005936:	1d1a      	adds	r2, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6032      	str	r2, [r6, #0]
 800593c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005944:	2301      	movs	r3, #1
 8005946:	e09d      	b.n	8005a84 <_printf_i+0x1e8>
 8005948:	6833      	ldr	r3, [r6, #0]
 800594a:	6820      	ldr	r0, [r4, #0]
 800594c:	1d19      	adds	r1, r3, #4
 800594e:	6031      	str	r1, [r6, #0]
 8005950:	0606      	lsls	r6, r0, #24
 8005952:	d501      	bpl.n	8005958 <_printf_i+0xbc>
 8005954:	681d      	ldr	r5, [r3, #0]
 8005956:	e003      	b.n	8005960 <_printf_i+0xc4>
 8005958:	0645      	lsls	r5, r0, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0xb8>
 800595c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005960:	2d00      	cmp	r5, #0
 8005962:	da03      	bge.n	800596c <_printf_i+0xd0>
 8005964:	232d      	movs	r3, #45	@ 0x2d
 8005966:	426d      	negs	r5, r5
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800596c:	4859      	ldr	r0, [pc, #356]	@ (8005ad4 <_printf_i+0x238>)
 800596e:	230a      	movs	r3, #10
 8005970:	e011      	b.n	8005996 <_printf_i+0xfa>
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	6833      	ldr	r3, [r6, #0]
 8005976:	0608      	lsls	r0, r1, #24
 8005978:	f853 5b04 	ldr.w	r5, [r3], #4
 800597c:	d402      	bmi.n	8005984 <_printf_i+0xe8>
 800597e:	0649      	lsls	r1, r1, #25
 8005980:	bf48      	it	mi
 8005982:	b2ad      	uxthmi	r5, r5
 8005984:	2f6f      	cmp	r7, #111	@ 0x6f
 8005986:	4853      	ldr	r0, [pc, #332]	@ (8005ad4 <_printf_i+0x238>)
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	bf14      	ite	ne
 800598c:	230a      	movne	r3, #10
 800598e:	2308      	moveq	r3, #8
 8005990:	2100      	movs	r1, #0
 8005992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005996:	6866      	ldr	r6, [r4, #4]
 8005998:	60a6      	str	r6, [r4, #8]
 800599a:	2e00      	cmp	r6, #0
 800599c:	bfa2      	ittt	ge
 800599e:	6821      	ldrge	r1, [r4, #0]
 80059a0:	f021 0104 	bicge.w	r1, r1, #4
 80059a4:	6021      	strge	r1, [r4, #0]
 80059a6:	b90d      	cbnz	r5, 80059ac <_printf_i+0x110>
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	d04b      	beq.n	8005a44 <_printf_i+0x1a8>
 80059ac:	4616      	mov	r6, r2
 80059ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80059b2:	fb03 5711 	mls	r7, r3, r1, r5
 80059b6:	5dc7      	ldrb	r7, [r0, r7]
 80059b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059bc:	462f      	mov	r7, r5
 80059be:	42bb      	cmp	r3, r7
 80059c0:	460d      	mov	r5, r1
 80059c2:	d9f4      	bls.n	80059ae <_printf_i+0x112>
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d10b      	bne.n	80059e0 <_printf_i+0x144>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	07df      	lsls	r7, r3, #31
 80059cc:	d508      	bpl.n	80059e0 <_printf_i+0x144>
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6861      	ldr	r1, [r4, #4]
 80059d2:	4299      	cmp	r1, r3
 80059d4:	bfde      	ittt	le
 80059d6:	2330      	movle	r3, #48	@ 0x30
 80059d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059e0:	1b92      	subs	r2, r2, r6
 80059e2:	6122      	str	r2, [r4, #16]
 80059e4:	f8cd a000 	str.w	sl, [sp]
 80059e8:	464b      	mov	r3, r9
 80059ea:	aa03      	add	r2, sp, #12
 80059ec:	4621      	mov	r1, r4
 80059ee:	4640      	mov	r0, r8
 80059f0:	f7ff fee6 	bl	80057c0 <_printf_common>
 80059f4:	3001      	adds	r0, #1
 80059f6:	d14a      	bne.n	8005a8e <_printf_i+0x1f2>
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	b004      	add	sp, #16
 80059fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f043 0320 	orr.w	r3, r3, #32
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	4833      	ldr	r0, [pc, #204]	@ (8005ad8 <_printf_i+0x23c>)
 8005a0c:	2778      	movs	r7, #120	@ 0x78
 8005a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6831      	ldr	r1, [r6, #0]
 8005a16:	061f      	lsls	r7, r3, #24
 8005a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a1c:	d402      	bmi.n	8005a24 <_printf_i+0x188>
 8005a1e:	065f      	lsls	r7, r3, #25
 8005a20:	bf48      	it	mi
 8005a22:	b2ad      	uxthmi	r5, r5
 8005a24:	6031      	str	r1, [r6, #0]
 8005a26:	07d9      	lsls	r1, r3, #31
 8005a28:	bf44      	itt	mi
 8005a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2e:	6023      	strmi	r3, [r4, #0]
 8005a30:	b11d      	cbz	r5, 8005a3a <_printf_i+0x19e>
 8005a32:	2310      	movs	r3, #16
 8005a34:	e7ac      	b.n	8005990 <_printf_i+0xf4>
 8005a36:	4827      	ldr	r0, [pc, #156]	@ (8005ad4 <_printf_i+0x238>)
 8005a38:	e7e9      	b.n	8005a0e <_printf_i+0x172>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f023 0320 	bic.w	r3, r3, #32
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	e7f6      	b.n	8005a32 <_printf_i+0x196>
 8005a44:	4616      	mov	r6, r2
 8005a46:	e7bd      	b.n	80059c4 <_printf_i+0x128>
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	6825      	ldr	r5, [r4, #0]
 8005a4c:	6961      	ldr	r1, [r4, #20]
 8005a4e:	1d18      	adds	r0, r3, #4
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	062e      	lsls	r6, r5, #24
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0x1c0>
 8005a58:	6019      	str	r1, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0x1c6>
 8005a5c:	0668      	lsls	r0, r5, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0x1bc>
 8005a60:	8019      	strh	r1, [r3, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	4616      	mov	r6, r2
 8005a68:	e7bc      	b.n	80059e4 <_printf_i+0x148>
 8005a6a:	6833      	ldr	r3, [r6, #0]
 8005a6c:	1d1a      	adds	r2, r3, #4
 8005a6e:	6032      	str	r2, [r6, #0]
 8005a70:	681e      	ldr	r6, [r3, #0]
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	2100      	movs	r1, #0
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7fa fbca 	bl	8000210 <memchr>
 8005a7c:	b108      	cbz	r0, 8005a82 <_printf_i+0x1e6>
 8005a7e:	1b80      	subs	r0, r0, r6
 8005a80:	6060      	str	r0, [r4, #4]
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	2300      	movs	r3, #0
 8005a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a8c:	e7aa      	b.n	80059e4 <_printf_i+0x148>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	4632      	mov	r2, r6
 8005a92:	4649      	mov	r1, r9
 8005a94:	4640      	mov	r0, r8
 8005a96:	47d0      	blx	sl
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d0ad      	beq.n	80059f8 <_printf_i+0x15c>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	079b      	lsls	r3, r3, #30
 8005aa0:	d413      	bmi.n	8005aca <_printf_i+0x22e>
 8005aa2:	68e0      	ldr	r0, [r4, #12]
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	bfb8      	it	lt
 8005aaa:	4618      	movlt	r0, r3
 8005aac:	e7a6      	b.n	80059fc <_printf_i+0x160>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	47d0      	blx	sl
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d09d      	beq.n	80059f8 <_printf_i+0x15c>
 8005abc:	3501      	adds	r5, #1
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	9903      	ldr	r1, [sp, #12]
 8005ac2:	1a5b      	subs	r3, r3, r1
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dcf2      	bgt.n	8005aae <_printf_i+0x212>
 8005ac8:	e7eb      	b.n	8005aa2 <_printf_i+0x206>
 8005aca:	2500      	movs	r5, #0
 8005acc:	f104 0619 	add.w	r6, r4, #25
 8005ad0:	e7f5      	b.n	8005abe <_printf_i+0x222>
 8005ad2:	bf00      	nop
 8005ad4:	08005c89 	.word	0x08005c89
 8005ad8:	08005c9a 	.word	0x08005c9a

08005adc <memmove>:
 8005adc:	4288      	cmp	r0, r1
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	eb01 0402 	add.w	r4, r1, r2
 8005ae4:	d902      	bls.n	8005aec <memmove+0x10>
 8005ae6:	4284      	cmp	r4, r0
 8005ae8:	4623      	mov	r3, r4
 8005aea:	d807      	bhi.n	8005afc <memmove+0x20>
 8005aec:	1e43      	subs	r3, r0, #1
 8005aee:	42a1      	cmp	r1, r4
 8005af0:	d008      	beq.n	8005b04 <memmove+0x28>
 8005af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005afa:	e7f8      	b.n	8005aee <memmove+0x12>
 8005afc:	4402      	add	r2, r0
 8005afe:	4601      	mov	r1, r0
 8005b00:	428a      	cmp	r2, r1
 8005b02:	d100      	bne.n	8005b06 <memmove+0x2a>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b0e:	e7f7      	b.n	8005b00 <memmove+0x24>

08005b10 <_sbrk_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d06      	ldr	r5, [pc, #24]	@ (8005b2c <_sbrk_r+0x1c>)
 8005b14:	2300      	movs	r3, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	f7fb faac 	bl	8001078 <_sbrk>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_sbrk_r+0x1a>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_sbrk_r+0x1a>
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	20040798 	.word	0x20040798

08005b30 <memcpy>:
 8005b30:	440a      	add	r2, r1
 8005b32:	4291      	cmp	r1, r2
 8005b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b38:	d100      	bne.n	8005b3c <memcpy+0xc>
 8005b3a:	4770      	bx	lr
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b46:	4291      	cmp	r1, r2
 8005b48:	d1f9      	bne.n	8005b3e <memcpy+0xe>
 8005b4a:	bd10      	pop	{r4, pc}

08005b4c <_realloc_r>:
 8005b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	4680      	mov	r8, r0
 8005b52:	4615      	mov	r5, r2
 8005b54:	460c      	mov	r4, r1
 8005b56:	b921      	cbnz	r1, 8005b62 <_realloc_r+0x16>
 8005b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	f7ff bc4b 	b.w	80053f8 <_malloc_r>
 8005b62:	b92a      	cbnz	r2, 8005b70 <_realloc_r+0x24>
 8005b64:	f7ff fbdc 	bl	8005320 <_free_r>
 8005b68:	2400      	movs	r4, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	f000 f81a 	bl	8005ba8 <_malloc_usable_size_r>
 8005b74:	4285      	cmp	r5, r0
 8005b76:	4606      	mov	r6, r0
 8005b78:	d802      	bhi.n	8005b80 <_realloc_r+0x34>
 8005b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b7e:	d8f4      	bhi.n	8005b6a <_realloc_r+0x1e>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4640      	mov	r0, r8
 8005b84:	f7ff fc38 	bl	80053f8 <_malloc_r>
 8005b88:	4607      	mov	r7, r0
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d0ec      	beq.n	8005b68 <_realloc_r+0x1c>
 8005b8e:	42b5      	cmp	r5, r6
 8005b90:	462a      	mov	r2, r5
 8005b92:	4621      	mov	r1, r4
 8005b94:	bf28      	it	cs
 8005b96:	4632      	movcs	r2, r6
 8005b98:	f7ff ffca 	bl	8005b30 <memcpy>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f7ff fbbe 	bl	8005320 <_free_r>
 8005ba4:	463c      	mov	r4, r7
 8005ba6:	e7e0      	b.n	8005b6a <_realloc_r+0x1e>

08005ba8 <_malloc_usable_size_r>:
 8005ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bac:	1f18      	subs	r0, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bfbc      	itt	lt
 8005bb2:	580b      	ldrlt	r3, [r1, r0]
 8005bb4:	18c0      	addlt	r0, r0, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
